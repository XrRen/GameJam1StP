;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: b6a77b751153fc12a750bd0fbd6dc8fb
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer View
; {
;
;   struct hostlayout.View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       row_major float4x4 View_MobileMultiviewDecalTransform;; Offset:  960
;       row_major float4x4 View_FirstPersonTransform; ; Offset: 1024
;       row_major float4x4 View_PrevFirstPersonTransform;; Offset: 1088
;       float3 View_ViewOriginHigh;                   ; Offset: 1152
;       float View_Padding1164;                       ; Offset: 1164
;       float3 View_ViewForward;                      ; Offset: 1168
;       float View_Padding1180;                       ; Offset: 1180
;       float3 View_ViewUp;                           ; Offset: 1184
;       float View_Padding1196;                       ; Offset: 1196
;       float3 View_ViewRight;                        ; Offset: 1200
;       float View_Padding1212;                       ; Offset: 1212
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1216
;       float View_Padding1228;                       ; Offset: 1228
;       float3 View_HMDViewNoRollRight;               ; Offset: 1232
;       float View_Padding1244;                       ; Offset: 1244
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1248
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1264
;       float3 View_ViewOriginLow;                    ; Offset: 1280
;       float View_Padding1292;                       ; Offset: 1292
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1296
;       float View_Padding1308;                       ; Offset: 1308
;       float3 View_WorldViewOriginHigh;              ; Offset: 1312
;       float View_Padding1324;                       ; Offset: 1324
;       float3 View_WorldViewOriginLow;               ; Offset: 1328
;       float View_Padding1340;                       ; Offset: 1340
;       float3 View_PreViewTranslationHigh;           ; Offset: 1344
;       float View_Padding1356;                       ; Offset: 1356
;       float3 View_PreViewTranslationLow;            ; Offset: 1360
;       float View_Padding1372;                       ; Offset: 1372
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1376
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1440
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1504
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1568
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1632
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1696
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1760
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1824
;       float View_Padding1836;                       ; Offset: 1836
;       float3 View_PrevWorldCameraOriginHigh;        ; Offset: 1840
;       float View_Padding1852;                       ; Offset: 1852
;       float3 View_PrevWorldCameraOriginLow;         ; Offset: 1856
;       float View_Padding1868;                       ; Offset: 1868
;       float3 View_PrevWorldViewOriginHigh;          ; Offset: 1872
;       float View_Padding1884;                       ; Offset: 1884
;       float3 View_PrevWorldViewOriginLow;           ; Offset: 1888
;       float View_Padding1900;                       ; Offset: 1900
;       float3 View_PrevPreViewTranslationHigh;       ; Offset: 1904
;       float View_Padding1916;                       ; Offset: 1916
;       float3 View_PrevPreViewTranslationLow;        ; Offset: 1920
;       float View_Padding1932;                       ; Offset: 1932
;       float3 View_ViewTilePosition;                 ; Offset: 1936
;       float View_Padding1948;                       ; Offset: 1948
;       float3 View_RelativeWorldCameraOriginTO;      ; Offset: 1952
;       float View_Padding1964;                       ; Offset: 1964
;       float3 View_RelativeWorldViewOriginTO;        ; Offset: 1968
;       float View_Padding1980;                       ; Offset: 1980
;       float3 View_RelativePreViewTranslationTO;     ; Offset: 1984
;       float View_Padding1996;                       ; Offset: 1996
;       float3 View_PrevRelativeWorldCameraOriginTO;  ; Offset: 2000
;       float View_Padding2012;                       ; Offset: 2012
;       float3 View_PrevRelativeWorldViewOriginTO;    ; Offset: 2016
;       float View_Padding2028;                       ; Offset: 2028
;       float3 View_RelativePrevPreViewTranslationTO; ; Offset: 2032
;       float View_Padding2044;                       ; Offset: 2044
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 2048
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 2112
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 2176
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 2240
;       float4 View_TemporalAAJitter;                 ; Offset: 2304
;       float4 View_GlobalClippingPlane;              ; Offset: 2320
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2336
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2344
;       float4 View_ViewRectMin;                      ; Offset: 2352
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2368
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2384
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2400
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2416
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2432
;       float4 View_ScreenToViewSpace;                ; Offset: 2448
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2464
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2472
;       int View_NumSceneColorMSAASamples;            ; Offset: 2480
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2484
;       float View_PreExposure;                       ; Offset: 2488
;       float View_OneOverPreExposure;                ; Offset: 2492
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2496
;       float4 View_SpecularOverrideParameter;        ; Offset: 2512
;       float4 View_NormalOverrideParameter;          ; Offset: 2528
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2544
;       float View_PrevFrameGameTime;                 ; Offset: 2552
;       float View_PrevFrameRealTime;                 ; Offset: 2556
;       float View_OutOfBoundsMask;                   ; Offset: 2560
;       float View_Padding2564;                       ; Offset: 2564
;       float View_Padding2568;                       ; Offset: 2568
;       float View_Padding2572;                       ; Offset: 2572
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2576
;       float View_CullingSign;                       ; Offset: 2588
;       float View_NearPlane;                         ; Offset: 2592
;       float View_OrthoFarPlane;                     ; Offset: 2596
;       float View_GameTime;                          ; Offset: 2600
;       float View_RealTime;                          ; Offset: 2604
;       float View_DeltaTime;                         ; Offset: 2608
;       float View_MaterialTextureMipBias;            ; Offset: 2612
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2616
;       uint View_Random;                             ; Offset: 2620
;       uint View_FrameNumber;                        ; Offset: 2624
;       uint View_FrameCounter;                       ; Offset: 2628
;       uint View_StateFrameIndexMod8;                ; Offset: 2632
;       uint View_StateFrameIndex;                    ; Offset: 2636
;       uint View_StateOutputFrameIndex;              ; Offset: 2640
;       uint View_DebugViewModeMask;                  ; Offset: 2644
;       uint View_WorldIsPaused;                      ; Offset: 2648
;       float View_CameraCut;                         ; Offset: 2652
;       float View_UnlitViewmodeMask;                 ; Offset: 2656
;       float View_Padding2660;                       ; Offset: 2660
;       float View_Padding2664;                       ; Offset: 2664
;       float View_Padding2668;                       ; Offset: 2668
;       float4 View_DirectionalLightColor;            ; Offset: 2672
;       float3 View_DirectionalLightDirection;        ; Offset: 2688
;       float View_Padding2700;                       ; Offset: 2700
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2704
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2736
;       float4 View_TemporalAAParams;                 ; Offset: 2768
;       float4 View_CircleDOFParams;                  ; Offset: 2784
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2800
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2804
;       float View_DepthOfFieldScale;                 ; Offset: 2808
;       float View_DepthOfFieldFocalLength;           ; Offset: 2812
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2816
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2820
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2824
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2828
;       float View_GeneralPurposeTweak;               ; Offset: 2832
;       float View_GeneralPurposeTweak2;              ; Offset: 2836
;       float View_DemosaicVposOffset;                ; Offset: 2840
;       float View_DecalDepthBias;                    ; Offset: 2844
;       float3 View_IndirectLightingColorScale;       ; Offset: 2848
;       float View_Padding2860;                       ; Offset: 2860
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2864
;       float View_Padding2876;                       ; Offset: 2876
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2880
;       float View_Padding2892;                       ; Offset: 2892
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2896
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2928
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2960
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2992
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 3024
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 3056
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 3072
;       float View_Padding3084;                       ; Offset: 3084
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 3088
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 3104
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 3168
;       float View_SkyAtmospherePresentInScene;       ; Offset: 3184
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 3188
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 3192
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 3196
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 3200
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 3216
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 3220
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 3224
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 3228
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 3232
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 3236
;       float View_Padding3240;                       ; Offset: 3240
;       float View_Padding3244;                       ; Offset: 3244
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 3248
;       float View_RenderingReflectionCaptureMask;    ; Offset: 3260
;       float View_RealTimeReflectionCapture;         ; Offset: 3264
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 3268
;       float View_Padding3272;                       ; Offset: 3272
;       float View_Padding3276;                       ; Offset: 3276
;       float4 View_AmbientCubemapTint;               ; Offset: 3280
;       float View_AmbientCubemapIntensity;           ; Offset: 3296
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 3300
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 3304
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 3308
;       float4 View_SkyLightColor;                    ; Offset: 3312
;       float View_SkyLightVolumetricScatteringIntensity;; Offset: 3328
;       float View_Padding3332;                       ; Offset: 3332
;       float View_Padding3336;                       ; Offset: 3336
;       float View_Padding3340;                       ; Offset: 3340
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3344
;       float View_MobilePreviewMode;                 ; Offset: 3472
;       float View_HMDEyePaddingOffset;               ; Offset: 3476
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3480
;       float View_ShowDecalsMask;                    ; Offset: 3484
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3488
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3492
;       float View_Padding3496;                       ; Offset: 3496
;       float View_Padding3500;                       ; Offset: 3500
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3504
;       int View_StereoPassIndex;                     ; Offset: 3516
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3520
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3616
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3712
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3808
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3904
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3908
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3912
;       int View_Padding3916;                         ; Offset: 3916
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3920
;       float View_Padding3932;                       ; Offset: 3932
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3936
;       float View_GlobalVolumeDimension;             ; Offset: 3948
;       float View_GlobalVolumeTexelSize;             ; Offset: 3952
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3956
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3960
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3964
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3968
;       float View_NotCoveredMinStepScale;            ; Offset: 3972
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3976
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3980
;       float View_ViewportScaleUI;                   ; Offset: 3984
;       float View_Padding3988;                       ; Offset: 3988
;       int2 View_CursorPosition;                     ; Offset: 3992
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 4000
;       float View_Padding4004;                       ; Offset: 4004
;       float View_Padding4008;                       ; Offset: 4008
;       float View_Padding4012;                       ; Offset: 4012
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 4016
;       float View_Padding4028;                       ; Offset: 4028
;       float3 View_VolumetricFogGridZParams;         ; Offset: 4032
;       float View_Padding4044;                       ; Offset: 4044
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 4048
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 4056
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 4064
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 4072
;       float2 View_VolumetricFogPrevUVMaxForTemporalBlend;; Offset: 4080
;       float View_Padding4088;                       ; Offset: 4088
;       float View_Padding4092;                       ; Offset: 4092
;       float3 View_VolumetricFogPrevResourceGridSize;; Offset: 4096
;       float View_Padding4108;                       ; Offset: 4108
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 4112
;       float2 View_VolumetricFogUVMax;               ; Offset: 4120
;       float View_VolumetricFogMaxDistance;          ; Offset: 4128
;       float View_Padding4132;                       ; Offset: 4132
;       float View_Padding4136;                       ; Offset: 4136
;       float View_Padding4140;                       ; Offset: 4140
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 4144
;       float View_Padding4156;                       ; Offset: 4156
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 4160
;       float View_Padding4172;                       ; Offset: 4172
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 4176
;       float View_VolumetricLightmapBrickSize;       ; Offset: 4188
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 4192
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 4204
;       float View_EyeToPixelSpreadAngle;             ; Offset: 4208
;       float View_Padding4212;                       ; Offset: 4212
;       float View_Padding4216;                       ; Offset: 4216
;       float View_Padding4220;                       ; Offset: 4220
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 4224
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 4256
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 4260
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 4264
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 4268
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 4272
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 4276
;       uint View_Padding4280;                        ; Offset: 4280
;       uint View_Padding4284;                        ; Offset: 4284
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 4288
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 4304
;       float View_Padding4312;                       ; Offset: 4312
;       float View_Padding4316;                       ; Offset: 4316
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 4320
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 4336
;       float View_MinRoughness;                      ; Offset: 4340
;       float View_Padding4344;                       ; Offset: 4344
;       float View_Padding4348;                       ; Offset: 4348
;       float4 View_HairRenderInfo;                   ; Offset: 4352
;       uint View_EnableSkyLight;                     ; Offset: 4368
;       uint View_HairRenderInfoBits;                 ; Offset: 4372
;       uint View_HairComponents;                     ; Offset: 4376
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 4380
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 4384
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 4400
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 4416
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4432
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4444
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4448
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4452
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4456
;       int View_PhysicsFieldTargetCount;             ; Offset: 4460
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4464
;       uint View_GPUSceneViewId;                     ; Offset: 4976
;       float View_ViewResolutionFraction;            ; Offset: 4980
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4984
;       float View_Padding4988;                       ; Offset: 4988
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4992
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 5008
;       float2 View_WorldDepthToPixelWorldRadius;     ; Offset: 5024
;       float View_Padding5032;                       ; Offset: 5032
;       float View_Padding5036;                       ; Offset: 5036
;       float4 View_ScreenRayLengthMultiplier;        ; Offset: 5040
;       float4 View_GlintLUTParameters0;              ; Offset: 5056
;       float4 View_GlintLUTParameters1;              ; Offset: 5072
;       float View_MaterialMaxEmissiveValue;          ; Offset: 5088
;       int View_PostVolumeUserFlags;                 ; Offset: 5092
;       int View_Padding5096;                         ; Offset: 5096
;       int View_Padding5100;                         ; Offset: 5100
;       int4 View_EnvironmentComponentsFlags;         ; Offset: 5104
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 5120
;       uint View_Padding5124;                        ; Offset: 5124
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 5128
;       uint View_Padding5132;                        ; Offset: 5132
;       uint BindlessSRV_View_VolumetricLightmapIndirectionTexture;; Offset: 5136
;       uint View_Padding5140;                        ; Offset: 5140
;       uint BindlessSRV_View_VolumetricLightmapBrickAmbientVector;; Offset: 5144
;       uint View_Padding5148;                        ; Offset: 5148
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 5152
;       uint View_Padding5156;                        ; Offset: 5156
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 5160
;       uint View_Padding5164;                        ; Offset: 5164
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 5168
;       uint View_Padding5172;                        ; Offset: 5172
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 5176
;       uint View_Padding5180;                        ; Offset: 5180
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 5184
;       uint View_Padding5188;                        ; Offset: 5188
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 5192
;       uint View_Padding5196;                        ; Offset: 5196
;       uint BindlessSRV_View_SkyBentNormalBrickTexture;; Offset: 5200
;       uint View_Padding5204;                        ; Offset: 5204
;       uint BindlessSRV_View_DirectionalLightShadowingBrickTexture;; Offset: 5208
;       uint View_Padding5212;                        ; Offset: 5212
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 5216
;       uint View_Padding5220;                        ; Offset: 5220
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 5224
;       uint View_Padding5228;                        ; Offset: 5228
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 5232
;       uint View_Padding5236;                        ; Offset: 5236
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 5240
;       uint View_Padding5244;                        ; Offset: 5244
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 5248
;       uint View_Padding5252;                        ; Offset: 5252
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 5256
;       uint View_Padding5260;                        ; Offset: 5260
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 5264
;       uint View_Padding5268;                        ; Offset: 5268
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 5272
;       uint View_Padding5276;                        ; Offset: 5276
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 5280
;       uint View_Padding5284;                        ; Offset: 5284
;       uint BindlessSRV_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 5288
;       uint View_Padding5292;                        ; Offset: 5292
;       uint BindlessSRV_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 5296
;       uint View_Padding5300;                        ; Offset: 5300
;       uint BindlessSRV_View_GlobalDistanceFieldPageTableTexture;; Offset: 5304
;       uint View_Padding5308;                        ; Offset: 5308
;       uint BindlessSRV_View_GlobalDistanceFieldMipTexture;; Offset: 5312
;       uint View_Padding5316;                        ; Offset: 5316
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 5320
;       uint View_Padding5324;                        ; Offset: 5324
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 5328
;       uint View_Padding5332;                        ; Offset: 5332
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 5336
;       uint View_Padding5340;                        ; Offset: 5340
;       uint BindlessSRV_View_AtmosphereTransmittanceTexture;; Offset: 5344
;       uint View_Padding5348;                        ; Offset: 5348
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 5352
;       uint View_Padding5356;                        ; Offset: 5356
;       uint BindlessSRV_View_AtmosphereIrradianceTexture;; Offset: 5360
;       uint View_Padding5364;                        ; Offset: 5364
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 5368
;       uint View_Padding5372;                        ; Offset: 5372
;       uint BindlessSRV_View_AtmosphereInscatterTexture;; Offset: 5376
;       uint View_Padding5380;                        ; Offset: 5380
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 5384
;       uint View_Padding5388;                        ; Offset: 5388
;       uint BindlessSRV_View_PerlinNoiseGradientTexture;; Offset: 5392
;       uint View_Padding5396;                        ; Offset: 5396
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 5400
;       uint View_Padding5404;                        ; Offset: 5404
;       uint BindlessSRV_View_PerlinNoise3DTexture;   ; Offset: 5408
;       uint View_Padding5412;                        ; Offset: 5412
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 5416
;       uint View_Padding5420;                        ; Offset: 5420
;       uint BindlessSRV_View_SobolSamplingTexture;   ; Offset: 5424
;       uint View_Padding5428;                        ; Offset: 5428
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 5432
;       uint View_Padding5436;                        ; Offset: 5436
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 5440
;       uint View_Padding5444;                        ; Offset: 5444
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 5448
;       uint View_Padding5452;                        ; Offset: 5452
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 5456
;       uint View_Padding5460;                        ; Offset: 5460
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 5464
;       uint View_Padding5468;                        ; Offset: 5468
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 5472
;       uint View_Padding5476;                        ; Offset: 5476
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 5480
;       uint View_Padding5484;                        ; Offset: 5484
;       uint BindlessSRV_View_PreIntegratedBRDF;      ; Offset: 5488
;       uint View_Padding5492;                        ; Offset: 5492
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 5496
;       uint View_Padding5500;                        ; Offset: 5500
;       uint BindlessSRV_View_SkyIrradianceEnvironmentMap;; Offset: 5504
;       uint View_Padding5508;                        ; Offset: 5508
;       uint BindlessSRV_View_TransmittanceLutTexture;; Offset: 5512
;       uint View_Padding5516;                        ; Offset: 5516
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5520
;       uint View_Padding5524;                        ; Offset: 5524
;       uint BindlessSRV_View_SkyViewLutTexture;      ; Offset: 5528
;       uint View_Padding5532;                        ; Offset: 5532
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5536
;       uint View_Padding5540;                        ; Offset: 5540
;       uint BindlessSRV_View_CameraAerialPerspectiveVolume;; Offset: 5544
;       uint View_Padding5548;                        ; Offset: 5548
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5552
;       uint View_Padding5556;                        ; Offset: 5556
;       uint BindlessSRV_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5560
;       uint View_Padding5564;                        ; Offset: 5564
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5568
;       uint View_Padding5572;                        ; Offset: 5572
;       uint BindlessSRV_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5576
;       uint View_Padding5580;                        ; Offset: 5580
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5584
;       uint View_Padding5588;                        ; Offset: 5588
;       uint BindlessSRV_View_DistantSkyLightLutBufferSRV;; Offset: 5592
;       uint View_Padding5596;                        ; Offset: 5596
;       uint BindlessSRV_View_MobileDistantSkyLightLutBufferSRV;; Offset: 5600
;       uint View_Padding5604;                        ; Offset: 5604
;       uint BindlessSRV_View_HairScatteringLUTTexture;; Offset: 5608
;       uint View_Padding5612;                        ; Offset: 5612
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5616
;       uint View_Padding5620;                        ; Offset: 5620
;       uint BindlessSRV_View_GGXLTCMatTexture;       ; Offset: 5624
;       uint View_Padding5628;                        ; Offset: 5628
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5632
;       uint View_Padding5636;                        ; Offset: 5636
;       uint BindlessSRV_View_GGXLTCAmpTexture;       ; Offset: 5640
;       uint View_Padding5644;                        ; Offset: 5644
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5648
;       uint View_Padding5652;                        ; Offset: 5652
;       uint BindlessSRV_View_SheenLTCTexture;        ; Offset: 5656
;       uint View_Padding5660;                        ; Offset: 5660
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5664
;       uint View_Padding5668;                        ; Offset: 5668
;       uint View_bShadingEnergyConservation;         ; Offset: 5672
;       uint View_bShadingEnergyPreservation;         ; Offset: 5676
;       uint BindlessSRV_View_ShadingEnergyGGXSpecTexture;; Offset: 5680
;       uint View_Padding5684;                        ; Offset: 5684
;       uint BindlessSRV_View_ShadingEnergyGGXGlassTexture;; Offset: 5688
;       uint View_Padding5692;                        ; Offset: 5692
;       uint BindlessSRV_View_ShadingEnergyClothSpecTexture;; Offset: 5696
;       uint View_Padding5700;                        ; Offset: 5700
;       uint BindlessSRV_View_ShadingEnergyDiffuseTexture;; Offset: 5704
;       uint View_Padding5708;                        ; Offset: 5708
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5712
;       uint View_Padding5716;                        ; Offset: 5716
;       uint BindlessSRV_View_GlintTexture;           ; Offset: 5720
;       uint View_Padding5724;                        ; Offset: 5724
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5728
;       uint View_Padding5732;                        ; Offset: 5732
;       uint BindlessSRV_View_SimpleVolumeTexture;    ; Offset: 5736
;       uint View_Padding5740;                        ; Offset: 5740
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5744
;       uint View_Padding5748;                        ; Offset: 5748
;       uint BindlessSRV_View_SimpleVolumeEnvTexture; ; Offset: 5752
;       uint View_Padding5756;                        ; Offset: 5756
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5760
;       uint View_Padding5764;                        ; Offset: 5764
;       uint BindlessSRV_View_SSProfilesTexture;      ; Offset: 5768
;       uint View_Padding5772;                        ; Offset: 5772
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5776
;       uint View_Padding5780;                        ; Offset: 5780
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5784
;       uint View_Padding5788;                        ; Offset: 5788
;       uint BindlessSRV_View_SSProfilesPreIntegratedTexture;; Offset: 5792
;       uint View_Padding5796;                        ; Offset: 5796
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5800
;       uint View_Padding5804;                        ; Offset: 5804
;       uint BindlessSRV_View_SpecularProfileTexture; ; Offset: 5808
;       uint View_Padding5812;                        ; Offset: 5812
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5816
;       uint View_Padding5820;                        ; Offset: 5820
;       uint BindlessSRV_View_WaterIndirection;       ; Offset: 5824
;       uint View_Padding5828;                        ; Offset: 5828
;       uint BindlessSRV_View_WaterData;              ; Offset: 5832
;       uint View_Padding5836;                        ; Offset: 5836
;       int View_WaterInfoTextureViewIndex;           ; Offset: 5840
;       int View_Padding5844;                         ; Offset: 5844
;       int View_Padding5848;                         ; Offset: 5848
;       int View_Padding5852;                         ; Offset: 5852
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5856
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5872
;       float View_Padding5876;                       ; Offset: 5876
;       uint BindlessSRV_View_RectLightAtlasTexture;  ; Offset: 5880
;       uint View_Padding5884;                        ; Offset: 5884
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5888
;       uint View_Padding5892;                        ; Offset: 5892
;       uint View_Padding5896;                        ; Offset: 5896
;       uint View_Padding5900;                        ; Offset: 5900
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5904
;       uint BindlessSRV_View_IESAtlasTexture;        ; Offset: 5920
;       uint View_Padding5924;                        ; Offset: 5924
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5928
;       uint View_Padding5932;                        ; Offset: 5932
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5936
;       uint View_Padding5940;                        ; Offset: 5940
;       uint BindlessSRV_View_LandscapeIndirection;   ; Offset: 5944
;       uint View_Padding5948;                        ; Offset: 5948
;       uint BindlessSRV_View_LandscapePerComponentData;; Offset: 5952
;       uint View_Padding5956;                        ; Offset: 5956
;       uint BindlessUAV_View_VTFeedbackBuffer;       ; Offset: 5960
;       uint View_Padding5964;                        ; Offset: 5964
;       uint BindlessSRV_View_PhysicsFieldClipmapBuffer;; Offset: 5968
;       uint View_Padding5972;                        ; Offset: 5972
;       uint View_Padding5976;                        ; Offset: 5976
;       uint View_Padding5980;                        ; Offset: 5980
;       float3 View_TLASPreViewTranslationHigh;       ; Offset: 5984
;       float View_Padding5996;                       ; Offset: 5996
;       float3 View_TLASPreViewTranslationLow;        ; Offset: 6000
;   
;   } View;                                           ; Offset:    0 Size:  6012
;
; }
;
; cbuffer Scene
; {
;
;   struct Scene
;   {
;
;       uint BindlessSRV_Scene_GPUScene_GPUSceneInstanceSceneData;; Offset:    0
;       uint Scene_Padding4;                          ; Offset:    4
;       uint BindlessSRV_Scene_GPUScene_GPUSceneInstancePayloadData;; Offset:    8
;       uint Scene_Padding12;                         ; Offset:   12
;       uint BindlessSRV_Scene_GPUScene_GPUScenePrimitiveSceneData;; Offset:   16
;       uint Scene_Padding20;                         ; Offset:   20
;       uint BindlessSRV_Scene_GPUScene_GPUSceneLightmapData;; Offset:   24
;       uint Scene_Padding28;                         ; Offset:   28
;       uint BindlessSRV_Scene_GPUScene_GPUSceneLightData;; Offset:   32
;       uint Scene_Padding36;                         ; Offset:   36
;       uint Scene_GPUScene_InstanceDataSOAStride;    ; Offset:   40
;       uint Scene_GPUScene_GPUSceneFrameNumber;      ; Offset:   44
;       int Scene_GPUScene_NumInstances;              ; Offset:   48
;       int Scene_GPUScene_NumScenePrimitives;        ; Offset:   52
;       float Scene_Padding56;                        ; Offset:   56
;       float Scene_Padding60;                        ; Offset:   60
;       uint BindlessSRV_Scene_MeshPaint_PageTableTexture;; Offset:   64
;       uint Scene_Padding68;                         ; Offset:   68
;       uint BindlessSRV_Scene_MeshPaint_PhysicalTexture;; Offset:   72
;       uint Scene_Padding76;                         ; Offset:   76
;       uint4 Scene_MeshPaint_PackedUniform;          ; Offset:   80
;       uint Scene_NaniteMaterials_PrimitiveMaterialElementStride;; Offset:   96
;       uint Scene_Padding100;                        ; Offset:  100
;       uint BindlessSRV_Scene_NaniteMaterials_PrimitiveMaterialData;; Offset:  104
;       uint Scene_Padding108;                        ; Offset:  108
;       uint BindlessSRV_Scene_NaniteMaterials_MaterialData;; Offset:  112
;       float Scene_Padding116;                       ; Offset:  116
;       float Scene_Padding120;                       ; Offset:  120
;       float Scene_Padding124;                       ; Offset:  124
;       uint BindlessSRV_Scene_NaniteSkinning_SkinningHeaders;; Offset:  128
;       uint Scene_Padding132;                        ; Offset:  132
;       uint BindlessSRV_Scene_NaniteSkinning_BoneHierarchy;; Offset:  136
;       uint Scene_Padding140;                        ; Offset:  140
;       uint BindlessSRV_Scene_NaniteSkinning_BoneObjectSpace;; Offset:  144
;       uint Scene_Padding148;                        ; Offset:  148
;       uint BindlessSRV_Scene_NaniteSkinning_BoneTransforms;; Offset:  152
;       float Scene_Padding156;                       ; Offset:  156
;       float2 Scene_SplineMesh_SplineTextureInvExtent;; Offset:  160
;       uint BindlessSRV_Scene_SplineMesh_SplinePosTexture;; Offset:  168
;       uint Scene_Padding172;                        ; Offset:  172
;       uint BindlessSRV_Scene_SplineMesh_SplineRotTexture;; Offset:  176
;       uint Scene_Padding180;                        ; Offset:  180
;       uint BindlessSampler_Scene_SplineMesh_SplineSampler;; Offset:  184
;   
;   } Scene;                                          ; Offset:    0 Size:   188
;
; }
;
; cbuffer NaniteRaster
; {
;
;   struct NaniteRaster
;   {
;
;       int4 NaniteRaster_PageConstants;              ; Offset:    0
;       uint NaniteRaster_MaxNodes;                   ; Offset:   16
;       uint NaniteRaster_MaxVisibleClusters;         ; Offset:   20
;       uint NaniteRaster_MaxCandidatePatches;        ; Offset:   24
;       uint NaniteRaster_MaxPatchesPerGroup;         ; Offset:   28
;       uint NaniteRaster_MeshPass;                   ; Offset:   32
;       float NaniteRaster_InvDiceRate;               ; Offset:   36
;       uint NaniteRaster_RenderFlags;                ; Offset:   40
;       uint NaniteRaster_DebugFlags;                 ; Offset:   44
;   
;   } NaniteRaster;                                   ; Offset:    0 Size:    48
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       float4 Material_PreshaderBuffer[3];           ; Offset:    0
;       uint BindlessSRV_Material_Texture2D_0;        ; Offset:   48
;       uint Material_Padding52;                      ; Offset:   52
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:   56
;       uint Material_Padding60;                      ; Offset:   60
;       uint BindlessSRV_Material_Texture2D_1;        ; Offset:   64
;       uint Material_Padding68;                      ; Offset:   68
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:   72
;       uint Material_Padding76;                      ; Offset:   76
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:   80
;       uint Material_Padding84;                      ; Offset:   84
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:   88
;   
;   } Material;                                       ; Offset:    0 Size:    92
;
; }
;
; cbuffer UERootConstants
; {
;
;   struct UERootConstants
;   {
;
;       struct struct.FUERootConstants
;       {
;
;           uint4 Values;                             ; Offset:    0
;       
;       } UERootConstants;                            ; Offset:    0
;
;   
;   } UERootConstants;                                ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; View                              cbuffer      NA          NA     CB0            cb0     1
; Scene                             cbuffer      NA          NA     CB1            cb1     1
; NaniteRaster                      cbuffer      NA          NA     CB2            cb2     1
; Material                          cbuffer      NA          NA     CB3            cb3     1
; UERootConstants                   cbuffer      NA          NA     CB4     cb0,space3     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S0             s0     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o      T0             t0     1
; Scene_GPUScene_GPUSceneInstancePayloadData   texture  struct         r/o      T1             t1     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T2             t2     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d      T3             t3     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d      T4             t4     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d      T5             t5     1
; NaniteShading_ClusterPageData     texture    byte         r/o      T6             t6     1
; NaniteShading_VisibleClustersSWHW   texture    byte         r/o      T7             t7     1
; NaniteShading_VisBuffer64         texture     u32          2d      T8             t8     1
; NaniteShading_ShadingBinData      texture    byte         r/o      T9             t9     1
; ComputeShadingOutputs_OutTarget0       UAV     f32          2d      U0             u0     1
; ComputeShadingOutputs_OutTarget1       UAV     f32          2d      U1             u1     1
; ComputeShadingOutputs_OutTarget2       UAV     f32          2d      U2             u2     1
; ComputeShadingOutputs_OutTarget3       UAV     f32          2d      U3             u3     1
; ComputeShadingOutputs_OutTarget4       UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%hostlayout.View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, i32, float, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <2 x float>, float, float, <4 x float>, <4 x float>, <4 x float>, float, i32, i32, i32, <4 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%Scene = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i32, i32, i32, i32, <4 x i32>, i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, <2 x float>, i32, i32, i32, i32, i32 }
%NaniteRaster = type { <4 x i32>, i32, i32, i32, i32, i32, float, i32, i32 }
%Material = type { [3 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UERootConstants = type { %struct.FUERootConstants }
%struct.FUERootConstants = type { <4 x i32> }
%struct.SamplerState = type { i32 }

define void @MainCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 3, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 13, i32 16 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 92 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 48 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 6012 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %28 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %29 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.i32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.i32 %29, 1
  %32 = icmp ne i32 %31, 0
  %33 = extractvalue %dx.types.CBufRet.i32 %29, 3
  %34 = shl i32 %28, 6
  %35 = add i32 %34, %27
  %36 = shl i32 %30, 4
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %38 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %36, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %39 = extractvalue %dx.types.ResRet.i32 %38, 0
  %40 = extractvalue %dx.types.ResRet.i32 %38, 2
  %41 = lshr i32 %35, 2
  %42 = select i1 %32, i32 %41, i32 %35
  %43 = icmp ult i32 %42, %39
  br i1 %43, label %44, label %3599, !dx.controlflow.hints !37

; <label>:44                                      ; preds = %0
  br i1 %32, label %45, label %70, !dx.controlflow.hints !38

; <label>:45                                      ; preds = %44
  %46 = shl i32 %40, 2
  %47 = shl i32 %42, 3
  %48 = add i32 %47, %33
  %49 = add i32 %48, %46
  %50 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %49, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %51 = extractvalue %dx.types.ResRet.i32 %50, 0
  %52 = extractvalue %dx.types.ResRet.i32 %50, 1
  %53 = and i32 %27, 3
  %54 = and i32 %51, 16383
  %55 = lshr i32 %51, 14
  %56 = and i32 %55, 16383
  %57 = lshr i32 %51, 28
  %58 = and i32 %57, 1
  %59 = lshr i32 %51, 29
  %60 = and i32 %59, 1
  %61 = shl nuw nsw i32 %53, 2
  %62 = lshr i32 %52, %61
  %63 = and i32 %62, 15
  %64 = and i32 %27, 1
  %65 = lshr i32 %53, 1
  %66 = shl i32 %64, %58
  %67 = shl i32 %65, %60
  %68 = add i32 %66, %54
  %69 = add i32 %67, %56
  br label %84

; <label>:70                                      ; preds = %44
  %71 = add i32 %40, %42
  %72 = shl i32 %71, 2
  %73 = add i32 %72, %33
  %74 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %73, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %75 = extractvalue %dx.types.ResRet.i32 %74, 0
  %76 = and i32 %75, 8191
  %77 = lshr i32 %75, 13
  %78 = and i32 %77, 8191
  %79 = lshr i32 %75, 26
  %80 = and i32 %79, 1
  %81 = lshr i32 %75, 27
  %82 = and i32 %81, 1
  %83 = lshr i32 %75, 28
  br label %84

; <label>:84                                      ; preds = %70, %45
  %85 = phi i32 [ %68, %45 ], [ %76, %70 ]
  %86 = phi i32 [ %69, %45 ], [ %78, %70 ]
  %87 = phi i32 [ %58, %45 ], [ %80, %70 ]
  %88 = phi i32 [ %60, %45 ], [ %82, %70 ]
  %89 = phi i32 [ %63, %45 ], [ %83, %70 ]
  %90 = uitofp i32 %85 to float
  %91 = uitofp i32 %86 to float
  %92 = shl i32 1, %87
  %93 = shl i32 1, %88
  %94 = uitofp i32 %92 to float
  %95 = uitofp i32 %93 to float
  %96 = fmul float %94, 5.000000e-01
  %97 = fmul float %95, 5.000000e-01
  %98 = fadd float %90, %96
  %99 = fadd float %91, %97
  %100 = extractvalue %dx.types.CBufRet.i32 %29, 2
  %101 = icmp eq i32 %100, 0
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %109 = extractvalue %dx.types.CBufRet.f32 %106, 2
  %110 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.f32 %110, 0
  %112 = extractvalue %dx.types.CBufRet.f32 %110, 1
  %113 = extractvalue %dx.types.CBufRet.f32 %110, 2
  %114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.f32 %114, 0
  %116 = extractvalue %dx.types.CBufRet.f32 %114, 1
  %117 = extractvalue %dx.types.CBufRet.f32 %114, 2
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 121)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 0
  %132 = extractvalue %dx.types.CBufRet.f32 %130, 1
  %133 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 127)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 0
  %136 = extractvalue %dx.types.CBufRet.f32 %134, 1
  %137 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 144)  ; CBufferLoadLegacy(handle,regIndex)
  %139 = extractvalue %dx.types.CBufRet.f32 %138, 0
  %140 = extractvalue %dx.types.CBufRet.f32 %138, 1
  %141 = extractvalue %dx.types.CBufRet.f32 %138, 2
  %142 = extractvalue %dx.types.CBufRet.f32 %138, 3
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 147)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 148)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %148 = extractvalue %dx.types.CBufRet.f32 %146, 3
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 158)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = extractvalue %dx.types.CBufRet.f32 %149, 3
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 161)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 3
  %156 = fsub float -0.000000e+00, %127
  %157 = fsub float -0.000000e+00, %128
  %158 = fsub float -0.000000e+00, %129
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = extractvalue %dx.types.CBufRet.f32 %159, 1
  %162 = extractvalue %dx.types.CBufRet.f32 %159, 3
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %165 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %166 = extractvalue %dx.types.CBufRet.f32 %163, 3
  %167 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %168 = extractvalue %dx.types.CBufRet.f32 %167, 0
  %169 = extractvalue %dx.types.CBufRet.f32 %167, 1
  %170 = extractvalue %dx.types.CBufRet.f32 %167, 3
  %171 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %172 = extractvalue %dx.types.CBufRet.f32 %171, 0
  %173 = extractvalue %dx.types.CBufRet.f32 %171, 1
  %174 = extractvalue %dx.types.CBufRet.f32 %171, 3
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 0
  %177 = extractvalue %dx.types.CBufRet.f32 %175, 1
  %178 = extractvalue %dx.types.CBufRet.f32 %175, 2
  %179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.f32 %179, 0
  %181 = extractvalue %dx.types.CBufRet.f32 %179, 1
  %182 = extractvalue %dx.types.CBufRet.f32 %179, 2
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 94)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 1
  %186 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %187 = extractvalue %dx.types.CBufRet.f32 %183, 3
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 95)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 0
  %190 = extractvalue %dx.types.CBufRet.f32 %188, 1
  %191 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 96)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 0
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 1
  %196 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %197 = extractvalue %dx.types.CBufRet.f32 %193, 3
  %198 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 97)  ; CBufferLoadLegacy(handle,regIndex)
  %199 = extractvalue %dx.types.CBufRet.f32 %198, 0
  %200 = extractvalue %dx.types.CBufRet.f32 %198, 1
  %201 = extractvalue %dx.types.CBufRet.f32 %198, 2
  %202 = extractvalue %dx.types.CBufRet.f32 %198, 3
  %203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 119)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.f32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %203, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %203, 2
  %207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 120)  ; CBufferLoadLegacy(handle,regIndex)
  %208 = extractvalue %dx.types.CBufRet.f32 %207, 0
  %209 = extractvalue %dx.types.CBufRet.f32 %207, 1
  %210 = extractvalue %dx.types.CBufRet.f32 %207, 2
  %211 = fadd float %144, 5.000000e-01
  %212 = fadd float %145, 5.000000e-01
  %213 = fptosi float %211 to i32
  %214 = fptosi float %212 to i32
  %215 = fadd float %98, -5.000000e-01
  %216 = fadd float %99, -5.000000e-01
  %217 = fptoui float %215 to i32
  %218 = fptoui float %216 to i32
  %219 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %220 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %219, i32 0, i32 %217, i32 %218, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %221 = extractvalue %dx.types.ResRet.i32 %220, 0
  %222 = extractvalue %dx.types.ResRet.i32 %220, 1
  %223 = lshr i32 %221, 7
  %224 = and i32 %221, 127
  %225 = bitcast i32 %222 to float
  %226 = icmp eq i32 %223, 0
  br i1 %226, label %3146, label %227

; <label>:227                                     ; preds = %84
  %228 = shl nuw nsw i32 %223, 3
  %229 = add nsw i32 %228, -8
  %230 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %231 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %230, i32 %229, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %232 = extractvalue %dx.types.ResRet.i32 %231, 0
  %233 = extractvalue %dx.types.ResRet.i32 %231, 1
  %234 = lshr i32 %232, 17
  %235 = shl i32 %233, 15
  %236 = and i32 %235, 16744448
  %237 = or i32 %236, %234
  %238 = lshr i32 %233, 9
  %239 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %240 = extractvalue %dx.types.CBufRet.i32 %239, 1
  %241 = shl i32 %240, 8
  %242 = icmp ult i32 %238, %241
  br i1 %242, label %243, label %246

; <label>:243                                     ; preds = %227
  %244 = lshr i32 %233, 17
  %245 = and i32 %238, 255
  br label %251

; <label>:246                                     ; preds = %227
  %247 = sub i32 %238, %241
  %248 = lshr i32 %247, 6
  %249 = add i32 %248, %240
  %250 = and i32 %247, 63
  br label %251

; <label>:251                                     ; preds = %246, %243
  %252 = phi i32 [ %244, %243 ], [ %249, %246 ]
  %253 = phi i32 [ %245, %243 ], [ %250, %246 ]
  %254 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %255 = extractvalue %dx.types.CBufRet.i32 %254, 2
  %256 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %257 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %256, i32 %237, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %258 = extractvalue %dx.types.ResRet.f32 %257, 0
  %259 = bitcast float %258 to i32
  %260 = and i32 %259, 1048575
  %261 = lshr i32 %259, 20
  %262 = extractvalue %dx.types.ResRet.f32 %257, 1
  %263 = bitcast float %262 to i32
  %264 = and i32 %263, 16777215
  %265 = mul nuw nsw i32 %260, 43
  %266 = add nuw nsw i32 %265, 28
  %267 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %268 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %266, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %269 = extractvalue %dx.types.ResRet.f32 %268, 3
  %270 = bitcast float %269 to i32
  %271 = add nuw nsw i32 %265, 29
  %272 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %271, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %273 = extractvalue %dx.types.ResRet.f32 %272, 3
  %274 = bitcast float %273 to i32
  %275 = and i32 %274, 16777215
  %276 = mul i32 %275, %264
  %277 = and i32 %261, 128
  %278 = icmp ne i32 %277, 0
  %279 = and i32 %261, 8
  %280 = and i32 %261, 80
  %281 = icmp ne i32 %280, 0
  %282 = zext i1 %281 to i32
  %283 = select i1 %278, i32 2, i32 %282
  %284 = add i32 %270, %283
  %285 = add i32 %284, %276
  %286 = add nuw nsw i32 %265, 1
  %287 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %286, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %288 = extractvalue %dx.types.ResRet.f32 %287, 0
  %289 = extractvalue %dx.types.ResRet.f32 %287, 1
  %290 = extractvalue %dx.types.ResRet.f32 %287, 2
  %291 = add nuw nsw i32 %265, 14
  %292 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %291, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %293 = extractvalue %dx.types.ResRet.f32 %292, 0
  %294 = extractvalue %dx.types.ResRet.f32 %292, 1
  %295 = extractvalue %dx.types.ResRet.f32 %292, 2
  %296 = extractvalue %dx.types.ResRet.f32 %292, 3
  %297 = add nuw nsw i32 %265, 15
  %298 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %297, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %299 = extractvalue %dx.types.ResRet.f32 %298, 0
  %300 = extractvalue %dx.types.ResRet.f32 %298, 1
  %301 = extractvalue %dx.types.ResRet.f32 %298, 2
  %302 = extractvalue %dx.types.ResRet.f32 %298, 3
  %303 = add nuw nsw i32 %265, 16
  %304 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %303, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %305 = extractvalue %dx.types.ResRet.f32 %304, 0
  %306 = extractvalue %dx.types.ResRet.f32 %304, 1
  %307 = extractvalue %dx.types.ResRet.f32 %304, 2
  %308 = extractvalue %dx.types.ResRet.f32 %304, 3
  %309 = add i32 %255, %237
  %310 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %256, i32 %309, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %311 = extractvalue %dx.types.ResRet.f32 %310, 0
  %312 = extractvalue %dx.types.ResRet.f32 %310, 1
  %313 = extractvalue %dx.types.ResRet.f32 %310, 2
  %314 = extractvalue %dx.types.ResRet.f32 %310, 3
  %315 = bitcast float %311 to i32
  %316 = bitcast float %312 to i32
  %317 = bitcast float %313 to i32
  %318 = bitcast float %314 to i32
  %319 = shl i32 %255, 1
  %320 = add i32 %319, %237
  %321 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %256, i32 %320, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %322 = extractvalue %dx.types.ResRet.f32 %321, 0
  %323 = extractvalue %dx.types.ResRet.f32 %321, 1
  %324 = extractvalue %dx.types.ResRet.f32 %321, 2
  %325 = and i32 %315, 65535
  %326 = uitofp i32 %325 to float
  %327 = lshr i32 %315, 16
  %328 = uitofp i32 %327 to float
  %329 = and i32 %316, 32767
  %330 = uitofp i32 %329 to float
  %331 = fadd float %326, -3.276800e+04
  %332 = fadd float %328, -3.276800e+04
  %333 = fmul float %331, 0x3F00002000000000
  %334 = fmul float %332, 0x3F00002000000000
  %335 = fadd float %330, -1.638400e+04
  %336 = fmul float %335, 0x3F06A0F8E0000000
  %337 = and i32 %316, 32768
  %338 = icmp ne i32 %337, 0
  %339 = fadd float %333, %334
  %340 = fsub float %333, %334
  %341 = call float @dx.op.unary.f32(i32 6, float %339), !dx.precise !39  ; FAbs(value)
  %342 = call float @dx.op.unary.f32(i32 6, float %340), !dx.precise !39  ; FAbs(value)
  %343 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %341, float %342), !dx.precise !39  ; Dot2(ax,ay,bx,by)
  %344 = fsub float 2.000000e+00, %343
  %345 = call float @dx.op.dot3.f32(i32 55, float %339, float %340, float %344, float %339, float %340, float %344), !dx.precise !39  ; Dot3(ax,ay,az,bx,by,bz)
  %346 = call float @dx.op.unary.f32(i32 25, float %345), !dx.precise !39  ; Rsqrt(value)
  %347 = fmul float %339, %346
  %348 = fmul float %340, %346
  %349 = fmul float %344, %346
  %350 = fadd float %349, 1.000000e+00
  %351 = fdiv float 1.000000e+00, %350
  %352 = fmul float %347, %348
  %353 = fmul float %351, %352
  %354 = fsub float -0.000000e+00, %353
  %355 = fmul float %347, %347
  %356 = fmul float %351, %355
  %357 = fsub float 1.000000e+00, %356
  %358 = fmul float %348, %348
  %359 = fmul float %351, %358
  %360 = fsub float 1.000000e+00, %359
  %361 = fmul float %336, %336
  %362 = fsub float 1.000000e+00, %361
  %363 = call float @dx.op.unary.f32(i32 24, float %362), !dx.precise !39  ; Sqrt(value)
  %364 = select i1 %338, float %336, float %363
  %365 = select i1 %338, float %363, float %336
  %366 = fmul float %364, %357
  %367 = fmul float %364, %354
  %368 = fmul float %347, %364
  %369 = fmul float %365, %354
  %370 = fmul float %365, %360
  %371 = fmul float %348, %365
  %372 = fsub float -0.000000e+00, %371
  %373 = fadd float %369, %366
  %374 = fadd float %367, %370
  %375 = fsub float %372, %368
  %376 = fmul float %348, %375
  %377 = fmul float %349, %374
  %378 = fsub float %376, %377
  %379 = fmul float %349, %373
  %380 = fmul float %347, %375
  %381 = fsub float %379, %380
  %382 = fmul float %347, %374
  %383 = fmul float %348, %373
  %384 = fsub float %382, %383
  %385 = lshr i32 %318, 16
  %386 = shl i32 %385, 23
  %387 = add i32 %386, -125829120
  %388 = bitcast i32 %387 to float
  %389 = lshr i32 %317, 16
  %390 = and i32 %317, 65535
  %391 = and i32 %318, 65535
  %392 = uitofp i32 %390 to float
  %393 = uitofp i32 %389 to float
  %394 = uitofp i32 %391 to float
  %395 = fadd float %392, -3.276800e+04
  %396 = fadd float %393, -3.276800e+04
  %397 = fadd float %394, -3.276800e+04
  %398 = fmul float %395, %388
  %399 = fmul float %396, %388
  %400 = fmul float %397, %388
  %401 = fmul float %398, %373
  %402 = fmul float %398, %374
  %403 = fmul float %398, %375
  %404 = fmul float %398, 0.000000e+00
  %405 = fmul float %399, %378
  %406 = fmul float %399, %381
  %407 = fmul float %399, %384
  %408 = fmul float %399, 0.000000e+00
  %409 = fmul float %400, %347
  %410 = fmul float %400, %348
  %411 = fmul float %400, %349
  %412 = fmul float %400, 0.000000e+00
  %413 = call float @dx.op.unary.f32(i32 6, float %398), !dx.precise !39  ; FAbs(value)
  %414 = call float @dx.op.unary.f32(i32 6, float %399), !dx.precise !39  ; FAbs(value)
  %415 = call float @dx.op.unary.f32(i32 6, float %400), !dx.precise !39  ; FAbs(value)
  %416 = fdiv float 1.000000e+00, %413
  %417 = fdiv float 1.000000e+00, %414
  %418 = fdiv float 1.000000e+00, %415
  %419 = icmp eq i32 %285, -1
  %420 = icmp eq i32 %279, 0
  %421 = or i1 %420, %419
  br i1 %421, label %523, label %422, !dx.controlflow.hints !40

; <label>:422                                     ; preds = %251
  %423 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %424 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %423, i32 %285, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %425 = extractvalue %dx.types.ResRet.f32 %424, 0
  %426 = extractvalue %dx.types.ResRet.f32 %424, 1
  %427 = extractvalue %dx.types.ResRet.f32 %424, 2
  %428 = extractvalue %dx.types.ResRet.f32 %424, 3
  %429 = bitcast float %425 to i32
  %430 = bitcast float %426 to i32
  %431 = bitcast float %427 to i32
  %432 = bitcast float %428 to i32
  %433 = add i32 %285, 1
  %434 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %423, i32 %433, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %435 = extractvalue %dx.types.ResRet.f32 %434, 0
  %436 = extractvalue %dx.types.ResRet.f32 %434, 1
  %437 = extractvalue %dx.types.ResRet.f32 %434, 2
  %438 = and i32 %429, 65535
  %439 = uitofp i32 %438 to float
  %440 = lshr i32 %429, 16
  %441 = uitofp i32 %440 to float
  %442 = and i32 %430, 32767
  %443 = uitofp i32 %442 to float
  %444 = fadd fast float %439, -3.276800e+04
  %445 = fadd fast float %441, -3.276800e+04
  %446 = fadd fast float %443, -1.638400e+04
  %447 = fmul fast float %446, 0x3F06A0F8E0000000
  %448 = and i32 %430, 32768
  %449 = icmp ne i32 %448, 0
  %450 = fadd fast float %444, %445
  %451 = fmul fast float %450, 0x3F00002000000000
  %452 = fsub fast float %444, %445
  %453 = fmul fast float %452, 0x3F00002000000000
  %454 = call float @dx.op.unary.f32(i32 6, float %451)  ; FAbs(value)
  %455 = call float @dx.op.unary.f32(i32 6, float %453)  ; FAbs(value)
  %456 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %454, float %455)  ; Dot2(ax,ay,bx,by)
  %457 = fsub fast float 2.000000e+00, %456
  %458 = call float @dx.op.dot3.f32(i32 55, float %451, float %453, float %457, float %451, float %453, float %457)  ; Dot3(ax,ay,az,bx,by,bz)
  %459 = call float @dx.op.unary.f32(i32 25, float %458)  ; Rsqrt(value)
  %460 = fmul fast float %459, %451
  %461 = fmul fast float %459, %453
  %462 = fmul fast float %459, %457
  %463 = fadd fast float %462, 1.000000e+00
  %464 = fdiv fast float 1.000000e+00, %463
  %465 = fmul fast float %461, %460
  %466 = fmul fast float %465, %464
  %467 = fsub fast float -0.000000e+00, %466
  %468 = fmul fast float %460, %460
  %469 = fmul fast float %468, %464
  %470 = fsub fast float 1.000000e+00, %469
  %471 = fmul fast float %461, %461
  %472 = fmul fast float %471, %464
  %473 = fsub fast float 1.000000e+00, %472
  %474 = fmul fast float %447, %447
  %475 = fsub fast float 1.000000e+00, %474
  %476 = call float @dx.op.unary.f32(i32 24, float %475)  ; Sqrt(value)
  %477 = select i1 %449, float %447, float %476
  %478 = select i1 %449, float %476, float %447
  %479 = fmul fast float %470, %477
  %480 = fmul fast float %477, %467
  %481 = fmul fast float %477, %460
  %482 = fmul fast float %478, %467
  %483 = fmul fast float %473, %478
  %484 = fmul fast float %461, %478
  %485 = fsub fast float -0.000000e+00, %484
  %486 = fadd fast float %479, %482
  %487 = fadd fast float %480, %483
  %488 = fsub fast float %485, %481
  %489 = fmul fast float %488, %461
  %490 = fmul fast float %487, %462
  %491 = fsub fast float %489, %490
  %492 = fmul fast float %486, %462
  %493 = fmul fast float %488, %460
  %494 = fsub fast float %492, %493
  %495 = fmul fast float %487, %460
  %496 = fmul fast float %486, %461
  %497 = fsub fast float %495, %496
  %498 = lshr i32 %432, 16
  %499 = shl i32 %498, 23
  %500 = add i32 %499, -125829120
  %501 = bitcast i32 %500 to float
  %502 = lshr i32 %431, 16
  %503 = and i32 %431, 65535
  %504 = and i32 %432, 65535
  %505 = uitofp i32 %503 to float
  %506 = uitofp i32 %502 to float
  %507 = uitofp i32 %504 to float
  %508 = fadd fast float %505, -3.276800e+04
  %509 = fadd fast float %506, -3.276800e+04
  %510 = fadd fast float %507, -3.276800e+04
  %511 = fmul fast float %501, %508
  %512 = fmul fast float %501, %509
  %513 = fmul fast float %501, %510
  %514 = fmul fast float %486, %511
  %515 = fmul fast float %487, %511
  %516 = fmul fast float %488, %511
  %517 = fmul fast float %491, %512
  %518 = fmul fast float %494, %512
  %519 = fmul fast float %497, %512
  %520 = fmul fast float %460, %513
  %521 = fmul fast float %461, %513
  %522 = fmul fast float %462, %513
  br label %572

; <label>:523                                     ; preds = %251
  %524 = fmul fast float %401, %293
  %525 = call float @dx.op.tertiary.f32(i32 46, float %402, float %294, float %524)  ; FMad(a,b,c)
  %526 = call float @dx.op.tertiary.f32(i32 46, float %403, float %295, float %525)  ; FMad(a,b,c)
  %527 = call float @dx.op.tertiary.f32(i32 46, float %404, float %296, float %526)  ; FMad(a,b,c)
  %528 = fmul fast float %401, %299
  %529 = call float @dx.op.tertiary.f32(i32 46, float %402, float %300, float %528)  ; FMad(a,b,c)
  %530 = call float @dx.op.tertiary.f32(i32 46, float %403, float %301, float %529)  ; FMad(a,b,c)
  %531 = call float @dx.op.tertiary.f32(i32 46, float %404, float %302, float %530)  ; FMad(a,b,c)
  %532 = fmul fast float %401, %305
  %533 = call float @dx.op.tertiary.f32(i32 46, float %402, float %306, float %532)  ; FMad(a,b,c)
  %534 = call float @dx.op.tertiary.f32(i32 46, float %403, float %307, float %533)  ; FMad(a,b,c)
  %535 = call float @dx.op.tertiary.f32(i32 46, float %404, float %308, float %534)  ; FMad(a,b,c)
  %536 = fmul fast float %405, %293
  %537 = call float @dx.op.tertiary.f32(i32 46, float %406, float %294, float %536)  ; FMad(a,b,c)
  %538 = call float @dx.op.tertiary.f32(i32 46, float %407, float %295, float %537)  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %408, float %296, float %538)  ; FMad(a,b,c)
  %540 = fmul fast float %405, %299
  %541 = call float @dx.op.tertiary.f32(i32 46, float %406, float %300, float %540)  ; FMad(a,b,c)
  %542 = call float @dx.op.tertiary.f32(i32 46, float %407, float %301, float %541)  ; FMad(a,b,c)
  %543 = call float @dx.op.tertiary.f32(i32 46, float %408, float %302, float %542)  ; FMad(a,b,c)
  %544 = fmul fast float %405, %305
  %545 = call float @dx.op.tertiary.f32(i32 46, float %406, float %306, float %544)  ; FMad(a,b,c)
  %546 = call float @dx.op.tertiary.f32(i32 46, float %407, float %307, float %545)  ; FMad(a,b,c)
  %547 = call float @dx.op.tertiary.f32(i32 46, float %408, float %308, float %546)  ; FMad(a,b,c)
  %548 = fmul fast float %409, %293
  %549 = call float @dx.op.tertiary.f32(i32 46, float %410, float %294, float %548)  ; FMad(a,b,c)
  %550 = call float @dx.op.tertiary.f32(i32 46, float %411, float %295, float %549)  ; FMad(a,b,c)
  %551 = call float @dx.op.tertiary.f32(i32 46, float %412, float %296, float %550)  ; FMad(a,b,c)
  %552 = fmul fast float %409, %299
  %553 = call float @dx.op.tertiary.f32(i32 46, float %410, float %300, float %552)  ; FMad(a,b,c)
  %554 = call float @dx.op.tertiary.f32(i32 46, float %411, float %301, float %553)  ; FMad(a,b,c)
  %555 = call float @dx.op.tertiary.f32(i32 46, float %412, float %302, float %554)  ; FMad(a,b,c)
  %556 = fmul fast float %409, %305
  %557 = call float @dx.op.tertiary.f32(i32 46, float %410, float %306, float %556)  ; FMad(a,b,c)
  %558 = call float @dx.op.tertiary.f32(i32 46, float %411, float %307, float %557)  ; FMad(a,b,c)
  %559 = call float @dx.op.tertiary.f32(i32 46, float %412, float %308, float %558)  ; FMad(a,b,c)
  %560 = fmul fast float %322, %293
  %561 = call float @dx.op.tertiary.f32(i32 46, float %323, float %294, float %560)  ; FMad(a,b,c)
  %562 = call float @dx.op.tertiary.f32(i32 46, float %324, float %295, float %561)  ; FMad(a,b,c)
  %563 = fadd fast float %562, %296
  %564 = fmul fast float %322, %299
  %565 = call float @dx.op.tertiary.f32(i32 46, float %323, float %300, float %564)  ; FMad(a,b,c)
  %566 = call float @dx.op.tertiary.f32(i32 46, float %324, float %301, float %565)  ; FMad(a,b,c)
  %567 = fadd fast float %566, %302
  %568 = fmul fast float %322, %305
  %569 = call float @dx.op.tertiary.f32(i32 46, float %323, float %306, float %568)  ; FMad(a,b,c)
  %570 = call float @dx.op.tertiary.f32(i32 46, float %324, float %307, float %569)  ; FMad(a,b,c)
  %571 = fadd fast float %570, %308
  br label %572

; <label>:572                                     ; preds = %523, %422
  %573 = phi float [ %514, %422 ], [ %527, %523 ]
  %574 = phi float [ %515, %422 ], [ %531, %523 ]
  %575 = phi float [ %516, %422 ], [ %535, %523 ]
  %576 = phi float [ %517, %422 ], [ %539, %523 ]
  %577 = phi float [ %518, %422 ], [ %543, %523 ]
  %578 = phi float [ %519, %422 ], [ %547, %523 ]
  %579 = phi float [ %520, %422 ], [ %551, %523 ]
  %580 = phi float [ %521, %422 ], [ %555, %523 ]
  %581 = phi float [ %522, %422 ], [ %559, %523 ]
  %582 = phi float [ %435, %422 ], [ %563, %523 ]
  %583 = phi float [ %436, %422 ], [ %567, %523 ]
  %584 = phi float [ %437, %422 ], [ %571, %523 ]
  %585 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %265, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %586 = extractvalue %dx.types.ResRet.f32 %585, 0
  %587 = bitcast float %586 to i32
  %588 = add nuw nsw i32 %265, 32
  %589 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %267, i32 %588, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %590 = extractvalue %dx.types.ResRet.f32 %589, 0
  %591 = fadd float %176, %288
  %592 = fadd float %177, %289
  %593 = fadd float %178, %290
  %594 = fadd float %180, %591
  %595 = fadd float %181, %592
  %596 = fadd float %182, %593
  %597 = fadd float %594, %322
  %598 = fadd float %595, %323
  %599 = fadd float %596, %324
  %600 = fadd float %204, %288
  %601 = fadd float %205, %289
  %602 = fadd float %206, %290
  %603 = fadd float %208, %600
  %604 = fadd float %209, %601
  %605 = fadd float %210, %602
  %606 = fadd fast float %582, %603
  %607 = fadd fast float %583, %604
  %608 = fadd fast float %584, %605
  %609 = call i32 @dx.op.binary.i32(i32 40, i32 %252, i32 %240)  ; UMin(a,b)
  %610 = shl i32 %609, 17
  %611 = sub nsw i32 %252, %240
  %612 = call i32 @dx.op.binary.i32(i32 37, i32 %611, i32 0)  ; IMax(a,b)
  %613 = shl i32 %612, 15
  %614 = add i32 %613, %610
  %615 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %616 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %614, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %617 = extractvalue %dx.types.ResRet.i32 %616, 0
  %618 = shl i32 %617, 4
  %619 = shl nuw nsw i32 %253, 4
  %620 = or i32 %614, %619
  %621 = add nsw i32 %620, 16
  %622 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %621, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %623 = extractvalue %dx.types.ResRet.i32 %622, 0
  %624 = extractvalue %dx.types.ResRet.i32 %622, 1
  %625 = extractvalue %dx.types.ResRet.i32 %622, 3
  %626 = add i32 %621, %618
  %627 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %626, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %628 = extractvalue %dx.types.ResRet.i32 %627, 0
  %629 = extractvalue %dx.types.ResRet.i32 %627, 1
  %630 = extractvalue %dx.types.ResRet.i32 %627, 2
  %631 = extractvalue %dx.types.ResRet.i32 %627, 3
  %632 = mul i32 %617, 80
  %633 = add i32 %621, %632
  %634 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %633, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %635 = extractvalue %dx.types.ResRet.i32 %634, 0
  %636 = extractvalue %dx.types.ResRet.i32 %634, 1
  %637 = lshr i32 %623, 9
  %638 = lshr i32 %624, 8
  %639 = and i32 %631, 7
  %640 = add nuw nsw i32 %639, 1
  %641 = lshr i32 %631, 9
  %642 = and i32 %641, 31
  %643 = lshr i32 %631, 14
  %644 = and i32 %643, 31
  %645 = lshr i32 %631, 19
  %646 = and i32 %645, 31
  %647 = lshr i32 %631, 24
  %648 = and i32 %647, 15
  %649 = lshr i32 %631, 28
  %650 = and i32 %635, 4194303
  %651 = lshr i32 %635, 22
  %652 = and i32 %636, 4194303
  %653 = and i32 %636, 4194304
  %654 = icmp ne i32 %653, 0
  %655 = and i32 %636, 117440512
  %656 = add nuw nsw i32 %639, 11
  %657 = mul nuw nsw i32 %656, %224
  %658 = add i32 %638, %614
  %659 = lshr i32 %657, 5
  %660 = shl nuw nsw i32 %659, 2
  %661 = add i32 %658, %660
  %662 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %661, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %663 = extractvalue %dx.types.ResRet.i32 %662, 0
  %664 = and i32 %657, 31
  %665 = lshr i32 %663, %664
  %666 = icmp eq i32 %664, 0
  br i1 %666, label %672, label %667

; <label>:667                                     ; preds = %572
  %668 = extractvalue %dx.types.ResRet.i32 %662, 1
  %669 = sub nsw i32 0, %657
  %670 = and i32 %669, 31
  %671 = shl i32 %668, %670
  br label %672

; <label>:672                                     ; preds = %667, %572
  %673 = phi i32 [ %671, %667 ], [ 0, %572 ]
  %674 = or i32 %673, %665
  %675 = shl i32 1, %640
  %676 = add i32 %675, -1
  %677 = and i32 %674, %676
  %678 = lshr i32 %674, %640
  %679 = and i32 %678, 31
  %680 = add nuw nsw i32 %639, 6
  %681 = lshr i32 %674, %680
  %682 = and i32 %681, 31
  %683 = add i32 %679, %677
  %684 = add i32 %682, %677
  %685 = lshr i32 %232, 3
  %686 = fmul fast float %416, %416
  %687 = fmul fast float %417, %417
  %688 = fmul fast float %418, %418
  %689 = fmul fast float %573, %686
  %690 = fmul fast float %574, %686
  %691 = fmul fast float %575, %686
  %692 = fmul fast float %576, %687
  %693 = fmul fast float %577, %687
  %694 = fmul fast float %578, %687
  %695 = fmul fast float %579, %688
  %696 = fmul fast float %580, %688
  %697 = fmul fast float %581, %688
  %698 = add nuw nsw i32 %642, %644
  %699 = add nuw nsw i32 %698, %646
  %700 = mul i32 %677, %699
  %701 = add i32 %637, %614
  %702 = lshr i32 %700, 5
  %703 = shl nuw nsw i32 %702, 2
  %704 = add i32 %701, %703
  %705 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %704, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %706 = extractvalue %dx.types.ResRet.i32 %705, 0
  %707 = extractvalue %dx.types.ResRet.i32 %705, 1
  %708 = extractvalue %dx.types.ResRet.i32 %705, 2
  %709 = and i32 %700, 31
  %710 = lshr i32 %706, %709
  %711 = icmp eq i32 %709, 0
  br i1 %711, label %716, label %712

; <label>:712                                     ; preds = %672
  %713 = sub i32 0, %700
  %714 = and i32 %713, 31
  %715 = shl i32 %707, %714
  br label %716

; <label>:716                                     ; preds = %712, %672
  %717 = phi i32 [ %715, %712 ], [ 0, %672 ]
  %718 = or i32 %717, %710
  %719 = lshr i32 %707, %709
  br i1 %711, label %724, label %720

; <label>:720                                     ; preds = %716
  %721 = sub i32 0, %700
  %722 = and i32 %721, 31
  %723 = shl i32 %708, %722
  br label %724

; <label>:724                                     ; preds = %720, %716
  %725 = phi i32 [ %723, %720 ], [ 0, %716 ]
  %726 = or i32 %725, %719
  %727 = shl i32 1, %642
  %728 = add i32 %727, -1
  %729 = and i32 %718, %728
  %730 = lshr i32 %718, %642
  %731 = icmp eq i32 %642, 0
  br i1 %731, label %736, label %732

; <label>:732                                     ; preds = %724
  %733 = sub nsw i32 0, %641
  %734 = and i32 %733, 31
  %735 = shl i32 %726, %734
  br label %736

; <label>:736                                     ; preds = %732, %724
  %737 = phi i32 [ %735, %732 ], [ 0, %724 ]
  %738 = or i32 %737, %730
  %739 = shl i32 1, %644
  %740 = add i32 %739, -1
  %741 = and i32 %738, %740
  %742 = lshr i32 %738, %644
  %743 = icmp eq i32 %644, 0
  br i1 %743, label %749, label %744

; <label>:744                                     ; preds = %736
  %745 = lshr i32 %726, %642
  %746 = sub nsw i32 0, %643
  %747 = and i32 %746, 31
  %748 = shl i32 %745, %747
  br label %749

; <label>:749                                     ; preds = %744, %736
  %750 = phi i32 [ %748, %744 ], [ 0, %736 ]
  %751 = or i32 %750, %742
  %752 = shl i32 1, %646
  %753 = add i32 %752, -1
  %754 = and i32 %751, %753
  %755 = shl i32 %631, 20
  %756 = and i32 %755, 528482304
  %757 = sub nsw i32 1233125376, %756
  %758 = bitcast i32 %757 to float
  %759 = add i32 %729, %628
  %760 = add i32 %741, %629
  %761 = add i32 %754, %630
  %762 = sitofp i32 %759 to float
  %763 = sitofp i32 %760 to float
  %764 = sitofp i32 %761 to float
  %765 = fmul float %758, %762
  %766 = fmul float %758, %763
  %767 = fmul float %758, %764
  %768 = mul i32 %683, %699
  %769 = lshr i32 %768, 5
  %770 = shl nuw nsw i32 %769, 2
  %771 = add i32 %701, %770
  %772 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %771, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %773 = extractvalue %dx.types.ResRet.i32 %772, 0
  %774 = extractvalue %dx.types.ResRet.i32 %772, 1
  %775 = extractvalue %dx.types.ResRet.i32 %772, 2
  %776 = and i32 %768, 31
  %777 = lshr i32 %773, %776
  %778 = icmp eq i32 %776, 0
  br i1 %778, label %783, label %779

; <label>:779                                     ; preds = %749
  %780 = sub i32 0, %768
  %781 = and i32 %780, 31
  %782 = shl i32 %774, %781
  br label %783

; <label>:783                                     ; preds = %779, %749
  %784 = phi i32 [ %782, %779 ], [ 0, %749 ]
  %785 = or i32 %784, %777
  %786 = lshr i32 %774, %776
  br i1 %778, label %791, label %787

; <label>:787                                     ; preds = %783
  %788 = sub i32 0, %768
  %789 = and i32 %788, 31
  %790 = shl i32 %775, %789
  br label %791

; <label>:791                                     ; preds = %787, %783
  %792 = phi i32 [ %790, %787 ], [ 0, %783 ]
  %793 = or i32 %792, %786
  %794 = and i32 %785, %728
  %795 = lshr i32 %785, %642
  br i1 %731, label %800, label %796

; <label>:796                                     ; preds = %791
  %797 = sub nsw i32 0, %641
  %798 = and i32 %797, 31
  %799 = shl i32 %793, %798
  br label %800

; <label>:800                                     ; preds = %796, %791
  %801 = phi i32 [ %799, %796 ], [ 0, %791 ]
  %802 = or i32 %801, %795
  %803 = and i32 %802, %740
  %804 = lshr i32 %802, %644
  br i1 %743, label %810, label %805

; <label>:805                                     ; preds = %800
  %806 = lshr i32 %793, %642
  %807 = sub nsw i32 0, %643
  %808 = and i32 %807, 31
  %809 = shl i32 %806, %808
  br label %810

; <label>:810                                     ; preds = %805, %800
  %811 = phi i32 [ %809, %805 ], [ 0, %800 ]
  %812 = or i32 %811, %804
  %813 = and i32 %812, %753
  %814 = add i32 %794, %628
  %815 = add i32 %803, %629
  %816 = add i32 %813, %630
  %817 = sitofp i32 %814 to float
  %818 = sitofp i32 %815 to float
  %819 = sitofp i32 %816 to float
  %820 = fmul float %758, %817
  %821 = fmul float %758, %818
  %822 = fmul float %758, %819
  %823 = mul i32 %684, %699
  %824 = lshr i32 %823, 5
  %825 = shl nuw nsw i32 %824, 2
  %826 = add i32 %701, %825
  %827 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %826, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %828 = extractvalue %dx.types.ResRet.i32 %827, 0
  %829 = extractvalue %dx.types.ResRet.i32 %827, 1
  %830 = extractvalue %dx.types.ResRet.i32 %827, 2
  %831 = and i32 %823, 31
  %832 = lshr i32 %828, %831
  %833 = icmp eq i32 %831, 0
  br i1 %833, label %838, label %834

; <label>:834                                     ; preds = %810
  %835 = sub i32 0, %823
  %836 = and i32 %835, 31
  %837 = shl i32 %829, %836
  br label %838

; <label>:838                                     ; preds = %834, %810
  %839 = phi i32 [ %837, %834 ], [ 0, %810 ]
  %840 = or i32 %839, %832
  %841 = lshr i32 %829, %831
  br i1 %833, label %846, label %842

; <label>:842                                     ; preds = %838
  %843 = sub i32 0, %823
  %844 = and i32 %843, 31
  %845 = shl i32 %830, %844
  br label %846

; <label>:846                                     ; preds = %842, %838
  %847 = phi i32 [ %845, %842 ], [ 0, %838 ]
  %848 = or i32 %847, %841
  %849 = and i32 %840, %728
  %850 = lshr i32 %840, %642
  br i1 %731, label %855, label %851

; <label>:851                                     ; preds = %846
  %852 = sub nsw i32 0, %641
  %853 = and i32 %852, 31
  %854 = shl i32 %848, %853
  br label %855

; <label>:855                                     ; preds = %851, %846
  %856 = phi i32 [ %854, %851 ], [ 0, %846 ]
  %857 = or i32 %856, %850
  %858 = and i32 %857, %740
  %859 = lshr i32 %857, %644
  br i1 %743, label %865, label %860

; <label>:860                                     ; preds = %855
  %861 = lshr i32 %848, %642
  %862 = sub nsw i32 0, %643
  %863 = and i32 %862, 31
  %864 = shl i32 %861, %863
  br label %865

; <label>:865                                     ; preds = %860, %855
  %866 = phi i32 [ %864, %860 ], [ 0, %855 ]
  %867 = or i32 %866, %859
  %868 = and i32 %867, %753
  %869 = add i32 %849, %628
  %870 = add i32 %858, %629
  %871 = add i32 %868, %630
  %872 = sitofp i32 %869 to float
  %873 = sitofp i32 %870 to float
  %874 = sitofp i32 %871 to float
  %875 = fmul float %758, %872
  %876 = fmul float %758, %873
  %877 = fmul float %758, %874
  %878 = add i32 %652, %614
  %879 = add i32 %650, %614
  %880 = and i32 %625, 15
  %881 = lshr i32 %625, 4
  %882 = and i32 %881, 15
  %883 = lshr i32 %625, 8
  %884 = and i32 %883, 15
  %885 = lshr i32 %625, 12
  %886 = and i32 %885, 15
  %887 = mul i32 %677, %651
  %888 = shl nuw nsw i32 %648, 1
  %889 = ashr i32 %887, 5
  %890 = shl nsw i32 %889, 2
  %891 = add i32 %890, %879
  %892 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %891, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %893 = extractvalue %dx.types.ResRet.i32 %892, 0
  %894 = extractvalue %dx.types.ResRet.i32 %892, 1
  %895 = extractvalue %dx.types.ResRet.i32 %892, 2
  %896 = extractvalue %dx.types.ResRet.i32 %892, 3
  %897 = and i32 %887, 31
  %898 = lshr i32 %893, %897
  %899 = icmp eq i32 %897, 0
  br i1 %899, label %904, label %900

; <label>:900                                     ; preds = %865
  %901 = sub i32 0, %887
  %902 = and i32 %901, 31
  %903 = shl i32 %894, %902
  br label %904

; <label>:904                                     ; preds = %900, %865
  %905 = phi i32 [ %903, %900 ], [ 0, %865 ]
  %906 = or i32 %905, %898
  %907 = lshr i32 %894, %897
  br i1 %899, label %912, label %908

; <label>:908                                     ; preds = %904
  %909 = sub i32 0, %887
  %910 = and i32 %909, 31
  %911 = shl i32 %895, %910
  br label %912

; <label>:912                                     ; preds = %908, %904
  %913 = phi i32 [ %911, %908 ], [ 0, %904 ]
  %914 = or i32 %913, %907
  %915 = lshr i32 %895, %897
  br i1 %899, label %920, label %916

; <label>:916                                     ; preds = %912
  %917 = sub i32 0, %887
  %918 = and i32 %917, 31
  %919 = shl i32 %896, %918
  br label %920

; <label>:920                                     ; preds = %916, %912
  %921 = phi i32 [ %919, %916 ], [ 0, %912 ]
  %922 = or i32 %921, %915
  %923 = lshr i32 %896, %897
  %924 = shl i32 1, %888
  %925 = add i32 %924, -1
  %926 = and i32 %906, %925
  %927 = shl i32 1, %648
  %928 = add i32 %927, -1
  %929 = and i32 %926, %928
  %930 = lshr i32 %926, %648
  %931 = and i32 %930, %928
  %932 = uitofp i32 %929 to float
  %933 = uitofp i32 %931 to float
  %934 = uitofp i32 %928 to float
  %935 = fdiv fast float 2.000000e+00, %934
  %936 = fmul fast float %935, %932
  %937 = fmul fast float %935, %933
  %938 = fadd fast float %936, -1.000000e+00
  %939 = fadd fast float %937, -1.000000e+00
  %940 = call float @dx.op.unary.f32(i32 6, float %938)  ; FAbs(value)
  %941 = fsub fast float 1.000000e+00, %940
  %942 = call float @dx.op.unary.f32(i32 6, float %939)  ; FAbs(value)
  %943 = fsub fast float %941, %942
  %944 = fsub fast float -0.000000e+00, %943
  %945 = call float @dx.op.unary.f32(i32 7, float %944)  ; Saturate(value)
  %946 = fsub fast float -0.000000e+00, %945
  %947 = fcmp fast oge float %938, 0.000000e+00
  %948 = fcmp fast oge float %939, 0.000000e+00
  %949 = select i1 %947, float %946, float %945
  %950 = select i1 %948, float %946, float %945
  %951 = fadd fast float %949, %938
  %952 = fadd fast float %950, %939
  %953 = call float @dx.op.dot3.f32(i32 55, float %951, float %952, float %943, float %951, float %952, float %943)  ; Dot3(ax,ay,az,bx,by,bz)
  %954 = call float @dx.op.unary.f32(i32 25, float %953)  ; Rsqrt(value)
  %955 = fmul fast float %951, %954
  %956 = fmul fast float %952, %954
  %957 = fmul fast float %954, %943
  %958 = add nuw nsw i32 %649, 1
  %959 = select i1 %654, i32 %958, i32 0
  %960 = add nsw i32 %887, %888
  %961 = lshr i32 %906, %888
  %962 = icmp eq i32 %648, 0
  br i1 %962, label %967, label %963

; <label>:963                                     ; preds = %920
  %964 = sub nsw i32 0, %888
  %965 = and i32 %964, 30
  %966 = shl i32 %914, %965
  br label %967

; <label>:967                                     ; preds = %963, %920
  %968 = phi i32 [ %966, %963 ], [ 0, %920 ]
  %969 = or i32 %968, %961
  %970 = lshr i32 %914, %888
  br i1 %962, label %975, label %971

; <label>:971                                     ; preds = %967
  %972 = sub nsw i32 0, %888
  %973 = and i32 %972, 30
  %974 = shl i32 %922, %973
  br label %975

; <label>:975                                     ; preds = %971, %967
  %976 = phi i32 [ %974, %971 ], [ 0, %967 ]
  %977 = or i32 %976, %970
  %978 = lshr i32 %922, %888
  br i1 %962, label %983, label %979

; <label>:979                                     ; preds = %975
  %980 = sub nsw i32 0, %888
  %981 = and i32 %980, 30
  %982 = shl i32 %923, %981
  br label %983

; <label>:983                                     ; preds = %979, %975
  %984 = phi i32 [ %982, %979 ], [ 0, %975 ]
  %985 = or i32 %984, %978
  %986 = shl i32 1, %959
  %987 = add i32 %986, -1
  %988 = and i32 %969, %987
  br i1 %654, label %989, label %1026, !dx.controlflow.hints !41

; <label>:989                                     ; preds = %983
  %990 = shl i32 1, %649
  %991 = and i32 %988, %990
  %992 = icmp ne i32 %991, 0
  %993 = add i32 %990, -1
  %994 = and i32 %988, %993
  %995 = call float @dx.op.unary.f32(i32 6, float %957)  ; FAbs(value)
  %996 = call float @dx.op.unary.f32(i32 6, float %955)  ; FAbs(value)
  %997 = fcmp fast ogt float %995, %996
  %998 = select i1 %997, float %957, float %955
  %999 = select i1 %997, float %955, float %957
  %1000 = fsub fast float -0.000000e+00, %956
  %1001 = fmul fast float %999, %998
  %1002 = fmul fast float %999, %1000
  %1003 = fmul fast float %998, %998
  %1004 = fmul fast float %956, %1000
  %1005 = fsub fast float %1003, %1004
  %1006 = call float @dx.op.dot2.f32(i32 54, float %1000, float %998, float %1000, float %998)  ; Dot2(ax,ay,bx,by)
  %1007 = call float @dx.op.unary.f32(i32 25, float %1006)  ; Rsqrt(value)
  %1008 = uitofp i32 %994 to float
  %1009 = uitofp i32 %990 to float
  %1010 = fdiv fast float 0x401921FB60000000, %1009
  %1011 = fmul fast float %1010, %1008
  %1012 = call float @dx.op.unary.f32(i32 12, float %1011)  ; Cos(value)
  %1013 = fmul fast float %1012, %1007
  %1014 = fmul fast float %1013, %1000
  %1015 = fmul fast float %1013, %998
  %1016 = call float @dx.op.unary.f32(i32 13, float %1011)  ; Sin(value)
  %1017 = fmul fast float %1016, %1007
  %1018 = fmul fast float %1001, %1017
  %1019 = fmul fast float %1002, %1017
  %1020 = fmul fast float %1017, %1005
  %1021 = fsub fast float %1014, %1018
  %1022 = fadd fast float %1019, %1015
  %1023 = select i1 %997, float %1020, float %1021
  %1024 = select i1 %997, float %1021, float %1020
  %1025 = select i1 %992, float -1.000000e+00, float 1.000000e+00
  br label %1026

; <label>:1026                                    ; preds = %989, %983
  %1027 = phi float [ %1023, %989 ], [ 0.000000e+00, %983 ]
  %1028 = phi float [ %1022, %989 ], [ 0.000000e+00, %983 ]
  %1029 = phi float [ %1024, %989 ], [ 0.000000e+00, %983 ]
  %1030 = phi float [ %1025, %989 ], [ 0.000000e+00, %983 ]
  %1031 = add nuw nsw i32 %959, %880
  %1032 = add nuw nsw i32 %1031, %882
  %1033 = add nsw i32 %1032, %960
  %1034 = and i32 %1032, 31
  %1035 = lshr i32 %969, %1034
  %1036 = icmp eq i32 %1034, 0
  br i1 %1036, label %1041, label %1037

; <label>:1037                                    ; preds = %1026
  %1038 = sub nsw i32 0, %1032
  %1039 = and i32 %1038, 31
  %1040 = shl i32 %977, %1039
  br label %1041

; <label>:1041                                    ; preds = %1037, %1026
  %1042 = phi i32 [ %1040, %1037 ], [ 0, %1026 ]
  %1043 = or i32 %1042, %1035
  %1044 = and i32 %1032, 31
  %1045 = lshr i32 %977, %1044
  %1046 = icmp eq i32 %1044, 0
  br i1 %1046, label %1051, label %1047

; <label>:1047                                    ; preds = %1041
  %1048 = sub nsw i32 0, %1032
  %1049 = and i32 %1048, 31
  %1050 = shl i32 %985, %1049
  br label %1051

; <label>:1051                                    ; preds = %1047, %1041
  %1052 = phi i32 [ %1050, %1047 ], [ 0, %1041 ]
  %1053 = or i32 %1052, %1045
  %1054 = add nuw nsw i32 %884, %886
  %1055 = mul i32 %683, %651
  %1056 = ashr i32 %1055, 5
  %1057 = shl nsw i32 %1056, 2
  %1058 = add i32 %1057, %879
  %1059 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %1058, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1060 = extractvalue %dx.types.ResRet.i32 %1059, 0
  %1061 = extractvalue %dx.types.ResRet.i32 %1059, 1
  %1062 = extractvalue %dx.types.ResRet.i32 %1059, 2
  %1063 = extractvalue %dx.types.ResRet.i32 %1059, 3
  %1064 = and i32 %1055, 31
  %1065 = lshr i32 %1060, %1064
  %1066 = icmp eq i32 %1064, 0
  br i1 %1066, label %1071, label %1067

; <label>:1067                                    ; preds = %1051
  %1068 = sub i32 0, %1055
  %1069 = and i32 %1068, 31
  %1070 = shl i32 %1061, %1069
  br label %1071

; <label>:1071                                    ; preds = %1067, %1051
  %1072 = phi i32 [ %1070, %1067 ], [ 0, %1051 ]
  %1073 = or i32 %1072, %1065
  %1074 = lshr i32 %1061, %1064
  br i1 %1066, label %1079, label %1075

; <label>:1075                                    ; preds = %1071
  %1076 = sub i32 0, %1055
  %1077 = and i32 %1076, 31
  %1078 = shl i32 %1062, %1077
  br label %1079

; <label>:1079                                    ; preds = %1075, %1071
  %1080 = phi i32 [ %1078, %1075 ], [ 0, %1071 ]
  %1081 = or i32 %1080, %1074
  %1082 = lshr i32 %1062, %1064
  br i1 %1066, label %1087, label %1083

; <label>:1083                                    ; preds = %1079
  %1084 = sub i32 0, %1055
  %1085 = and i32 %1084, 31
  %1086 = shl i32 %1063, %1085
  br label %1087

; <label>:1087                                    ; preds = %1083, %1079
  %1088 = phi i32 [ %1086, %1083 ], [ 0, %1079 ]
  %1089 = or i32 %1088, %1082
  %1090 = lshr i32 %1063, %1064
  %1091 = and i32 %1073, %925
  %1092 = and i32 %1091, %928
  %1093 = lshr i32 %1091, %648
  %1094 = and i32 %1093, %928
  %1095 = uitofp i32 %1092 to float
  %1096 = uitofp i32 %1094 to float
  %1097 = fmul fast float %935, %1095
  %1098 = fmul fast float %935, %1096
  %1099 = fadd fast float %1097, -1.000000e+00
  %1100 = fadd fast float %1098, -1.000000e+00
  %1101 = call float @dx.op.unary.f32(i32 6, float %1099)  ; FAbs(value)
  %1102 = fsub fast float 1.000000e+00, %1101
  %1103 = call float @dx.op.unary.f32(i32 6, float %1100)  ; FAbs(value)
  %1104 = fsub fast float %1102, %1103
  %1105 = fsub fast float -0.000000e+00, %1104
  %1106 = call float @dx.op.unary.f32(i32 7, float %1105)  ; Saturate(value)
  %1107 = fsub fast float -0.000000e+00, %1106
  %1108 = fcmp fast oge float %1099, 0.000000e+00
  %1109 = fcmp fast oge float %1100, 0.000000e+00
  %1110 = select i1 %1108, float %1107, float %1106
  %1111 = select i1 %1109, float %1107, float %1106
  %1112 = fadd fast float %1110, %1099
  %1113 = fadd fast float %1111, %1100
  %1114 = call float @dx.op.dot3.f32(i32 55, float %1112, float %1113, float %1104, float %1112, float %1113, float %1104)  ; Dot3(ax,ay,az,bx,by,bz)
  %1115 = call float @dx.op.unary.f32(i32 25, float %1114)  ; Rsqrt(value)
  %1116 = fmul fast float %1112, %1115
  %1117 = fmul fast float %1113, %1115
  %1118 = fmul fast float %1115, %1104
  %1119 = add nsw i32 %1055, %888
  %1120 = lshr i32 %1073, %888
  br i1 %962, label %1125, label %1121

; <label>:1121                                    ; preds = %1087
  %1122 = sub nsw i32 0, %888
  %1123 = and i32 %1122, 30
  %1124 = shl i32 %1081, %1123
  br label %1125

; <label>:1125                                    ; preds = %1121, %1087
  %1126 = phi i32 [ %1124, %1121 ], [ 0, %1087 ]
  %1127 = or i32 %1126, %1120
  %1128 = lshr i32 %1081, %888
  br i1 %962, label %1133, label %1129

; <label>:1129                                    ; preds = %1125
  %1130 = sub nsw i32 0, %888
  %1131 = and i32 %1130, 30
  %1132 = shl i32 %1089, %1131
  br label %1133

; <label>:1133                                    ; preds = %1129, %1125
  %1134 = phi i32 [ %1132, %1129 ], [ 0, %1125 ]
  %1135 = or i32 %1134, %1128
  %1136 = lshr i32 %1089, %888
  br i1 %962, label %1141, label %1137

; <label>:1137                                    ; preds = %1133
  %1138 = sub nsw i32 0, %888
  %1139 = and i32 %1138, 30
  %1140 = shl i32 %1090, %1139
  br label %1141

; <label>:1141                                    ; preds = %1137, %1133
  %1142 = phi i32 [ %1140, %1137 ], [ 0, %1133 ]
  %1143 = or i32 %1142, %1136
  %1144 = and i32 %1127, %987
  br i1 %654, label %1145, label %1182, !dx.controlflow.hints !41

; <label>:1145                                    ; preds = %1141
  %1146 = shl i32 1, %649
  %1147 = and i32 %1144, %1146
  %1148 = icmp ne i32 %1147, 0
  %1149 = add i32 %1146, -1
  %1150 = and i32 %1144, %1149
  %1151 = call float @dx.op.unary.f32(i32 6, float %1118)  ; FAbs(value)
  %1152 = call float @dx.op.unary.f32(i32 6, float %1116)  ; FAbs(value)
  %1153 = fcmp fast ogt float %1151, %1152
  %1154 = select i1 %1153, float %1118, float %1116
  %1155 = select i1 %1153, float %1116, float %1118
  %1156 = fsub fast float -0.000000e+00, %1117
  %1157 = fmul fast float %1155, %1154
  %1158 = fmul fast float %1155, %1156
  %1159 = fmul fast float %1154, %1154
  %1160 = fmul fast float %1117, %1156
  %1161 = fsub fast float %1159, %1160
  %1162 = call float @dx.op.dot2.f32(i32 54, float %1156, float %1154, float %1156, float %1154)  ; Dot2(ax,ay,bx,by)
  %1163 = call float @dx.op.unary.f32(i32 25, float %1162)  ; Rsqrt(value)
  %1164 = uitofp i32 %1150 to float
  %1165 = uitofp i32 %1146 to float
  %1166 = fdiv fast float 0x401921FB60000000, %1165
  %1167 = fmul fast float %1166, %1164
  %1168 = call float @dx.op.unary.f32(i32 12, float %1167)  ; Cos(value)
  %1169 = fmul fast float %1168, %1163
  %1170 = fmul fast float %1169, %1156
  %1171 = fmul fast float %1169, %1154
  %1172 = call float @dx.op.unary.f32(i32 13, float %1167)  ; Sin(value)
  %1173 = fmul fast float %1172, %1163
  %1174 = fmul fast float %1157, %1173
  %1175 = fmul fast float %1158, %1173
  %1176 = fmul fast float %1173, %1161
  %1177 = fsub fast float %1170, %1174
  %1178 = fadd fast float %1175, %1171
  %1179 = select i1 %1153, float %1176, float %1177
  %1180 = select i1 %1153, float %1177, float %1176
  %1181 = select i1 %1148, float -1.000000e+00, float 1.000000e+00
  br label %1182

; <label>:1182                                    ; preds = %1145, %1141
  %1183 = phi float [ %1179, %1145 ], [ 0.000000e+00, %1141 ]
  %1184 = phi float [ %1178, %1145 ], [ 0.000000e+00, %1141 ]
  %1185 = phi float [ %1180, %1145 ], [ 0.000000e+00, %1141 ]
  %1186 = phi float [ %1181, %1145 ], [ 0.000000e+00, %1141 ]
  %1187 = add nsw i32 %1032, %1119
  %1188 = and i32 %1032, 31
  %1189 = lshr i32 %1127, %1188
  %1190 = icmp eq i32 %1188, 0
  br i1 %1190, label %1195, label %1191

; <label>:1191                                    ; preds = %1182
  %1192 = sub nsw i32 0, %1032
  %1193 = and i32 %1192, 31
  %1194 = shl i32 %1135, %1193
  br label %1195

; <label>:1195                                    ; preds = %1191, %1182
  %1196 = phi i32 [ %1194, %1191 ], [ 0, %1182 ]
  %1197 = or i32 %1196, %1189
  %1198 = and i32 %1032, 31
  %1199 = lshr i32 %1135, %1198
  %1200 = icmp eq i32 %1198, 0
  br i1 %1200, label %1205, label %1201

; <label>:1201                                    ; preds = %1195
  %1202 = sub nsw i32 0, %1032
  %1203 = and i32 %1202, 31
  %1204 = shl i32 %1143, %1203
  br label %1205

; <label>:1205                                    ; preds = %1201, %1195
  %1206 = phi i32 [ %1204, %1201 ], [ 0, %1195 ]
  %1207 = or i32 %1206, %1199
  %1208 = mul i32 %684, %651
  %1209 = ashr i32 %1208, 5
  %1210 = shl nsw i32 %1209, 2
  %1211 = add i32 %1210, %879
  %1212 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %1211, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1213 = extractvalue %dx.types.ResRet.i32 %1212, 0
  %1214 = extractvalue %dx.types.ResRet.i32 %1212, 1
  %1215 = extractvalue %dx.types.ResRet.i32 %1212, 2
  %1216 = extractvalue %dx.types.ResRet.i32 %1212, 3
  %1217 = and i32 %1208, 31
  %1218 = lshr i32 %1213, %1217
  %1219 = icmp eq i32 %1217, 0
  br i1 %1219, label %1224, label %1220

; <label>:1220                                    ; preds = %1205
  %1221 = sub i32 0, %1208
  %1222 = and i32 %1221, 31
  %1223 = shl i32 %1214, %1222
  br label %1224

; <label>:1224                                    ; preds = %1220, %1205
  %1225 = phi i32 [ %1223, %1220 ], [ 0, %1205 ]
  %1226 = or i32 %1225, %1218
  %1227 = lshr i32 %1214, %1217
  br i1 %1219, label %1232, label %1228

; <label>:1228                                    ; preds = %1224
  %1229 = sub i32 0, %1208
  %1230 = and i32 %1229, 31
  %1231 = shl i32 %1215, %1230
  br label %1232

; <label>:1232                                    ; preds = %1228, %1224
  %1233 = phi i32 [ %1231, %1228 ], [ 0, %1224 ]
  %1234 = or i32 %1233, %1227
  %1235 = lshr i32 %1215, %1217
  br i1 %1219, label %1240, label %1236

; <label>:1236                                    ; preds = %1232
  %1237 = sub i32 0, %1208
  %1238 = and i32 %1237, 31
  %1239 = shl i32 %1216, %1238
  br label %1240

; <label>:1240                                    ; preds = %1236, %1232
  %1241 = phi i32 [ %1239, %1236 ], [ 0, %1232 ]
  %1242 = or i32 %1241, %1235
  %1243 = lshr i32 %1216, %1217
  %1244 = and i32 %1226, %925
  %1245 = and i32 %1244, %928
  %1246 = lshr i32 %1244, %648
  %1247 = and i32 %1246, %928
  %1248 = uitofp i32 %1245 to float
  %1249 = uitofp i32 %1247 to float
  %1250 = fmul fast float %935, %1248
  %1251 = fmul fast float %935, %1249
  %1252 = fadd fast float %1250, -1.000000e+00
  %1253 = fadd fast float %1251, -1.000000e+00
  %1254 = call float @dx.op.unary.f32(i32 6, float %1252)  ; FAbs(value)
  %1255 = fsub fast float 1.000000e+00, %1254
  %1256 = call float @dx.op.unary.f32(i32 6, float %1253)  ; FAbs(value)
  %1257 = fsub fast float %1255, %1256
  %1258 = fsub fast float -0.000000e+00, %1257
  %1259 = call float @dx.op.unary.f32(i32 7, float %1258)  ; Saturate(value)
  %1260 = fsub fast float -0.000000e+00, %1259
  %1261 = fcmp fast oge float %1252, 0.000000e+00
  %1262 = fcmp fast oge float %1253, 0.000000e+00
  %1263 = select i1 %1261, float %1260, float %1259
  %1264 = select i1 %1262, float %1260, float %1259
  %1265 = fadd fast float %1263, %1252
  %1266 = fadd fast float %1264, %1253
  %1267 = call float @dx.op.dot3.f32(i32 55, float %1265, float %1266, float %1257, float %1265, float %1266, float %1257)  ; Dot3(ax,ay,az,bx,by,bz)
  %1268 = call float @dx.op.unary.f32(i32 25, float %1267)  ; Rsqrt(value)
  %1269 = fmul fast float %1265, %1268
  %1270 = fmul fast float %1266, %1268
  %1271 = fmul fast float %1268, %1257
  %1272 = add nsw i32 %1208, %888
  %1273 = lshr i32 %1226, %888
  br i1 %962, label %1278, label %1274

; <label>:1274                                    ; preds = %1240
  %1275 = sub nsw i32 0, %888
  %1276 = and i32 %1275, 30
  %1277 = shl i32 %1234, %1276
  br label %1278

; <label>:1278                                    ; preds = %1274, %1240
  %1279 = phi i32 [ %1277, %1274 ], [ 0, %1240 ]
  %1280 = or i32 %1279, %1273
  %1281 = lshr i32 %1234, %888
  br i1 %962, label %1286, label %1282

; <label>:1282                                    ; preds = %1278
  %1283 = sub nsw i32 0, %888
  %1284 = and i32 %1283, 30
  %1285 = shl i32 %1242, %1284
  br label %1286

; <label>:1286                                    ; preds = %1282, %1278
  %1287 = phi i32 [ %1285, %1282 ], [ 0, %1278 ]
  %1288 = or i32 %1287, %1281
  %1289 = lshr i32 %1242, %888
  br i1 %962, label %1294, label %1290

; <label>:1290                                    ; preds = %1286
  %1291 = sub nsw i32 0, %888
  %1292 = and i32 %1291, 30
  %1293 = shl i32 %1243, %1292
  br label %1294

; <label>:1294                                    ; preds = %1290, %1286
  %1295 = phi i32 [ %1293, %1290 ], [ 0, %1286 ]
  %1296 = or i32 %1295, %1289
  %1297 = and i32 %1280, %987
  br i1 %654, label %1298, label %1335, !dx.controlflow.hints !41

; <label>:1298                                    ; preds = %1294
  %1299 = shl i32 1, %649
  %1300 = and i32 %1297, %1299
  %1301 = icmp ne i32 %1300, 0
  %1302 = add i32 %1299, -1
  %1303 = and i32 %1297, %1302
  %1304 = call float @dx.op.unary.f32(i32 6, float %1271)  ; FAbs(value)
  %1305 = call float @dx.op.unary.f32(i32 6, float %1269)  ; FAbs(value)
  %1306 = fcmp fast ogt float %1304, %1305
  %1307 = select i1 %1306, float %1271, float %1269
  %1308 = select i1 %1306, float %1269, float %1271
  %1309 = fsub fast float -0.000000e+00, %1270
  %1310 = fmul fast float %1308, %1307
  %1311 = fmul fast float %1308, %1309
  %1312 = fmul fast float %1307, %1307
  %1313 = fmul fast float %1270, %1309
  %1314 = fsub fast float %1312, %1313
  %1315 = call float @dx.op.dot2.f32(i32 54, float %1309, float %1307, float %1309, float %1307)  ; Dot2(ax,ay,bx,by)
  %1316 = call float @dx.op.unary.f32(i32 25, float %1315)  ; Rsqrt(value)
  %1317 = uitofp i32 %1303 to float
  %1318 = uitofp i32 %1299 to float
  %1319 = fdiv fast float 0x401921FB60000000, %1318
  %1320 = fmul fast float %1319, %1317
  %1321 = call float @dx.op.unary.f32(i32 12, float %1320)  ; Cos(value)
  %1322 = fmul fast float %1321, %1316
  %1323 = fmul fast float %1322, %1309
  %1324 = fmul fast float %1322, %1307
  %1325 = call float @dx.op.unary.f32(i32 13, float %1320)  ; Sin(value)
  %1326 = fmul fast float %1325, %1316
  %1327 = fmul fast float %1310, %1326
  %1328 = fmul fast float %1311, %1326
  %1329 = fmul fast float %1326, %1314
  %1330 = fsub fast float %1323, %1327
  %1331 = fadd fast float %1328, %1324
  %1332 = select i1 %1306, float %1329, float %1330
  %1333 = select i1 %1306, float %1330, float %1329
  %1334 = select i1 %1301, float -1.000000e+00, float 1.000000e+00
  br label %1335

; <label>:1335                                    ; preds = %1298, %1294
  %1336 = phi float [ %1332, %1298 ], [ 0.000000e+00, %1294 ]
  %1337 = phi float [ %1331, %1298 ], [ 0.000000e+00, %1294 ]
  %1338 = phi float [ %1333, %1298 ], [ 0.000000e+00, %1294 ]
  %1339 = phi float [ %1334, %1298 ], [ 0.000000e+00, %1294 ]
  %1340 = add nsw i32 %1032, %1272
  %1341 = and i32 %1032, 31
  %1342 = lshr i32 %1280, %1341
  %1343 = icmp eq i32 %1341, 0
  br i1 %1343, label %1348, label %1344

; <label>:1344                                    ; preds = %1335
  %1345 = sub nsw i32 0, %1032
  %1346 = and i32 %1345, 31
  %1347 = shl i32 %1288, %1346
  br label %1348

; <label>:1348                                    ; preds = %1344, %1335
  %1349 = phi i32 [ %1347, %1344 ], [ 0, %1335 ]
  %1350 = or i32 %1349, %1342
  %1351 = and i32 %1032, 31
  %1352 = lshr i32 %1288, %1351
  %1353 = icmp eq i32 %1351, 0
  br i1 %1353, label %1358, label %1354

; <label>:1354                                    ; preds = %1348
  %1355 = sub nsw i32 0, %1032
  %1356 = and i32 %1355, 31
  %1357 = shl i32 %1296, %1356
  br label %1358

; <label>:1358                                    ; preds = %1354, %1348
  %1359 = phi i32 [ %1357, %1354 ], [ 0, %1348 ]
  %1360 = or i32 %1359, %1352
  %1361 = icmp eq i32 %655, 0
  br i1 %1361, label %1366, label %1362

; <label>:1362                                    ; preds = %1358
  %1363 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %615, i32 %878, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1364 = extractvalue %dx.types.ResRet.i32 %1363, 0
  %1365 = extractvalue %dx.types.ResRet.i32 %1363, 1
  br label %1366

; <label>:1366                                    ; preds = %1362, %1358
  %1367 = phi i32 [ %1364, %1362 ], [ 0, %1358 ]
  %1368 = phi i32 [ %1365, %1362 ], [ 0, %1358 ]
  %1369 = and i32 %1367, 31
  %1370 = lshr i32 %1367, 5
  %1371 = and i32 %1368, 31
  %1372 = lshr i32 %1368, 5
  %1373 = add nsw i32 %1054, %1033
  %1374 = lshr i32 %1043, %1054
  %1375 = icmp eq i32 %1054, 0
  br i1 %1375, label %1380, label %1376

; <label>:1376                                    ; preds = %1366
  %1377 = sub nsw i32 0, %1054
  %1378 = and i32 %1377, 31
  %1379 = shl i32 %1053, %1378
  br label %1380

; <label>:1380                                    ; preds = %1376, %1366
  %1381 = phi i32 [ %1379, %1376 ], [ 0, %1366 ]
  %1382 = or i32 %1381, %1374
  %1383 = shl i32 1, %1369
  %1384 = add i32 %1383, -1
  %1385 = and i32 %1382, %1384
  %1386 = add nsw i32 %1369, %1373
  %1387 = ashr i32 %1386, 5
  %1388 = shl nsw i32 %1387, 2
  %1389 = add i32 %1388, %879
  %1390 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1391 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1390, i32 %1389, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1392 = extractvalue %dx.types.ResRet.i32 %1391, 0
  %1393 = add i32 %1367, %1373
  %1394 = and i32 %1393, 31
  %1395 = lshr i32 %1392, %1394
  %1396 = icmp eq i32 %1394, 0
  br i1 %1396, label %1402, label %1397

; <label>:1397                                    ; preds = %1380
  %1398 = extractvalue %dx.types.ResRet.i32 %1391, 1
  %1399 = sub i32 0, %1386
  %1400 = and i32 %1399, 31
  %1401 = shl i32 %1398, %1400
  br label %1402

; <label>:1402                                    ; preds = %1397, %1380
  %1403 = phi i32 [ %1401, %1397 ], [ 0, %1380 ]
  %1404 = or i32 %1403, %1395
  %1405 = shl i32 1, %1371
  %1406 = add i32 %1405, -1
  %1407 = and i32 %1404, %1406
  %1408 = add nsw i32 %1054, %1187
  %1409 = lshr i32 %1197, %1054
  %1410 = icmp eq i32 %1054, 0
  br i1 %1410, label %1415, label %1411

; <label>:1411                                    ; preds = %1402
  %1412 = sub nsw i32 0, %1054
  %1413 = and i32 %1412, 31
  %1414 = shl i32 %1207, %1413
  br label %1415

; <label>:1415                                    ; preds = %1411, %1402
  %1416 = phi i32 [ %1414, %1411 ], [ 0, %1402 ]
  %1417 = or i32 %1416, %1409
  %1418 = and i32 %1417, %1384
  %1419 = add nsw i32 %1369, %1408
  %1420 = ashr i32 %1419, 5
  %1421 = shl nsw i32 %1420, 2
  %1422 = add i32 %1421, %879
  %1423 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1424 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1423, i32 %1422, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1425 = extractvalue %dx.types.ResRet.i32 %1424, 0
  %1426 = add i32 %1367, %1408
  %1427 = and i32 %1426, 31
  %1428 = lshr i32 %1425, %1427
  %1429 = icmp eq i32 %1427, 0
  br i1 %1429, label %1435, label %1430

; <label>:1430                                    ; preds = %1415
  %1431 = extractvalue %dx.types.ResRet.i32 %1424, 1
  %1432 = sub i32 0, %1419
  %1433 = and i32 %1432, 31
  %1434 = shl i32 %1431, %1433
  br label %1435

; <label>:1435                                    ; preds = %1430, %1415
  %1436 = phi i32 [ %1434, %1430 ], [ 0, %1415 ]
  %1437 = or i32 %1436, %1428
  %1438 = and i32 %1437, %1406
  %1439 = add nsw i32 %1054, %1340
  %1440 = lshr i32 %1350, %1054
  %1441 = icmp eq i32 %1054, 0
  br i1 %1441, label %1446, label %1442

; <label>:1442                                    ; preds = %1435
  %1443 = sub nsw i32 0, %1054
  %1444 = and i32 %1443, 31
  %1445 = shl i32 %1360, %1444
  br label %1446

; <label>:1446                                    ; preds = %1442, %1435
  %1447 = phi i32 [ %1445, %1442 ], [ 0, %1435 ]
  %1448 = or i32 %1447, %1440
  %1449 = and i32 %1448, %1384
  %1450 = add nsw i32 %1369, %1439
  %1451 = ashr i32 %1450, 5
  %1452 = shl nsw i32 %1451, 2
  %1453 = add i32 %1452, %879
  %1454 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1455 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1454, i32 %1453, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1456 = extractvalue %dx.types.ResRet.i32 %1455, 0
  %1457 = add i32 %1367, %1439
  %1458 = and i32 %1457, 31
  %1459 = lshr i32 %1456, %1458
  %1460 = icmp eq i32 %1458, 0
  br i1 %1460, label %1466, label %1461

; <label>:1461                                    ; preds = %1446
  %1462 = extractvalue %dx.types.ResRet.i32 %1455, 1
  %1463 = sub i32 0, %1450
  %1464 = and i32 %1463, 31
  %1465 = shl i32 %1462, %1464
  br label %1466

; <label>:1466                                    ; preds = %1461, %1446
  %1467 = phi i32 [ %1465, %1461 ], [ 0, %1446 ]
  br i1 %1361, label %1549, label %1468, !dx.controlflow.hints !42

; <label>:1468                                    ; preds = %1466
  %1469 = or i32 %1467, %1459
  %1470 = and i32 %1469, %1406
  %1471 = add i32 %1385, %1370
  %1472 = add i32 %1407, %1372
  %1473 = icmp ult i32 %1471, 524288
  %1474 = sext i1 %1473 to i32
  %1475 = xor i32 %1474, %1471
  %1476 = shl i32 %1475, 9
  %1477 = and i32 %1476, 268434944
  %1478 = add nuw nsw i32 %1477, 1056964608
  %1479 = bitcast i32 %1478 to float
  %1480 = fmul fast float %1479, 2.000000e+00
  %1481 = fadd fast float %1480, -1.000000e+00
  %1482 = call float @dx.op.binary.f32(i32 36, float %1481, float %1479)  ; FMin(a,b)
  %1483 = fsub fast float -0.000000e+00, %1482
  %1484 = select i1 %1473, float %1483, float %1482
  %1485 = icmp ult i32 %1472, 524288
  %1486 = sext i1 %1485 to i32
  %1487 = xor i32 %1486, %1472
  %1488 = shl i32 %1487, 9
  %1489 = and i32 %1488, 268434944
  %1490 = add nuw nsw i32 %1489, 1056964608
  %1491 = bitcast i32 %1490 to float
  %1492 = fmul float %1491, 2.000000e+00
  %1493 = fadd float %1492, -1.000000e+00
  %1494 = call float @dx.op.binary.f32(i32 36, float %1493, float %1491), !dx.precise !39  ; FMin(a,b)
  %1495 = fsub float -0.000000e+00, %1494
  %1496 = select i1 %1485, float %1495, float %1494
  %1497 = add i32 %1418, %1370
  %1498 = add i32 %1438, %1372
  %1499 = icmp ult i32 %1497, 524288
  %1500 = sext i1 %1499 to i32
  %1501 = xor i32 %1500, %1497
  %1502 = shl i32 %1501, 9
  %1503 = and i32 %1502, 268434944
  %1504 = add nuw nsw i32 %1503, 1056964608
  %1505 = bitcast i32 %1504 to float
  %1506 = fmul fast float %1505, 2.000000e+00
  %1507 = fadd fast float %1506, -1.000000e+00
  %1508 = call float @dx.op.binary.f32(i32 36, float %1507, float %1505)  ; FMin(a,b)
  %1509 = fsub fast float -0.000000e+00, %1508
  %1510 = select i1 %1499, float %1509, float %1508
  %1511 = icmp ult i32 %1498, 524288
  %1512 = sext i1 %1511 to i32
  %1513 = xor i32 %1512, %1498
  %1514 = shl i32 %1513, 9
  %1515 = and i32 %1514, 268434944
  %1516 = add nuw nsw i32 %1515, 1056964608
  %1517 = bitcast i32 %1516 to float
  %1518 = fmul float %1517, 2.000000e+00
  %1519 = fadd float %1518, -1.000000e+00
  %1520 = call float @dx.op.binary.f32(i32 36, float %1519, float %1517), !dx.precise !39  ; FMin(a,b)
  %1521 = fsub float -0.000000e+00, %1520
  %1522 = select i1 %1511, float %1521, float %1520
  %1523 = add i32 %1449, %1370
  %1524 = add i32 %1470, %1372
  %1525 = icmp ult i32 %1523, 524288
  %1526 = sext i1 %1525 to i32
  %1527 = xor i32 %1526, %1523
  %1528 = shl i32 %1527, 9
  %1529 = and i32 %1528, 268434944
  %1530 = add nuw nsw i32 %1529, 1056964608
  %1531 = bitcast i32 %1530 to float
  %1532 = fmul fast float %1531, 2.000000e+00
  %1533 = fadd fast float %1532, -1.000000e+00
  %1534 = call float @dx.op.binary.f32(i32 36, float %1533, float %1531)  ; FMin(a,b)
  %1535 = fsub fast float -0.000000e+00, %1534
  %1536 = select i1 %1525, float %1535, float %1534
  %1537 = icmp ult i32 %1524, 524288
  %1538 = sext i1 %1537 to i32
  %1539 = xor i32 %1538, %1524
  %1540 = shl i32 %1539, 9
  %1541 = and i32 %1540, 268434944
  %1542 = add nuw nsw i32 %1541, 1056964608
  %1543 = bitcast i32 %1542 to float
  %1544 = fmul float %1543, 2.000000e+00
  %1545 = fadd float %1544, -1.000000e+00
  %1546 = call float @dx.op.binary.f32(i32 36, float %1545, float %1543), !dx.precise !39  ; FMin(a,b)
  %1547 = fsub float -0.000000e+00, %1546
  %1548 = select i1 %1537, float %1547, float %1546
  br label %1549

; <label>:1549                                    ; preds = %1468, %1466
  %1550 = phi float [ 0.000000e+00, %1466 ], [ %1536, %1468 ]
  %1551 = phi float [ 0.000000e+00, %1466 ], [ %1510, %1468 ]
  %1552 = phi float [ 0.000000e+00, %1466 ], [ %1484, %1468 ]
  %1553 = phi float [ 0.000000e+00, %1466 ], [ %1548, %1468 ]
  %1554 = phi float [ 0.000000e+00, %1466 ], [ %1522, %1468 ]
  %1555 = phi float [ 0.000000e+00, %1466 ], [ %1496, %1468 ]
  %1556 = lshr i32 %587, 15
  %1557 = and i32 %685, 1
  %1558 = and i32 %1557, %1556
  %1559 = icmp eq i32 %1558, 0
  %1560 = fmul float %401, %765
  %1561 = call float @dx.op.tertiary.f32(i32 46, float %766, float %405, float %1560), !dx.precise !39  ; FMad(a,b,c)
  %1562 = call float @dx.op.tertiary.f32(i32 46, float %767, float %409, float %1561), !dx.precise !39  ; FMad(a,b,c)
  %1563 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %597, float %1562), !dx.precise !39  ; FMad(a,b,c)
  %1564 = fmul float %402, %765
  %1565 = call float @dx.op.tertiary.f32(i32 46, float %766, float %406, float %1564), !dx.precise !39  ; FMad(a,b,c)
  %1566 = call float @dx.op.tertiary.f32(i32 46, float %767, float %410, float %1565), !dx.precise !39  ; FMad(a,b,c)
  %1567 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %598, float %1566), !dx.precise !39  ; FMad(a,b,c)
  %1568 = fmul float %403, %765
  %1569 = call float @dx.op.tertiary.f32(i32 46, float %766, float %407, float %1568), !dx.precise !39  ; FMad(a,b,c)
  %1570 = call float @dx.op.tertiary.f32(i32 46, float %767, float %411, float %1569), !dx.precise !39  ; FMad(a,b,c)
  %1571 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %599, float %1570), !dx.precise !39  ; FMad(a,b,c)
  br i1 %1559, label %2674, label %1572, !dx.controlflow.hints !43

; <label>:1572                                    ; preds = %1549
  %1573 = fmul fast float %765, %573
  %1574 = call float @dx.op.tertiary.f32(i32 46, float %766, float %576, float %1573)  ; FMad(a,b,c)
  %1575 = call float @dx.op.tertiary.f32(i32 46, float %767, float %579, float %1574)  ; FMad(a,b,c)
  %1576 = fadd fast float %1575, %606
  %1577 = fmul fast float %765, %574
  %1578 = call float @dx.op.tertiary.f32(i32 46, float %766, float %577, float %1577)  ; FMad(a,b,c)
  %1579 = call float @dx.op.tertiary.f32(i32 46, float %767, float %580, float %1578)  ; FMad(a,b,c)
  %1580 = fadd fast float %1579, %607
  %1581 = fmul fast float %765, %575
  %1582 = call float @dx.op.tertiary.f32(i32 46, float %766, float %578, float %1581)  ; FMad(a,b,c)
  %1583 = call float @dx.op.tertiary.f32(i32 46, float %767, float %581, float %1582)  ; FMad(a,b,c)
  %1584 = fadd fast float %1583, %608
  %1585 = and i32 %587, 32768
  %1586 = icmp eq i32 %1585, 0
  br i1 %1586, label %1730, label %1587, !dx.controlflow.hints !44

; <label>:1587                                    ; preds = %1572
  %1588 = fsub float %1571, %133
  %1589 = fsub float %1567, %132
  %1590 = fsub float %1563, %131
  %1591 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %1592 = extractvalue %dx.types.CBufRet.f32 %1591, 2
  %1593 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1594 = extractvalue %dx.types.CBufRet.f32 %1593, 3
  %1595 = fmul float %1592, %1594
  %1596 = fmul float %1595, -5.000000e-01
  %1597 = fmul float %1596, 0.000000e+00
  %1598 = fmul float %1590, 9.765625e-04
  %1599 = fmul float %1589, 9.765625e-04
  %1600 = fmul float %1588, 9.765625e-04
  %1601 = fmul float %127, 9.765625e-04
  %1602 = fmul float %128, 9.765625e-04
  %1603 = fmul float %129, 9.765625e-04
  %1604 = fadd float %1598, %1597
  %1605 = fadd float %1599, %1596
  %1606 = fadd float %1600, %1597
  %1607 = fadd float %1604, 5.000000e-01
  %1608 = fadd float %1605, 5.000000e-01
  %1609 = fadd float %1606, 5.000000e-01
  %1610 = fmul float %1601, 2.097152e+06
  %1611 = fmul float %1602, 2.097152e+06
  %1612 = fmul float %1603, 2.097152e+06
  %1613 = call float @dx.op.unary.f32(i32 22, float %1610), !dx.precise !39  ; Frc(value)
  %1614 = call float @dx.op.unary.f32(i32 22, float %1611), !dx.precise !39  ; Frc(value)
  %1615 = call float @dx.op.unary.f32(i32 22, float %1612), !dx.precise !39  ; Frc(value)
  %1616 = fadd float %1613, %1607
  %1617 = fadd float %1614, %1608
  %1618 = fadd float %1615, %1609
  %1619 = call float @dx.op.unary.f32(i32 22, float %1616), !dx.precise !39  ; Frc(value)
  %1620 = call float @dx.op.unary.f32(i32 22, float %1617), !dx.precise !39  ; Frc(value)
  %1621 = call float @dx.op.unary.f32(i32 22, float %1618), !dx.precise !39  ; Frc(value)
  %1622 = fmul float %1619, 2.000000e+00
  %1623 = fmul float %1620, 2.000000e+00
  %1624 = fmul float %1621, 2.000000e+00
  %1625 = fadd float %1622, -1.000000e+00
  %1626 = fadd float %1623, -1.000000e+00
  %1627 = fadd float %1624, -1.000000e+00
  %1628 = call float @dx.op.unary.f32(i32 6, float %1625), !dx.precise !39  ; FAbs(value)
  %1629 = call float @dx.op.unary.f32(i32 6, float %1626), !dx.precise !39  ; FAbs(value)
  %1630 = call float @dx.op.unary.f32(i32 6, float %1627), !dx.precise !39  ; FAbs(value)
  %1631 = fmul float %1628, 2.000000e+00
  %1632 = fmul float %1629, 2.000000e+00
  %1633 = fmul float %1630, 2.000000e+00
  %1634 = fsub float 3.000000e+00, %1631
  %1635 = fsub float 3.000000e+00, %1632
  %1636 = fsub float 3.000000e+00, %1633
  %1637 = fmul float %1628, %1634
  %1638 = fmul float %1629, %1635
  %1639 = fmul float %1630, %1636
  %1640 = fmul float %1628, %1637
  %1641 = fmul float %1629, %1638
  %1642 = fmul float %1630, %1639
  %1643 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %1640, float %1641, float %1642), !dx.precise !39  ; Dot3(ax,ay,az,bx,by,bz)
  %1644 = fmul float %1590, 0x3F747AE140000000
  %1645 = fmul float %1589, 0x3F747AE140000000
  %1646 = fmul float %1588, 0x3F747AE140000000
  %1647 = fmul float %127, 0x3F747AE140000000
  %1648 = fmul float %128, 0x3F747AE140000000
  %1649 = fmul float %129, 0x3F747AE140000000
  %1650 = fadd float %1644, %1596
  %1651 = fadd float %1645, %1596
  %1652 = fadd float %1646, %1596
  %1653 = fadd float %1650, 5.000000e-01
  %1654 = fadd float %1651, 5.000000e-01
  %1655 = fadd float %1652, 5.000000e-01
  %1656 = fmul float %1647, 2.097152e+06
  %1657 = fmul float %1648, 2.097152e+06
  %1658 = fmul float %1649, 2.097152e+06
  %1659 = call float @dx.op.unary.f32(i32 22, float %1656), !dx.precise !39  ; Frc(value)
  %1660 = call float @dx.op.unary.f32(i32 22, float %1657), !dx.precise !39  ; Frc(value)
  %1661 = call float @dx.op.unary.f32(i32 22, float %1658), !dx.precise !39  ; Frc(value)
  %1662 = fadd float %1653, %1659
  %1663 = fadd float %1654, %1660
  %1664 = fadd float %1655, %1661
  %1665 = call float @dx.op.unary.f32(i32 22, float %1662), !dx.precise !39  ; Frc(value)
  %1666 = call float @dx.op.unary.f32(i32 22, float %1663), !dx.precise !39  ; Frc(value)
  %1667 = call float @dx.op.unary.f32(i32 22, float %1664), !dx.precise !39  ; Frc(value)
  %1668 = fmul float %1665, 2.000000e+00
  %1669 = fmul float %1666, 2.000000e+00
  %1670 = fmul float %1667, 2.000000e+00
  %1671 = fadd float %1668, -1.000000e+00
  %1672 = fadd float %1669, -1.000000e+00
  %1673 = fadd float %1670, -1.000000e+00
  %1674 = call float @dx.op.unary.f32(i32 6, float %1671), !dx.precise !39  ; FAbs(value)
  %1675 = call float @dx.op.unary.f32(i32 6, float %1672), !dx.precise !39  ; FAbs(value)
  %1676 = call float @dx.op.unary.f32(i32 6, float %1673), !dx.precise !39  ; FAbs(value)
  %1677 = fmul float %1674, 2.000000e+00
  %1678 = fmul float %1675, 2.000000e+00
  %1679 = fmul float %1676, 2.000000e+00
  %1680 = fsub float 3.000000e+00, %1677
  %1681 = fsub float 3.000000e+00, %1678
  %1682 = fsub float 3.000000e+00, %1679
  %1683 = fmul float %1674, %1680
  %1684 = fmul float %1675, %1681
  %1685 = fmul float %1676, %1682
  %1686 = fmul float %1674, %1683
  %1687 = fmul float %1675, %1684
  %1688 = fmul float %1676, %1685
  %1689 = fmul float %1686, %1686
  %1690 = fmul float %1687, %1687
  %1691 = fadd float %1689, %1690
  %1692 = fmul float %1688, %1688
  %1693 = fadd float %1691, %1692
  %1694 = call float @dx.op.unary.f32(i32 24, float %1693), !dx.precise !39  ; Sqrt(value)
  %1695 = fadd float %1643, %1694
  %1696 = fmul float %1695, 0x401921FB60000000
  %1697 = call float @dx.op.unary.f32(i32 13, float %1696), !dx.precise !39  ; Sin(value)
  %1698 = call float @dx.op.unary.f32(i32 12, float %1696), !dx.precise !39  ; Cos(value)
  %1699 = fmul float %1698, 0.000000e+00
  %1700 = fmul float %1698, 1.000000e+01
  %1701 = fmul float %1697, 0.000000e+00
  %1702 = fmul float %1697, 1.000000e+01
  %1703 = fadd float %1701, %1699
  %1704 = fsub float %1699, %1702
  %1705 = fadd float %1701, %1700
  %1706 = fadd float %1703, 0.000000e+00
  %1707 = fadd float %1704, 0.000000e+00
  %1708 = fadd float %1705, -1.000000e+01
  %1709 = fsub float 1.000000e+00, %1555
  %1710 = fmul float %1709, %1706
  %1711 = fmul float %1709, %1707
  %1712 = fmul float %1709, %1708
  %1713 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1714 = extractvalue %dx.types.CBufRet.f32 %1713, 0
  %1715 = fmul float %1714, %1710
  %1716 = fmul float %1714, %1711
  %1717 = fmul float %1714, %1712
  %1718 = fadd float %1715, 0.000000e+00
  %1719 = fadd float %1716, 0.000000e+00
  %1720 = fadd float %1717, 0.000000e+00
  %1721 = fcmp ugt float %590, 0.000000e+00
  br i1 %1721, label %1722, label %1730

; <label>:1722                                    ; preds = %1587
  %1723 = fsub float -0.000000e+00, %590
  %1724 = call float @dx.op.binary.f32(i32 35, float %1718, float %1723), !dx.precise !39  ; FMax(a,b)
  %1725 = call float @dx.op.binary.f32(i32 35, float %1719, float %1723), !dx.precise !39  ; FMax(a,b)
  %1726 = call float @dx.op.binary.f32(i32 35, float %1720, float %1723), !dx.precise !39  ; FMax(a,b)
  %1727 = call float @dx.op.binary.f32(i32 36, float %1724, float %590), !dx.precise !39  ; FMin(a,b)
  %1728 = call float @dx.op.binary.f32(i32 36, float %1725, float %590), !dx.precise !39  ; FMin(a,b)
  %1729 = call float @dx.op.binary.f32(i32 36, float %1726, float %590), !dx.precise !39  ; FMin(a,b)
  br label %1730

; <label>:1730                                    ; preds = %1722, %1587, %1572
  %1731 = phi float [ 0.000000e+00, %1572 ], [ %1727, %1722 ], [ %1718, %1587 ]
  %1732 = phi float [ 0.000000e+00, %1572 ], [ %1728, %1722 ], [ %1719, %1587 ]
  %1733 = phi float [ 0.000000e+00, %1572 ], [ %1729, %1722 ], [ %1720, %1587 ]
  %1734 = and i32 %587, 1073741824
  %1735 = icmp eq i32 %1734, 0
  br i1 %1735, label %1758, label %1736, !dx.controlflow.hints !45

; <label>:1736                                    ; preds = %1730
  %1737 = fadd float %1563, %1731
  %1738 = fadd float %1567, %1732
  %1739 = fadd float %1571, %1733
  %1740 = fmul float %103, %1737
  %1741 = call float @dx.op.tertiary.f32(i32 46, float %1738, float %107, float %1740), !dx.precise !39  ; FMad(a,b,c)
  %1742 = call float @dx.op.tertiary.f32(i32 46, float %1739, float %111, float %1741), !dx.precise !39  ; FMad(a,b,c)
  %1743 = fmul float %104, %1737
  %1744 = call float @dx.op.tertiary.f32(i32 46, float %1738, float %108, float %1743), !dx.precise !39  ; FMad(a,b,c)
  %1745 = call float @dx.op.tertiary.f32(i32 46, float %1739, float %112, float %1744), !dx.precise !39  ; FMad(a,b,c)
  %1746 = fmul float %105, %1737
  %1747 = call float @dx.op.tertiary.f32(i32 46, float %1738, float %109, float %1746), !dx.precise !39  ; FMad(a,b,c)
  %1748 = call float @dx.op.tertiary.f32(i32 46, float %1739, float %113, float %1747), !dx.precise !39  ; FMad(a,b,c)
  %1749 = fsub float %1742, %1563
  %1750 = fsub float %1745, %1567
  %1751 = fsub float %1748, %1571
  %1752 = fsub float %1749, %1731
  %1753 = fsub float %1750, %1732
  %1754 = fsub float %1751, %1733
  %1755 = fadd float %1731, %1752
  %1756 = fadd float %1732, %1753
  %1757 = fadd float %1733, %1754
  br label %1758

; <label>:1758                                    ; preds = %1736, %1730
  %1759 = phi float [ %1755, %1736 ], [ %1731, %1730 ]
  %1760 = phi float [ %1756, %1736 ], [ %1732, %1730 ]
  %1761 = phi float [ %1757, %1736 ], [ %1733, %1730 ]
  br i1 %1586, label %1884, label %1762, !dx.controlflow.hints !46

; <label>:1762                                    ; preds = %1758
  %1763 = fsub fast float 1.000000e+00, %1555
  %1764 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %1765 = extractvalue %dx.types.CBufRet.f32 %1764, 2
  %1766 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1767 = extractvalue %dx.types.CBufRet.f32 %1766, 3
  %1768 = fmul fast float %1765, -5.000000e-01
  %1769 = fmul fast float %1768, %1767
  %1770 = fsub fast float %1576, %135
  %1771 = fsub fast float %1580, %136
  %1772 = fsub fast float %1584, %137
  %1773 = fmul fast float %1770, 9.765625e-04
  %1774 = fmul fast float %1771, 9.765625e-04
  %1775 = fmul fast float %1772, 9.765625e-04
  %1776 = fadd fast float %1773, 5.000000e-01
  %1777 = fadd fast float %1775, 5.000000e-01
  %1778 = fmul fast float %127, 2.048000e+03
  %1779 = fmul fast float %128, 2.048000e+03
  %1780 = fmul fast float %129, 2.048000e+03
  %1781 = call float @dx.op.unary.f32(i32 22, float %1778)  ; Frc(value)
  %1782 = call float @dx.op.unary.f32(i32 22, float %1779)  ; Frc(value)
  %1783 = call float @dx.op.unary.f32(i32 22, float %1780)  ; Frc(value)
  %1784 = fadd fast float %1776, %1781
  %1785 = fadd fast float %1774, 5.000000e-01
  %1786 = fadd fast float %1785, %1782
  %1787 = fadd fast float %1786, %1769
  %1788 = fadd fast float %1777, %1783
  %1789 = call float @dx.op.unary.f32(i32 22, float %1784)  ; Frc(value)
  %1790 = call float @dx.op.unary.f32(i32 22, float %1787)  ; Frc(value)
  %1791 = call float @dx.op.unary.f32(i32 22, float %1788)  ; Frc(value)
  %1792 = fmul fast float %1789, 2.000000e+00
  %1793 = fmul fast float %1790, 2.000000e+00
  %1794 = fmul fast float %1791, 2.000000e+00
  %1795 = fadd fast float %1792, -1.000000e+00
  %1796 = fadd fast float %1793, -1.000000e+00
  %1797 = fadd fast float %1794, -1.000000e+00
  %1798 = call float @dx.op.unary.f32(i32 6, float %1795)  ; FAbs(value)
  %1799 = call float @dx.op.unary.f32(i32 6, float %1796)  ; FAbs(value)
  %1800 = call float @dx.op.unary.f32(i32 6, float %1797)  ; FAbs(value)
  %1801 = fmul fast float %1798, 2.000000e+00
  %1802 = fmul fast float %1799, 2.000000e+00
  %1803 = fmul fast float %1800, 2.000000e+00
  %1804 = fsub fast float 3.000000e+00, %1801
  %1805 = fsub fast float 3.000000e+00, %1802
  %1806 = fsub fast float 3.000000e+00, %1803
  %1807 = fmul fast float %1798, %1798
  %1808 = fmul fast float %1807, %1804
  %1809 = fmul fast float %1799, %1799
  %1810 = fmul fast float %1809, %1805
  %1811 = fmul fast float %1800, %1800
  %1812 = fmul fast float %1811, %1806
  %1813 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %1808, float %1810, float %1812)  ; Dot3(ax,ay,az,bx,by,bz)
  %1814 = fmul fast float %1770, 0x3F747AE140000000
  %1815 = fmul fast float %1771, 0x3F747AE140000000
  %1816 = fmul fast float %1772, 0x3F747AE140000000
  %1817 = fmul fast float %127, 0x40C47AE140000000
  %1818 = fmul fast float %128, 0x40C47AE140000000
  %1819 = fmul fast float %129, 0x40C47AE140000000
  %1820 = call float @dx.op.unary.f32(i32 22, float %1817)  ; Frc(value)
  %1821 = call float @dx.op.unary.f32(i32 22, float %1818)  ; Frc(value)
  %1822 = call float @dx.op.unary.f32(i32 22, float %1819)  ; Frc(value)
  %1823 = fadd fast float %1814, 5.000000e-01
  %1824 = fadd fast float %1823, %1769
  %1825 = fadd fast float %1824, %1820
  %1826 = fadd fast float %1815, 5.000000e-01
  %1827 = fadd fast float %1826, %1769
  %1828 = fadd fast float %1827, %1821
  %1829 = fadd fast float %1816, 5.000000e-01
  %1830 = fadd fast float %1829, %1769
  %1831 = fadd fast float %1830, %1822
  %1832 = call float @dx.op.unary.f32(i32 22, float %1825)  ; Frc(value)
  %1833 = call float @dx.op.unary.f32(i32 22, float %1828)  ; Frc(value)
  %1834 = call float @dx.op.unary.f32(i32 22, float %1831)  ; Frc(value)
  %1835 = fmul fast float %1832, 2.000000e+00
  %1836 = fmul fast float %1833, 2.000000e+00
  %1837 = fmul fast float %1834, 2.000000e+00
  %1838 = fadd fast float %1835, -1.000000e+00
  %1839 = fadd fast float %1836, -1.000000e+00
  %1840 = fadd fast float %1837, -1.000000e+00
  %1841 = call float @dx.op.unary.f32(i32 6, float %1838)  ; FAbs(value)
  %1842 = call float @dx.op.unary.f32(i32 6, float %1839)  ; FAbs(value)
  %1843 = call float @dx.op.unary.f32(i32 6, float %1840)  ; FAbs(value)
  %1844 = fmul fast float %1841, 2.000000e+00
  %1845 = fmul fast float %1842, 2.000000e+00
  %1846 = fmul fast float %1843, 2.000000e+00
  %1847 = fsub fast float 3.000000e+00, %1844
  %1848 = fsub fast float 3.000000e+00, %1845
  %1849 = fsub fast float 3.000000e+00, %1846
  %1850 = fmul fast float %1841, %1841
  %1851 = fmul fast float %1850, %1847
  %1852 = fmul fast float %1842, %1842
  %1853 = fmul fast float %1852, %1848
  %1854 = fmul fast float %1843, %1843
  %1855 = fmul fast float %1854, %1849
  %1856 = fmul fast float %1851, %1851
  %1857 = fmul fast float %1853, %1853
  %1858 = fadd fast float %1857, %1856
  %1859 = fmul fast float %1855, %1855
  %1860 = fadd fast float %1858, %1859
  %1861 = call float @dx.op.unary.f32(i32 24, float %1860)  ; Sqrt(value)
  %1862 = fadd fast float %1861, %1813
  %1863 = fmul fast float %1862, 0x401921FB60000000
  %1864 = call float @dx.op.unary.f32(i32 13, float %1863)  ; Sin(value)
  %1865 = call float @dx.op.unary.f32(i32 12, float %1863)  ; Cos(value)
  %1866 = fmul fast float %1865, 1.000000e+01
  %1867 = fadd fast float %1866, -1.000000e+01
  %1868 = fmul fast float %1867, %1763
  %1869 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1870 = extractvalue %dx.types.CBufRet.f32 %1869, 0
  %1871 = fmul fast float %1763, -1.000000e+01
  %1872 = fmul fast float %1871, %1864
  %1873 = fmul fast float %1872, %1870
  %1874 = fmul fast float %1868, %1870
  %1875 = fcmp fast ugt float %590, 0.000000e+00
  br i1 %1875, label %1876, label %1884

; <label>:1876                                    ; preds = %1762
  %1877 = fsub fast float -0.000000e+00, %590
  %1878 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1877)  ; FMax(a,b)
  %1879 = call float @dx.op.binary.f32(i32 35, float %1873, float %1877)  ; FMax(a,b)
  %1880 = call float @dx.op.binary.f32(i32 35, float %1874, float %1877)  ; FMax(a,b)
  %1881 = call float @dx.op.binary.f32(i32 36, float %1878, float %590)  ; FMin(a,b)
  %1882 = call float @dx.op.binary.f32(i32 36, float %1879, float %590)  ; FMin(a,b)
  %1883 = call float @dx.op.binary.f32(i32 36, float %1880, float %590)  ; FMin(a,b)
  br label %1884

; <label>:1884                                    ; preds = %1876, %1762, %1758
  %1885 = phi float [ 0.000000e+00, %1758 ], [ %1881, %1876 ], [ 0.000000e+00, %1762 ]
  %1886 = phi float [ 0.000000e+00, %1758 ], [ %1882, %1876 ], [ %1873, %1762 ]
  %1887 = phi float [ 0.000000e+00, %1758 ], [ %1883, %1876 ], [ %1874, %1762 ]
  br i1 %1735, label %1904, label %1888, !dx.controlflow.hints !47

; <label>:1888                                    ; preds = %1884
  %1889 = fadd fast float %1885, %1576
  %1890 = fadd fast float %1886, %1580
  %1891 = fadd fast float %1887, %1584
  %1892 = fmul fast float %1889, %115
  %1893 = call float @dx.op.tertiary.f32(i32 46, float %1890, float %119, float %1892)  ; FMad(a,b,c)
  %1894 = call float @dx.op.tertiary.f32(i32 46, float %1891, float %123, float %1893)  ; FMad(a,b,c)
  %1895 = fmul fast float %1889, %116
  %1896 = call float @dx.op.tertiary.f32(i32 46, float %1890, float %120, float %1895)  ; FMad(a,b,c)
  %1897 = call float @dx.op.tertiary.f32(i32 46, float %1891, float %124, float %1896)  ; FMad(a,b,c)
  %1898 = fmul fast float %1889, %117
  %1899 = call float @dx.op.tertiary.f32(i32 46, float %1890, float %121, float %1898)  ; FMad(a,b,c)
  %1900 = call float @dx.op.tertiary.f32(i32 46, float %1891, float %125, float %1899)  ; FMad(a,b,c)
  %1901 = fsub fast float %1894, %1576
  %1902 = fsub fast float %1897, %1580
  %1903 = fsub fast float %1900, %1584
  br label %1904

; <label>:1904                                    ; preds = %1888, %1884
  %1905 = phi float [ %1901, %1888 ], [ %1885, %1884 ]
  %1906 = phi float [ %1902, %1888 ], [ %1886, %1884 ]
  %1907 = phi float [ %1903, %1888 ], [ %1887, %1884 ]
  %1908 = fmul fast float %1905, %689
  %1909 = call float @dx.op.tertiary.f32(i32 46, float %1906, float %690, float %1908)  ; FMad(a,b,c)
  %1910 = call float @dx.op.tertiary.f32(i32 46, float %1907, float %691, float %1909)  ; FMad(a,b,c)
  %1911 = fmul fast float %1905, %692
  %1912 = call float @dx.op.tertiary.f32(i32 46, float %1906, float %693, float %1911)  ; FMad(a,b,c)
  %1913 = call float @dx.op.tertiary.f32(i32 46, float %1907, float %694, float %1912)  ; FMad(a,b,c)
  %1914 = fmul fast float %1905, %695
  %1915 = call float @dx.op.tertiary.f32(i32 46, float %1906, float %696, float %1914)  ; FMad(a,b,c)
  %1916 = call float @dx.op.tertiary.f32(i32 46, float %1907, float %697, float %1915)  ; FMad(a,b,c)
  %1917 = fadd fast float %1910, %765
  %1918 = fadd fast float %1913, %766
  %1919 = fadd fast float %1916, %767
  %1920 = fadd float %1563, %1759
  %1921 = fadd float %1567, %1760
  %1922 = fadd float %1571, %1761
  %1923 = fmul float %160, %1920
  %1924 = call float @dx.op.tertiary.f32(i32 46, float %1921, float %164, float %1923), !dx.precise !39  ; FMad(a,b,c)
  %1925 = call float @dx.op.tertiary.f32(i32 46, float %1922, float %168, float %1924), !dx.precise !39  ; FMad(a,b,c)
  %1926 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %172, float %1925), !dx.precise !39  ; FMad(a,b,c)
  %1927 = fmul float %161, %1920
  %1928 = call float @dx.op.tertiary.f32(i32 46, float %1921, float %165, float %1927), !dx.precise !39  ; FMad(a,b,c)
  %1929 = call float @dx.op.tertiary.f32(i32 46, float %1922, float %169, float %1928), !dx.precise !39  ; FMad(a,b,c)
  %1930 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %173, float %1929), !dx.precise !39  ; FMad(a,b,c)
  %1931 = fmul float %162, %1920
  %1932 = call float @dx.op.tertiary.f32(i32 46, float %1921, float %166, float %1931), !dx.precise !39  ; FMad(a,b,c)
  %1933 = call float @dx.op.tertiary.f32(i32 46, float %1922, float %170, float %1932), !dx.precise !39  ; FMad(a,b,c)
  %1934 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %174, float %1933), !dx.precise !39  ; FMad(a,b,c)
  %1935 = fmul float %401, %820
  %1936 = call float @dx.op.tertiary.f32(i32 46, float %821, float %405, float %1935), !dx.precise !39  ; FMad(a,b,c)
  %1937 = call float @dx.op.tertiary.f32(i32 46, float %822, float %409, float %1936), !dx.precise !39  ; FMad(a,b,c)
  %1938 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %597, float %1937), !dx.precise !39  ; FMad(a,b,c)
  %1939 = fmul float %402, %820
  %1940 = call float @dx.op.tertiary.f32(i32 46, float %821, float %406, float %1939), !dx.precise !39  ; FMad(a,b,c)
  %1941 = call float @dx.op.tertiary.f32(i32 46, float %822, float %410, float %1940), !dx.precise !39  ; FMad(a,b,c)
  %1942 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %598, float %1941), !dx.precise !39  ; FMad(a,b,c)
  %1943 = fmul float %403, %820
  %1944 = call float @dx.op.tertiary.f32(i32 46, float %821, float %407, float %1943), !dx.precise !39  ; FMad(a,b,c)
  %1945 = call float @dx.op.tertiary.f32(i32 46, float %822, float %411, float %1944), !dx.precise !39  ; FMad(a,b,c)
  %1946 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %599, float %1945), !dx.precise !39  ; FMad(a,b,c)
  %1947 = fmul fast float %820, %573
  %1948 = call float @dx.op.tertiary.f32(i32 46, float %821, float %576, float %1947)  ; FMad(a,b,c)
  %1949 = call float @dx.op.tertiary.f32(i32 46, float %822, float %579, float %1948)  ; FMad(a,b,c)
  %1950 = fadd fast float %1949, %606
  %1951 = fmul fast float %820, %574
  %1952 = call float @dx.op.tertiary.f32(i32 46, float %821, float %577, float %1951)  ; FMad(a,b,c)
  %1953 = call float @dx.op.tertiary.f32(i32 46, float %822, float %580, float %1952)  ; FMad(a,b,c)
  %1954 = fadd fast float %1953, %607
  %1955 = fmul fast float %820, %575
  %1956 = call float @dx.op.tertiary.f32(i32 46, float %821, float %578, float %1955)  ; FMad(a,b,c)
  %1957 = call float @dx.op.tertiary.f32(i32 46, float %822, float %581, float %1956)  ; FMad(a,b,c)
  %1958 = fadd fast float %1957, %608
  br i1 %1586, label %2102, label %1959, !dx.controlflow.hints !44

; <label>:1959                                    ; preds = %1904
  %1960 = fsub float %1946, %133
  %1961 = fsub float %1942, %132
  %1962 = fsub float %1938, %131
  %1963 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %1964 = extractvalue %dx.types.CBufRet.f32 %1963, 2
  %1965 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1966 = extractvalue %dx.types.CBufRet.f32 %1965, 3
  %1967 = fmul float %1964, %1966
  %1968 = fmul float %1967, -5.000000e-01
  %1969 = fmul float %1968, 0.000000e+00
  %1970 = fmul float %1962, 9.765625e-04
  %1971 = fmul float %1961, 9.765625e-04
  %1972 = fmul float %1960, 9.765625e-04
  %1973 = fmul float %127, 9.765625e-04
  %1974 = fmul float %128, 9.765625e-04
  %1975 = fmul float %129, 9.765625e-04
  %1976 = fadd float %1970, %1969
  %1977 = fadd float %1971, %1968
  %1978 = fadd float %1972, %1969
  %1979 = fadd float %1976, 5.000000e-01
  %1980 = fadd float %1977, 5.000000e-01
  %1981 = fadd float %1978, 5.000000e-01
  %1982 = fmul float %1973, 2.097152e+06
  %1983 = fmul float %1974, 2.097152e+06
  %1984 = fmul float %1975, 2.097152e+06
  %1985 = call float @dx.op.unary.f32(i32 22, float %1982), !dx.precise !39  ; Frc(value)
  %1986 = call float @dx.op.unary.f32(i32 22, float %1983), !dx.precise !39  ; Frc(value)
  %1987 = call float @dx.op.unary.f32(i32 22, float %1984), !dx.precise !39  ; Frc(value)
  %1988 = fadd float %1985, %1979
  %1989 = fadd float %1986, %1980
  %1990 = fadd float %1987, %1981
  %1991 = call float @dx.op.unary.f32(i32 22, float %1988), !dx.precise !39  ; Frc(value)
  %1992 = call float @dx.op.unary.f32(i32 22, float %1989), !dx.precise !39  ; Frc(value)
  %1993 = call float @dx.op.unary.f32(i32 22, float %1990), !dx.precise !39  ; Frc(value)
  %1994 = fmul float %1991, 2.000000e+00
  %1995 = fmul float %1992, 2.000000e+00
  %1996 = fmul float %1993, 2.000000e+00
  %1997 = fadd float %1994, -1.000000e+00
  %1998 = fadd float %1995, -1.000000e+00
  %1999 = fadd float %1996, -1.000000e+00
  %2000 = call float @dx.op.unary.f32(i32 6, float %1997), !dx.precise !39  ; FAbs(value)
  %2001 = call float @dx.op.unary.f32(i32 6, float %1998), !dx.precise !39  ; FAbs(value)
  %2002 = call float @dx.op.unary.f32(i32 6, float %1999), !dx.precise !39  ; FAbs(value)
  %2003 = fmul float %2000, 2.000000e+00
  %2004 = fmul float %2001, 2.000000e+00
  %2005 = fmul float %2002, 2.000000e+00
  %2006 = fsub float 3.000000e+00, %2003
  %2007 = fsub float 3.000000e+00, %2004
  %2008 = fsub float 3.000000e+00, %2005
  %2009 = fmul float %2000, %2006
  %2010 = fmul float %2001, %2007
  %2011 = fmul float %2002, %2008
  %2012 = fmul float %2000, %2009
  %2013 = fmul float %2001, %2010
  %2014 = fmul float %2002, %2011
  %2015 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %2012, float %2013, float %2014), !dx.precise !39  ; Dot3(ax,ay,az,bx,by,bz)
  %2016 = fmul float %1962, 0x3F747AE140000000
  %2017 = fmul float %1961, 0x3F747AE140000000
  %2018 = fmul float %1960, 0x3F747AE140000000
  %2019 = fmul float %127, 0x3F747AE140000000
  %2020 = fmul float %128, 0x3F747AE140000000
  %2021 = fmul float %129, 0x3F747AE140000000
  %2022 = fadd float %2016, %1968
  %2023 = fadd float %2017, %1968
  %2024 = fadd float %2018, %1968
  %2025 = fadd float %2022, 5.000000e-01
  %2026 = fadd float %2023, 5.000000e-01
  %2027 = fadd float %2024, 5.000000e-01
  %2028 = fmul float %2019, 2.097152e+06
  %2029 = fmul float %2020, 2.097152e+06
  %2030 = fmul float %2021, 2.097152e+06
  %2031 = call float @dx.op.unary.f32(i32 22, float %2028), !dx.precise !39  ; Frc(value)
  %2032 = call float @dx.op.unary.f32(i32 22, float %2029), !dx.precise !39  ; Frc(value)
  %2033 = call float @dx.op.unary.f32(i32 22, float %2030), !dx.precise !39  ; Frc(value)
  %2034 = fadd float %2025, %2031
  %2035 = fadd float %2026, %2032
  %2036 = fadd float %2027, %2033
  %2037 = call float @dx.op.unary.f32(i32 22, float %2034), !dx.precise !39  ; Frc(value)
  %2038 = call float @dx.op.unary.f32(i32 22, float %2035), !dx.precise !39  ; Frc(value)
  %2039 = call float @dx.op.unary.f32(i32 22, float %2036), !dx.precise !39  ; Frc(value)
  %2040 = fmul float %2037, 2.000000e+00
  %2041 = fmul float %2038, 2.000000e+00
  %2042 = fmul float %2039, 2.000000e+00
  %2043 = fadd float %2040, -1.000000e+00
  %2044 = fadd float %2041, -1.000000e+00
  %2045 = fadd float %2042, -1.000000e+00
  %2046 = call float @dx.op.unary.f32(i32 6, float %2043), !dx.precise !39  ; FAbs(value)
  %2047 = call float @dx.op.unary.f32(i32 6, float %2044), !dx.precise !39  ; FAbs(value)
  %2048 = call float @dx.op.unary.f32(i32 6, float %2045), !dx.precise !39  ; FAbs(value)
  %2049 = fmul float %2046, 2.000000e+00
  %2050 = fmul float %2047, 2.000000e+00
  %2051 = fmul float %2048, 2.000000e+00
  %2052 = fsub float 3.000000e+00, %2049
  %2053 = fsub float 3.000000e+00, %2050
  %2054 = fsub float 3.000000e+00, %2051
  %2055 = fmul float %2046, %2052
  %2056 = fmul float %2047, %2053
  %2057 = fmul float %2048, %2054
  %2058 = fmul float %2046, %2055
  %2059 = fmul float %2047, %2056
  %2060 = fmul float %2048, %2057
  %2061 = fmul float %2058, %2058
  %2062 = fmul float %2059, %2059
  %2063 = fadd float %2061, %2062
  %2064 = fmul float %2060, %2060
  %2065 = fadd float %2063, %2064
  %2066 = call float @dx.op.unary.f32(i32 24, float %2065), !dx.precise !39  ; Sqrt(value)
  %2067 = fadd float %2015, %2066
  %2068 = fmul float %2067, 0x401921FB60000000
  %2069 = call float @dx.op.unary.f32(i32 13, float %2068), !dx.precise !39  ; Sin(value)
  %2070 = call float @dx.op.unary.f32(i32 12, float %2068), !dx.precise !39  ; Cos(value)
  %2071 = fmul float %2070, 0.000000e+00
  %2072 = fmul float %2070, 1.000000e+01
  %2073 = fmul float %2069, 0.000000e+00
  %2074 = fmul float %2069, 1.000000e+01
  %2075 = fadd float %2073, %2071
  %2076 = fsub float %2071, %2074
  %2077 = fadd float %2073, %2072
  %2078 = fadd float %2075, 0.000000e+00
  %2079 = fadd float %2076, 0.000000e+00
  %2080 = fadd float %2077, -1.000000e+01
  %2081 = fsub float 1.000000e+00, %1554
  %2082 = fmul float %2081, %2078
  %2083 = fmul float %2081, %2079
  %2084 = fmul float %2081, %2080
  %2085 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2086 = extractvalue %dx.types.CBufRet.f32 %2085, 0
  %2087 = fmul float %2086, %2082
  %2088 = fmul float %2086, %2083
  %2089 = fmul float %2086, %2084
  %2090 = fadd float %2087, 0.000000e+00
  %2091 = fadd float %2088, 0.000000e+00
  %2092 = fadd float %2089, 0.000000e+00
  %2093 = fcmp ugt float %590, 0.000000e+00
  br i1 %2093, label %2094, label %2102

; <label>:2094                                    ; preds = %1959
  %2095 = fsub float -0.000000e+00, %590
  %2096 = call float @dx.op.binary.f32(i32 35, float %2090, float %2095), !dx.precise !39  ; FMax(a,b)
  %2097 = call float @dx.op.binary.f32(i32 35, float %2091, float %2095), !dx.precise !39  ; FMax(a,b)
  %2098 = call float @dx.op.binary.f32(i32 35, float %2092, float %2095), !dx.precise !39  ; FMax(a,b)
  %2099 = call float @dx.op.binary.f32(i32 36, float %2096, float %590), !dx.precise !39  ; FMin(a,b)
  %2100 = call float @dx.op.binary.f32(i32 36, float %2097, float %590), !dx.precise !39  ; FMin(a,b)
  %2101 = call float @dx.op.binary.f32(i32 36, float %2098, float %590), !dx.precise !39  ; FMin(a,b)
  br label %2102

; <label>:2102                                    ; preds = %2094, %1959, %1904
  %2103 = phi float [ 0.000000e+00, %1904 ], [ %2099, %2094 ], [ %2090, %1959 ]
  %2104 = phi float [ 0.000000e+00, %1904 ], [ %2100, %2094 ], [ %2091, %1959 ]
  %2105 = phi float [ 0.000000e+00, %1904 ], [ %2101, %2094 ], [ %2092, %1959 ]
  br i1 %1735, label %2128, label %2106, !dx.controlflow.hints !45

; <label>:2106                                    ; preds = %2102
  %2107 = fadd float %1938, %2103
  %2108 = fadd float %1942, %2104
  %2109 = fadd float %1946, %2105
  %2110 = fmul float %103, %2107
  %2111 = call float @dx.op.tertiary.f32(i32 46, float %2108, float %107, float %2110), !dx.precise !39  ; FMad(a,b,c)
  %2112 = call float @dx.op.tertiary.f32(i32 46, float %2109, float %111, float %2111), !dx.precise !39  ; FMad(a,b,c)
  %2113 = fmul float %104, %2107
  %2114 = call float @dx.op.tertiary.f32(i32 46, float %2108, float %108, float %2113), !dx.precise !39  ; FMad(a,b,c)
  %2115 = call float @dx.op.tertiary.f32(i32 46, float %2109, float %112, float %2114), !dx.precise !39  ; FMad(a,b,c)
  %2116 = fmul float %105, %2107
  %2117 = call float @dx.op.tertiary.f32(i32 46, float %2108, float %109, float %2116), !dx.precise !39  ; FMad(a,b,c)
  %2118 = call float @dx.op.tertiary.f32(i32 46, float %2109, float %113, float %2117), !dx.precise !39  ; FMad(a,b,c)
  %2119 = fsub float %2112, %1938
  %2120 = fsub float %2115, %1942
  %2121 = fsub float %2118, %1946
  %2122 = fsub float %2119, %2103
  %2123 = fsub float %2120, %2104
  %2124 = fsub float %2121, %2105
  %2125 = fadd float %2103, %2122
  %2126 = fadd float %2104, %2123
  %2127 = fadd float %2105, %2124
  br label %2128

; <label>:2128                                    ; preds = %2106, %2102
  %2129 = phi float [ %2125, %2106 ], [ %2103, %2102 ]
  %2130 = phi float [ %2126, %2106 ], [ %2104, %2102 ]
  %2131 = phi float [ %2127, %2106 ], [ %2105, %2102 ]
  br i1 %1586, label %2254, label %2132, !dx.controlflow.hints !46

; <label>:2132                                    ; preds = %2128
  %2133 = fsub fast float 1.000000e+00, %1554
  %2134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2135 = extractvalue %dx.types.CBufRet.f32 %2134, 2
  %2136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2137 = extractvalue %dx.types.CBufRet.f32 %2136, 3
  %2138 = fmul fast float %2135, -5.000000e-01
  %2139 = fmul fast float %2138, %2137
  %2140 = fsub fast float %1950, %135
  %2141 = fsub fast float %1954, %136
  %2142 = fsub fast float %1958, %137
  %2143 = fmul fast float %2140, 9.765625e-04
  %2144 = fmul fast float %2141, 9.765625e-04
  %2145 = fmul fast float %2142, 9.765625e-04
  %2146 = fadd fast float %2143, 5.000000e-01
  %2147 = fadd fast float %2145, 5.000000e-01
  %2148 = fmul fast float %127, 2.048000e+03
  %2149 = fmul fast float %128, 2.048000e+03
  %2150 = fmul fast float %129, 2.048000e+03
  %2151 = call float @dx.op.unary.f32(i32 22, float %2148)  ; Frc(value)
  %2152 = call float @dx.op.unary.f32(i32 22, float %2149)  ; Frc(value)
  %2153 = call float @dx.op.unary.f32(i32 22, float %2150)  ; Frc(value)
  %2154 = fadd fast float %2146, %2151
  %2155 = fadd fast float %2144, 5.000000e-01
  %2156 = fadd fast float %2155, %2152
  %2157 = fadd fast float %2156, %2139
  %2158 = fadd fast float %2147, %2153
  %2159 = call float @dx.op.unary.f32(i32 22, float %2154)  ; Frc(value)
  %2160 = call float @dx.op.unary.f32(i32 22, float %2157)  ; Frc(value)
  %2161 = call float @dx.op.unary.f32(i32 22, float %2158)  ; Frc(value)
  %2162 = fmul fast float %2159, 2.000000e+00
  %2163 = fmul fast float %2160, 2.000000e+00
  %2164 = fmul fast float %2161, 2.000000e+00
  %2165 = fadd fast float %2162, -1.000000e+00
  %2166 = fadd fast float %2163, -1.000000e+00
  %2167 = fadd fast float %2164, -1.000000e+00
  %2168 = call float @dx.op.unary.f32(i32 6, float %2165)  ; FAbs(value)
  %2169 = call float @dx.op.unary.f32(i32 6, float %2166)  ; FAbs(value)
  %2170 = call float @dx.op.unary.f32(i32 6, float %2167)  ; FAbs(value)
  %2171 = fmul fast float %2168, 2.000000e+00
  %2172 = fmul fast float %2169, 2.000000e+00
  %2173 = fmul fast float %2170, 2.000000e+00
  %2174 = fsub fast float 3.000000e+00, %2171
  %2175 = fsub fast float 3.000000e+00, %2172
  %2176 = fsub fast float 3.000000e+00, %2173
  %2177 = fmul fast float %2168, %2168
  %2178 = fmul fast float %2177, %2174
  %2179 = fmul fast float %2169, %2169
  %2180 = fmul fast float %2179, %2175
  %2181 = fmul fast float %2170, %2170
  %2182 = fmul fast float %2181, %2176
  %2183 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %2178, float %2180, float %2182)  ; Dot3(ax,ay,az,bx,by,bz)
  %2184 = fmul fast float %2140, 0x3F747AE140000000
  %2185 = fmul fast float %2141, 0x3F747AE140000000
  %2186 = fmul fast float %2142, 0x3F747AE140000000
  %2187 = fmul fast float %127, 0x40C47AE140000000
  %2188 = fmul fast float %128, 0x40C47AE140000000
  %2189 = fmul fast float %129, 0x40C47AE140000000
  %2190 = call float @dx.op.unary.f32(i32 22, float %2187)  ; Frc(value)
  %2191 = call float @dx.op.unary.f32(i32 22, float %2188)  ; Frc(value)
  %2192 = call float @dx.op.unary.f32(i32 22, float %2189)  ; Frc(value)
  %2193 = fadd fast float %2184, 5.000000e-01
  %2194 = fadd fast float %2193, %2139
  %2195 = fadd fast float %2194, %2190
  %2196 = fadd fast float %2185, 5.000000e-01
  %2197 = fadd fast float %2196, %2139
  %2198 = fadd fast float %2197, %2191
  %2199 = fadd fast float %2186, 5.000000e-01
  %2200 = fadd fast float %2199, %2139
  %2201 = fadd fast float %2200, %2192
  %2202 = call float @dx.op.unary.f32(i32 22, float %2195)  ; Frc(value)
  %2203 = call float @dx.op.unary.f32(i32 22, float %2198)  ; Frc(value)
  %2204 = call float @dx.op.unary.f32(i32 22, float %2201)  ; Frc(value)
  %2205 = fmul fast float %2202, 2.000000e+00
  %2206 = fmul fast float %2203, 2.000000e+00
  %2207 = fmul fast float %2204, 2.000000e+00
  %2208 = fadd fast float %2205, -1.000000e+00
  %2209 = fadd fast float %2206, -1.000000e+00
  %2210 = fadd fast float %2207, -1.000000e+00
  %2211 = call float @dx.op.unary.f32(i32 6, float %2208)  ; FAbs(value)
  %2212 = call float @dx.op.unary.f32(i32 6, float %2209)  ; FAbs(value)
  %2213 = call float @dx.op.unary.f32(i32 6, float %2210)  ; FAbs(value)
  %2214 = fmul fast float %2211, 2.000000e+00
  %2215 = fmul fast float %2212, 2.000000e+00
  %2216 = fmul fast float %2213, 2.000000e+00
  %2217 = fsub fast float 3.000000e+00, %2214
  %2218 = fsub fast float 3.000000e+00, %2215
  %2219 = fsub fast float 3.000000e+00, %2216
  %2220 = fmul fast float %2211, %2211
  %2221 = fmul fast float %2220, %2217
  %2222 = fmul fast float %2212, %2212
  %2223 = fmul fast float %2222, %2218
  %2224 = fmul fast float %2213, %2213
  %2225 = fmul fast float %2224, %2219
  %2226 = fmul fast float %2221, %2221
  %2227 = fmul fast float %2223, %2223
  %2228 = fadd fast float %2227, %2226
  %2229 = fmul fast float %2225, %2225
  %2230 = fadd fast float %2228, %2229
  %2231 = call float @dx.op.unary.f32(i32 24, float %2230)  ; Sqrt(value)
  %2232 = fadd fast float %2231, %2183
  %2233 = fmul fast float %2232, 0x401921FB60000000
  %2234 = call float @dx.op.unary.f32(i32 13, float %2233)  ; Sin(value)
  %2235 = call float @dx.op.unary.f32(i32 12, float %2233)  ; Cos(value)
  %2236 = fmul fast float %2235, 1.000000e+01
  %2237 = fadd fast float %2236, -1.000000e+01
  %2238 = fmul fast float %2237, %2133
  %2239 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2240 = extractvalue %dx.types.CBufRet.f32 %2239, 0
  %2241 = fmul fast float %2133, -1.000000e+01
  %2242 = fmul fast float %2241, %2234
  %2243 = fmul fast float %2242, %2240
  %2244 = fmul fast float %2238, %2240
  %2245 = fcmp fast ugt float %590, 0.000000e+00
  br i1 %2245, label %2246, label %2254

; <label>:2246                                    ; preds = %2132
  %2247 = fsub fast float -0.000000e+00, %590
  %2248 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2247)  ; FMax(a,b)
  %2249 = call float @dx.op.binary.f32(i32 35, float %2243, float %2247)  ; FMax(a,b)
  %2250 = call float @dx.op.binary.f32(i32 35, float %2244, float %2247)  ; FMax(a,b)
  %2251 = call float @dx.op.binary.f32(i32 36, float %2248, float %590)  ; FMin(a,b)
  %2252 = call float @dx.op.binary.f32(i32 36, float %2249, float %590)  ; FMin(a,b)
  %2253 = call float @dx.op.binary.f32(i32 36, float %2250, float %590)  ; FMin(a,b)
  br label %2254

; <label>:2254                                    ; preds = %2246, %2132, %2128
  %2255 = phi float [ 0.000000e+00, %2128 ], [ %2251, %2246 ], [ 0.000000e+00, %2132 ]
  %2256 = phi float [ 0.000000e+00, %2128 ], [ %2252, %2246 ], [ %2243, %2132 ]
  %2257 = phi float [ 0.000000e+00, %2128 ], [ %2253, %2246 ], [ %2244, %2132 ]
  br i1 %1735, label %2274, label %2258, !dx.controlflow.hints !47

; <label>:2258                                    ; preds = %2254
  %2259 = fadd fast float %2255, %1950
  %2260 = fadd fast float %2256, %1954
  %2261 = fadd fast float %2257, %1958
  %2262 = fmul fast float %2259, %115
  %2263 = call float @dx.op.tertiary.f32(i32 46, float %2260, float %119, float %2262)  ; FMad(a,b,c)
  %2264 = call float @dx.op.tertiary.f32(i32 46, float %2261, float %123, float %2263)  ; FMad(a,b,c)
  %2265 = fmul fast float %2259, %116
  %2266 = call float @dx.op.tertiary.f32(i32 46, float %2260, float %120, float %2265)  ; FMad(a,b,c)
  %2267 = call float @dx.op.tertiary.f32(i32 46, float %2261, float %124, float %2266)  ; FMad(a,b,c)
  %2268 = fmul fast float %2259, %117
  %2269 = call float @dx.op.tertiary.f32(i32 46, float %2260, float %121, float %2268)  ; FMad(a,b,c)
  %2270 = call float @dx.op.tertiary.f32(i32 46, float %2261, float %125, float %2269)  ; FMad(a,b,c)
  %2271 = fsub fast float %2264, %1950
  %2272 = fsub fast float %2267, %1954
  %2273 = fsub fast float %2270, %1958
  br label %2274

; <label>:2274                                    ; preds = %2258, %2254
  %2275 = phi float [ %2271, %2258 ], [ %2255, %2254 ]
  %2276 = phi float [ %2272, %2258 ], [ %2256, %2254 ]
  %2277 = phi float [ %2273, %2258 ], [ %2257, %2254 ]
  %2278 = fmul fast float %2275, %689
  %2279 = call float @dx.op.tertiary.f32(i32 46, float %2276, float %690, float %2278)  ; FMad(a,b,c)
  %2280 = call float @dx.op.tertiary.f32(i32 46, float %2277, float %691, float %2279)  ; FMad(a,b,c)
  %2281 = fmul fast float %2275, %692
  %2282 = call float @dx.op.tertiary.f32(i32 46, float %2276, float %693, float %2281)  ; FMad(a,b,c)
  %2283 = call float @dx.op.tertiary.f32(i32 46, float %2277, float %694, float %2282)  ; FMad(a,b,c)
  %2284 = fmul fast float %2275, %695
  %2285 = call float @dx.op.tertiary.f32(i32 46, float %2276, float %696, float %2284)  ; FMad(a,b,c)
  %2286 = call float @dx.op.tertiary.f32(i32 46, float %2277, float %697, float %2285)  ; FMad(a,b,c)
  %2287 = fadd fast float %2280, %820
  %2288 = fadd fast float %2283, %821
  %2289 = fadd fast float %2286, %822
  %2290 = fadd float %1938, %2129
  %2291 = fadd float %1942, %2130
  %2292 = fadd float %1946, %2131
  %2293 = fmul float %160, %2290
  %2294 = call float @dx.op.tertiary.f32(i32 46, float %2291, float %164, float %2293), !dx.precise !39  ; FMad(a,b,c)
  %2295 = call float @dx.op.tertiary.f32(i32 46, float %2292, float %168, float %2294), !dx.precise !39  ; FMad(a,b,c)
  %2296 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %172, float %2295), !dx.precise !39  ; FMad(a,b,c)
  %2297 = fmul float %161, %2290
  %2298 = call float @dx.op.tertiary.f32(i32 46, float %2291, float %165, float %2297), !dx.precise !39  ; FMad(a,b,c)
  %2299 = call float @dx.op.tertiary.f32(i32 46, float %2292, float %169, float %2298), !dx.precise !39  ; FMad(a,b,c)
  %2300 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %173, float %2299), !dx.precise !39  ; FMad(a,b,c)
  %2301 = fmul float %162, %2290
  %2302 = call float @dx.op.tertiary.f32(i32 46, float %2291, float %166, float %2301), !dx.precise !39  ; FMad(a,b,c)
  %2303 = call float @dx.op.tertiary.f32(i32 46, float %2292, float %170, float %2302), !dx.precise !39  ; FMad(a,b,c)
  %2304 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %174, float %2303), !dx.precise !39  ; FMad(a,b,c)
  %2305 = fmul float %401, %875
  %2306 = call float @dx.op.tertiary.f32(i32 46, float %876, float %405, float %2305), !dx.precise !39  ; FMad(a,b,c)
  %2307 = call float @dx.op.tertiary.f32(i32 46, float %877, float %409, float %2306), !dx.precise !39  ; FMad(a,b,c)
  %2308 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %597, float %2307), !dx.precise !39  ; FMad(a,b,c)
  %2309 = fmul float %402, %875
  %2310 = call float @dx.op.tertiary.f32(i32 46, float %876, float %406, float %2309), !dx.precise !39  ; FMad(a,b,c)
  %2311 = call float @dx.op.tertiary.f32(i32 46, float %877, float %410, float %2310), !dx.precise !39  ; FMad(a,b,c)
  %2312 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %598, float %2311), !dx.precise !39  ; FMad(a,b,c)
  %2313 = fmul float %403, %875
  %2314 = call float @dx.op.tertiary.f32(i32 46, float %876, float %407, float %2313), !dx.precise !39  ; FMad(a,b,c)
  %2315 = call float @dx.op.tertiary.f32(i32 46, float %877, float %411, float %2314), !dx.precise !39  ; FMad(a,b,c)
  %2316 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %599, float %2315), !dx.precise !39  ; FMad(a,b,c)
  %2317 = fmul fast float %875, %573
  %2318 = call float @dx.op.tertiary.f32(i32 46, float %876, float %576, float %2317)  ; FMad(a,b,c)
  %2319 = call float @dx.op.tertiary.f32(i32 46, float %877, float %579, float %2318)  ; FMad(a,b,c)
  %2320 = fadd fast float %2319, %606
  %2321 = fmul fast float %875, %574
  %2322 = call float @dx.op.tertiary.f32(i32 46, float %876, float %577, float %2321)  ; FMad(a,b,c)
  %2323 = call float @dx.op.tertiary.f32(i32 46, float %877, float %580, float %2322)  ; FMad(a,b,c)
  %2324 = fadd fast float %2323, %607
  %2325 = fmul fast float %875, %575
  %2326 = call float @dx.op.tertiary.f32(i32 46, float %876, float %578, float %2325)  ; FMad(a,b,c)
  %2327 = call float @dx.op.tertiary.f32(i32 46, float %877, float %581, float %2326)  ; FMad(a,b,c)
  %2328 = fadd fast float %2327, %608
  br i1 %1586, label %2472, label %2329, !dx.controlflow.hints !44

; <label>:2329                                    ; preds = %2274
  %2330 = fsub float %2316, %133
  %2331 = fsub float %2312, %132
  %2332 = fsub float %2308, %131
  %2333 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %2334 = extractvalue %dx.types.CBufRet.f32 %2333, 2
  %2335 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2336 = extractvalue %dx.types.CBufRet.f32 %2335, 3
  %2337 = fmul float %2334, %2336
  %2338 = fmul float %2337, -5.000000e-01
  %2339 = fmul float %2338, 0.000000e+00
  %2340 = fmul float %2332, 9.765625e-04
  %2341 = fmul float %2331, 9.765625e-04
  %2342 = fmul float %2330, 9.765625e-04
  %2343 = fmul float %127, 9.765625e-04
  %2344 = fmul float %128, 9.765625e-04
  %2345 = fmul float %129, 9.765625e-04
  %2346 = fadd float %2340, %2339
  %2347 = fadd float %2341, %2338
  %2348 = fadd float %2342, %2339
  %2349 = fadd float %2346, 5.000000e-01
  %2350 = fadd float %2347, 5.000000e-01
  %2351 = fadd float %2348, 5.000000e-01
  %2352 = fmul float %2343, 2.097152e+06
  %2353 = fmul float %2344, 2.097152e+06
  %2354 = fmul float %2345, 2.097152e+06
  %2355 = call float @dx.op.unary.f32(i32 22, float %2352), !dx.precise !39  ; Frc(value)
  %2356 = call float @dx.op.unary.f32(i32 22, float %2353), !dx.precise !39  ; Frc(value)
  %2357 = call float @dx.op.unary.f32(i32 22, float %2354), !dx.precise !39  ; Frc(value)
  %2358 = fadd float %2355, %2349
  %2359 = fadd float %2356, %2350
  %2360 = fadd float %2357, %2351
  %2361 = call float @dx.op.unary.f32(i32 22, float %2358), !dx.precise !39  ; Frc(value)
  %2362 = call float @dx.op.unary.f32(i32 22, float %2359), !dx.precise !39  ; Frc(value)
  %2363 = call float @dx.op.unary.f32(i32 22, float %2360), !dx.precise !39  ; Frc(value)
  %2364 = fmul float %2361, 2.000000e+00
  %2365 = fmul float %2362, 2.000000e+00
  %2366 = fmul float %2363, 2.000000e+00
  %2367 = fadd float %2364, -1.000000e+00
  %2368 = fadd float %2365, -1.000000e+00
  %2369 = fadd float %2366, -1.000000e+00
  %2370 = call float @dx.op.unary.f32(i32 6, float %2367), !dx.precise !39  ; FAbs(value)
  %2371 = call float @dx.op.unary.f32(i32 6, float %2368), !dx.precise !39  ; FAbs(value)
  %2372 = call float @dx.op.unary.f32(i32 6, float %2369), !dx.precise !39  ; FAbs(value)
  %2373 = fmul float %2370, 2.000000e+00
  %2374 = fmul float %2371, 2.000000e+00
  %2375 = fmul float %2372, 2.000000e+00
  %2376 = fsub float 3.000000e+00, %2373
  %2377 = fsub float 3.000000e+00, %2374
  %2378 = fsub float 3.000000e+00, %2375
  %2379 = fmul float %2370, %2376
  %2380 = fmul float %2371, %2377
  %2381 = fmul float %2372, %2378
  %2382 = fmul float %2370, %2379
  %2383 = fmul float %2371, %2380
  %2384 = fmul float %2372, %2381
  %2385 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %2382, float %2383, float %2384), !dx.precise !39  ; Dot3(ax,ay,az,bx,by,bz)
  %2386 = fmul float %2332, 0x3F747AE140000000
  %2387 = fmul float %2331, 0x3F747AE140000000
  %2388 = fmul float %2330, 0x3F747AE140000000
  %2389 = fmul float %127, 0x3F747AE140000000
  %2390 = fmul float %128, 0x3F747AE140000000
  %2391 = fmul float %129, 0x3F747AE140000000
  %2392 = fadd float %2386, %2338
  %2393 = fadd float %2387, %2338
  %2394 = fadd float %2388, %2338
  %2395 = fadd float %2392, 5.000000e-01
  %2396 = fadd float %2393, 5.000000e-01
  %2397 = fadd float %2394, 5.000000e-01
  %2398 = fmul float %2389, 2.097152e+06
  %2399 = fmul float %2390, 2.097152e+06
  %2400 = fmul float %2391, 2.097152e+06
  %2401 = call float @dx.op.unary.f32(i32 22, float %2398), !dx.precise !39  ; Frc(value)
  %2402 = call float @dx.op.unary.f32(i32 22, float %2399), !dx.precise !39  ; Frc(value)
  %2403 = call float @dx.op.unary.f32(i32 22, float %2400), !dx.precise !39  ; Frc(value)
  %2404 = fadd float %2395, %2401
  %2405 = fadd float %2396, %2402
  %2406 = fadd float %2397, %2403
  %2407 = call float @dx.op.unary.f32(i32 22, float %2404), !dx.precise !39  ; Frc(value)
  %2408 = call float @dx.op.unary.f32(i32 22, float %2405), !dx.precise !39  ; Frc(value)
  %2409 = call float @dx.op.unary.f32(i32 22, float %2406), !dx.precise !39  ; Frc(value)
  %2410 = fmul float %2407, 2.000000e+00
  %2411 = fmul float %2408, 2.000000e+00
  %2412 = fmul float %2409, 2.000000e+00
  %2413 = fadd float %2410, -1.000000e+00
  %2414 = fadd float %2411, -1.000000e+00
  %2415 = fadd float %2412, -1.000000e+00
  %2416 = call float @dx.op.unary.f32(i32 6, float %2413), !dx.precise !39  ; FAbs(value)
  %2417 = call float @dx.op.unary.f32(i32 6, float %2414), !dx.precise !39  ; FAbs(value)
  %2418 = call float @dx.op.unary.f32(i32 6, float %2415), !dx.precise !39  ; FAbs(value)
  %2419 = fmul float %2416, 2.000000e+00
  %2420 = fmul float %2417, 2.000000e+00
  %2421 = fmul float %2418, 2.000000e+00
  %2422 = fsub float 3.000000e+00, %2419
  %2423 = fsub float 3.000000e+00, %2420
  %2424 = fsub float 3.000000e+00, %2421
  %2425 = fmul float %2416, %2422
  %2426 = fmul float %2417, %2423
  %2427 = fmul float %2418, %2424
  %2428 = fmul float %2416, %2425
  %2429 = fmul float %2417, %2426
  %2430 = fmul float %2418, %2427
  %2431 = fmul float %2428, %2428
  %2432 = fmul float %2429, %2429
  %2433 = fadd float %2431, %2432
  %2434 = fmul float %2430, %2430
  %2435 = fadd float %2433, %2434
  %2436 = call float @dx.op.unary.f32(i32 24, float %2435), !dx.precise !39  ; Sqrt(value)
  %2437 = fadd float %2385, %2436
  %2438 = fmul float %2437, 0x401921FB60000000
  %2439 = call float @dx.op.unary.f32(i32 13, float %2438), !dx.precise !39  ; Sin(value)
  %2440 = call float @dx.op.unary.f32(i32 12, float %2438), !dx.precise !39  ; Cos(value)
  %2441 = fmul float %2440, 0.000000e+00
  %2442 = fmul float %2440, 1.000000e+01
  %2443 = fmul float %2439, 0.000000e+00
  %2444 = fmul float %2439, 1.000000e+01
  %2445 = fadd float %2443, %2441
  %2446 = fsub float %2441, %2444
  %2447 = fadd float %2443, %2442
  %2448 = fadd float %2445, 0.000000e+00
  %2449 = fadd float %2446, 0.000000e+00
  %2450 = fadd float %2447, -1.000000e+01
  %2451 = fsub float 1.000000e+00, %1553
  %2452 = fmul float %2451, %2448
  %2453 = fmul float %2451, %2449
  %2454 = fmul float %2451, %2450
  %2455 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2456 = extractvalue %dx.types.CBufRet.f32 %2455, 0
  %2457 = fmul float %2456, %2452
  %2458 = fmul float %2456, %2453
  %2459 = fmul float %2456, %2454
  %2460 = fadd float %2457, 0.000000e+00
  %2461 = fadd float %2458, 0.000000e+00
  %2462 = fadd float %2459, 0.000000e+00
  %2463 = fcmp ugt float %590, 0.000000e+00
  br i1 %2463, label %2464, label %2472

; <label>:2464                                    ; preds = %2329
  %2465 = fsub float -0.000000e+00, %590
  %2466 = call float @dx.op.binary.f32(i32 35, float %2460, float %2465), !dx.precise !39  ; FMax(a,b)
  %2467 = call float @dx.op.binary.f32(i32 35, float %2461, float %2465), !dx.precise !39  ; FMax(a,b)
  %2468 = call float @dx.op.binary.f32(i32 35, float %2462, float %2465), !dx.precise !39  ; FMax(a,b)
  %2469 = call float @dx.op.binary.f32(i32 36, float %2466, float %590), !dx.precise !39  ; FMin(a,b)
  %2470 = call float @dx.op.binary.f32(i32 36, float %2467, float %590), !dx.precise !39  ; FMin(a,b)
  %2471 = call float @dx.op.binary.f32(i32 36, float %2468, float %590), !dx.precise !39  ; FMin(a,b)
  br label %2472

; <label>:2472                                    ; preds = %2464, %2329, %2274
  %2473 = phi float [ 0.000000e+00, %2274 ], [ %2469, %2464 ], [ %2460, %2329 ]
  %2474 = phi float [ 0.000000e+00, %2274 ], [ %2470, %2464 ], [ %2461, %2329 ]
  %2475 = phi float [ 0.000000e+00, %2274 ], [ %2471, %2464 ], [ %2462, %2329 ]
  br i1 %1735, label %2498, label %2476, !dx.controlflow.hints !45

; <label>:2476                                    ; preds = %2472
  %2477 = fadd float %2308, %2473
  %2478 = fadd float %2312, %2474
  %2479 = fadd float %2316, %2475
  %2480 = fmul float %103, %2477
  %2481 = call float @dx.op.tertiary.f32(i32 46, float %2478, float %107, float %2480), !dx.precise !39  ; FMad(a,b,c)
  %2482 = call float @dx.op.tertiary.f32(i32 46, float %2479, float %111, float %2481), !dx.precise !39  ; FMad(a,b,c)
  %2483 = fmul float %104, %2477
  %2484 = call float @dx.op.tertiary.f32(i32 46, float %2478, float %108, float %2483), !dx.precise !39  ; FMad(a,b,c)
  %2485 = call float @dx.op.tertiary.f32(i32 46, float %2479, float %112, float %2484), !dx.precise !39  ; FMad(a,b,c)
  %2486 = fmul float %105, %2477
  %2487 = call float @dx.op.tertiary.f32(i32 46, float %2478, float %109, float %2486), !dx.precise !39  ; FMad(a,b,c)
  %2488 = call float @dx.op.tertiary.f32(i32 46, float %2479, float %113, float %2487), !dx.precise !39  ; FMad(a,b,c)
  %2489 = fsub float %2482, %2308
  %2490 = fsub float %2485, %2312
  %2491 = fsub float %2488, %2316
  %2492 = fsub float %2489, %2473
  %2493 = fsub float %2490, %2474
  %2494 = fsub float %2491, %2475
  %2495 = fadd float %2473, %2492
  %2496 = fadd float %2474, %2493
  %2497 = fadd float %2475, %2494
  br label %2498

; <label>:2498                                    ; preds = %2476, %2472
  %2499 = phi float [ %2495, %2476 ], [ %2473, %2472 ]
  %2500 = phi float [ %2496, %2476 ], [ %2474, %2472 ]
  %2501 = phi float [ %2497, %2476 ], [ %2475, %2472 ]
  br i1 %1586, label %2624, label %2502, !dx.controlflow.hints !46

; <label>:2502                                    ; preds = %2498
  %2503 = fsub fast float 1.000000e+00, %1553
  %2504 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2505 = extractvalue %dx.types.CBufRet.f32 %2504, 2
  %2506 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2507 = extractvalue %dx.types.CBufRet.f32 %2506, 3
  %2508 = fmul fast float %2505, -5.000000e-01
  %2509 = fmul fast float %2508, %2507
  %2510 = fsub fast float %2320, %135
  %2511 = fsub fast float %2324, %136
  %2512 = fsub fast float %2328, %137
  %2513 = fmul fast float %2510, 9.765625e-04
  %2514 = fmul fast float %2511, 9.765625e-04
  %2515 = fmul fast float %2512, 9.765625e-04
  %2516 = fadd fast float %2513, 5.000000e-01
  %2517 = fadd fast float %2515, 5.000000e-01
  %2518 = fmul fast float %127, 2.048000e+03
  %2519 = fmul fast float %128, 2.048000e+03
  %2520 = fmul fast float %129, 2.048000e+03
  %2521 = call float @dx.op.unary.f32(i32 22, float %2518)  ; Frc(value)
  %2522 = call float @dx.op.unary.f32(i32 22, float %2519)  ; Frc(value)
  %2523 = call float @dx.op.unary.f32(i32 22, float %2520)  ; Frc(value)
  %2524 = fadd fast float %2516, %2521
  %2525 = fadd fast float %2514, 5.000000e-01
  %2526 = fadd fast float %2525, %2522
  %2527 = fadd fast float %2526, %2509
  %2528 = fadd fast float %2517, %2523
  %2529 = call float @dx.op.unary.f32(i32 22, float %2524)  ; Frc(value)
  %2530 = call float @dx.op.unary.f32(i32 22, float %2527)  ; Frc(value)
  %2531 = call float @dx.op.unary.f32(i32 22, float %2528)  ; Frc(value)
  %2532 = fmul fast float %2529, 2.000000e+00
  %2533 = fmul fast float %2530, 2.000000e+00
  %2534 = fmul fast float %2531, 2.000000e+00
  %2535 = fadd fast float %2532, -1.000000e+00
  %2536 = fadd fast float %2533, -1.000000e+00
  %2537 = fadd fast float %2534, -1.000000e+00
  %2538 = call float @dx.op.unary.f32(i32 6, float %2535)  ; FAbs(value)
  %2539 = call float @dx.op.unary.f32(i32 6, float %2536)  ; FAbs(value)
  %2540 = call float @dx.op.unary.f32(i32 6, float %2537)  ; FAbs(value)
  %2541 = fmul fast float %2538, 2.000000e+00
  %2542 = fmul fast float %2539, 2.000000e+00
  %2543 = fmul fast float %2540, 2.000000e+00
  %2544 = fsub fast float 3.000000e+00, %2541
  %2545 = fsub fast float 3.000000e+00, %2542
  %2546 = fsub fast float 3.000000e+00, %2543
  %2547 = fmul fast float %2538, %2538
  %2548 = fmul fast float %2547, %2544
  %2549 = fmul fast float %2539, %2539
  %2550 = fmul fast float %2549, %2545
  %2551 = fmul fast float %2540, %2540
  %2552 = fmul fast float %2551, %2546
  %2553 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %2548, float %2550, float %2552)  ; Dot3(ax,ay,az,bx,by,bz)
  %2554 = fmul fast float %2510, 0x3F747AE140000000
  %2555 = fmul fast float %2511, 0x3F747AE140000000
  %2556 = fmul fast float %2512, 0x3F747AE140000000
  %2557 = fmul fast float %127, 0x40C47AE140000000
  %2558 = fmul fast float %128, 0x40C47AE140000000
  %2559 = fmul fast float %129, 0x40C47AE140000000
  %2560 = call float @dx.op.unary.f32(i32 22, float %2557)  ; Frc(value)
  %2561 = call float @dx.op.unary.f32(i32 22, float %2558)  ; Frc(value)
  %2562 = call float @dx.op.unary.f32(i32 22, float %2559)  ; Frc(value)
  %2563 = fadd fast float %2554, 5.000000e-01
  %2564 = fadd fast float %2563, %2509
  %2565 = fadd fast float %2564, %2560
  %2566 = fadd fast float %2555, 5.000000e-01
  %2567 = fadd fast float %2566, %2509
  %2568 = fadd fast float %2567, %2561
  %2569 = fadd fast float %2556, 5.000000e-01
  %2570 = fadd fast float %2569, %2509
  %2571 = fadd fast float %2570, %2562
  %2572 = call float @dx.op.unary.f32(i32 22, float %2565)  ; Frc(value)
  %2573 = call float @dx.op.unary.f32(i32 22, float %2568)  ; Frc(value)
  %2574 = call float @dx.op.unary.f32(i32 22, float %2571)  ; Frc(value)
  %2575 = fmul fast float %2572, 2.000000e+00
  %2576 = fmul fast float %2573, 2.000000e+00
  %2577 = fmul fast float %2574, 2.000000e+00
  %2578 = fadd fast float %2575, -1.000000e+00
  %2579 = fadd fast float %2576, -1.000000e+00
  %2580 = fadd fast float %2577, -1.000000e+00
  %2581 = call float @dx.op.unary.f32(i32 6, float %2578)  ; FAbs(value)
  %2582 = call float @dx.op.unary.f32(i32 6, float %2579)  ; FAbs(value)
  %2583 = call float @dx.op.unary.f32(i32 6, float %2580)  ; FAbs(value)
  %2584 = fmul fast float %2581, 2.000000e+00
  %2585 = fmul fast float %2582, 2.000000e+00
  %2586 = fmul fast float %2583, 2.000000e+00
  %2587 = fsub fast float 3.000000e+00, %2584
  %2588 = fsub fast float 3.000000e+00, %2585
  %2589 = fsub fast float 3.000000e+00, %2586
  %2590 = fmul fast float %2581, %2581
  %2591 = fmul fast float %2590, %2587
  %2592 = fmul fast float %2582, %2582
  %2593 = fmul fast float %2592, %2588
  %2594 = fmul fast float %2583, %2583
  %2595 = fmul fast float %2594, %2589
  %2596 = fmul fast float %2591, %2591
  %2597 = fmul fast float %2593, %2593
  %2598 = fadd fast float %2597, %2596
  %2599 = fmul fast float %2595, %2595
  %2600 = fadd fast float %2598, %2599
  %2601 = call float @dx.op.unary.f32(i32 24, float %2600)  ; Sqrt(value)
  %2602 = fadd fast float %2601, %2553
  %2603 = fmul fast float %2602, 0x401921FB60000000
  %2604 = call float @dx.op.unary.f32(i32 13, float %2603)  ; Sin(value)
  %2605 = call float @dx.op.unary.f32(i32 12, float %2603)  ; Cos(value)
  %2606 = fmul fast float %2605, 1.000000e+01
  %2607 = fadd fast float %2606, -1.000000e+01
  %2608 = fmul fast float %2607, %2503
  %2609 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2610 = extractvalue %dx.types.CBufRet.f32 %2609, 0
  %2611 = fmul fast float %2503, -1.000000e+01
  %2612 = fmul fast float %2611, %2604
  %2613 = fmul fast float %2612, %2610
  %2614 = fmul fast float %2608, %2610
  %2615 = fcmp fast ugt float %590, 0.000000e+00
  br i1 %2615, label %2616, label %2624

; <label>:2616                                    ; preds = %2502
  %2617 = fsub fast float -0.000000e+00, %590
  %2618 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2617)  ; FMax(a,b)
  %2619 = call float @dx.op.binary.f32(i32 35, float %2613, float %2617)  ; FMax(a,b)
  %2620 = call float @dx.op.binary.f32(i32 35, float %2614, float %2617)  ; FMax(a,b)
  %2621 = call float @dx.op.binary.f32(i32 36, float %2618, float %590)  ; FMin(a,b)
  %2622 = call float @dx.op.binary.f32(i32 36, float %2619, float %590)  ; FMin(a,b)
  %2623 = call float @dx.op.binary.f32(i32 36, float %2620, float %590)  ; FMin(a,b)
  br label %2624

; <label>:2624                                    ; preds = %2616, %2502, %2498
  %2625 = phi float [ 0.000000e+00, %2498 ], [ %2621, %2616 ], [ 0.000000e+00, %2502 ]
  %2626 = phi float [ 0.000000e+00, %2498 ], [ %2622, %2616 ], [ %2613, %2502 ]
  %2627 = phi float [ 0.000000e+00, %2498 ], [ %2623, %2616 ], [ %2614, %2502 ]
  br i1 %1735, label %2644, label %2628, !dx.controlflow.hints !47

; <label>:2628                                    ; preds = %2624
  %2629 = fadd fast float %2625, %2320
  %2630 = fadd fast float %2626, %2324
  %2631 = fadd fast float %2627, %2328
  %2632 = fmul fast float %2629, %115
  %2633 = call float @dx.op.tertiary.f32(i32 46, float %2630, float %119, float %2632)  ; FMad(a,b,c)
  %2634 = call float @dx.op.tertiary.f32(i32 46, float %2631, float %123, float %2633)  ; FMad(a,b,c)
  %2635 = fmul fast float %2629, %116
  %2636 = call float @dx.op.tertiary.f32(i32 46, float %2630, float %120, float %2635)  ; FMad(a,b,c)
  %2637 = call float @dx.op.tertiary.f32(i32 46, float %2631, float %124, float %2636)  ; FMad(a,b,c)
  %2638 = fmul fast float %2629, %117
  %2639 = call float @dx.op.tertiary.f32(i32 46, float %2630, float %121, float %2638)  ; FMad(a,b,c)
  %2640 = call float @dx.op.tertiary.f32(i32 46, float %2631, float %125, float %2639)  ; FMad(a,b,c)
  %2641 = fsub fast float %2634, %2320
  %2642 = fsub fast float %2637, %2324
  %2643 = fsub fast float %2640, %2328
  br label %2644

; <label>:2644                                    ; preds = %2628, %2624
  %2645 = phi float [ %2641, %2628 ], [ %2625, %2624 ]
  %2646 = phi float [ %2642, %2628 ], [ %2626, %2624 ]
  %2647 = phi float [ %2643, %2628 ], [ %2627, %2624 ]
  %2648 = fmul fast float %2645, %689
  %2649 = call float @dx.op.tertiary.f32(i32 46, float %2646, float %690, float %2648)  ; FMad(a,b,c)
  %2650 = call float @dx.op.tertiary.f32(i32 46, float %2647, float %691, float %2649)  ; FMad(a,b,c)
  %2651 = fmul fast float %2645, %692
  %2652 = call float @dx.op.tertiary.f32(i32 46, float %2646, float %693, float %2651)  ; FMad(a,b,c)
  %2653 = call float @dx.op.tertiary.f32(i32 46, float %2647, float %694, float %2652)  ; FMad(a,b,c)
  %2654 = fmul fast float %2645, %695
  %2655 = call float @dx.op.tertiary.f32(i32 46, float %2646, float %696, float %2654)  ; FMad(a,b,c)
  %2656 = call float @dx.op.tertiary.f32(i32 46, float %2647, float %697, float %2655)  ; FMad(a,b,c)
  %2657 = fadd fast float %2650, %875
  %2658 = fadd fast float %2653, %876
  %2659 = fadd fast float %2656, %877
  %2660 = fadd float %2308, %2499
  %2661 = fadd float %2312, %2500
  %2662 = fadd float %2316, %2501
  %2663 = fmul float %160, %2660
  %2664 = call float @dx.op.tertiary.f32(i32 46, float %2661, float %164, float %2663), !dx.precise !39  ; FMad(a,b,c)
  %2665 = call float @dx.op.tertiary.f32(i32 46, float %2662, float %168, float %2664), !dx.precise !39  ; FMad(a,b,c)
  %2666 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %172, float %2665), !dx.precise !39  ; FMad(a,b,c)
  %2667 = fmul float %161, %2660
  %2668 = call float @dx.op.tertiary.f32(i32 46, float %2661, float %165, float %2667), !dx.precise !39  ; FMad(a,b,c)
  %2669 = call float @dx.op.tertiary.f32(i32 46, float %2662, float %169, float %2668), !dx.precise !39  ; FMad(a,b,c)
  %2670 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %173, float %2669), !dx.precise !39  ; FMad(a,b,c)
  %2671 = fmul float %162, %2660
  %2672 = call float @dx.op.tertiary.f32(i32 46, float %2661, float %166, float %2671), !dx.precise !39  ; FMad(a,b,c)
  %2673 = call float @dx.op.tertiary.f32(i32 46, float %2662, float %170, float %2672), !dx.precise !39  ; FMad(a,b,c)
  br label %2734

; <label>:2674                                    ; preds = %1549
  %2675 = fmul float %160, %1563
  %2676 = call float @dx.op.tertiary.f32(i32 46, float %1567, float %164, float %2675), !dx.precise !39  ; FMad(a,b,c)
  %2677 = call float @dx.op.tertiary.f32(i32 46, float %1571, float %168, float %2676), !dx.precise !39  ; FMad(a,b,c)
  %2678 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %172, float %2677), !dx.precise !39  ; FMad(a,b,c)
  %2679 = fmul float %161, %1563
  %2680 = call float @dx.op.tertiary.f32(i32 46, float %1567, float %165, float %2679), !dx.precise !39  ; FMad(a,b,c)
  %2681 = call float @dx.op.tertiary.f32(i32 46, float %1571, float %169, float %2680), !dx.precise !39  ; FMad(a,b,c)
  %2682 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %173, float %2681), !dx.precise !39  ; FMad(a,b,c)
  %2683 = fmul float %162, %1563
  %2684 = call float @dx.op.tertiary.f32(i32 46, float %1567, float %166, float %2683), !dx.precise !39  ; FMad(a,b,c)
  %2685 = call float @dx.op.tertiary.f32(i32 46, float %1571, float %170, float %2684), !dx.precise !39  ; FMad(a,b,c)
  %2686 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %174, float %2685), !dx.precise !39  ; FMad(a,b,c)
  %2687 = fmul float %401, %820
  %2688 = call float @dx.op.tertiary.f32(i32 46, float %821, float %405, float %2687), !dx.precise !39  ; FMad(a,b,c)
  %2689 = call float @dx.op.tertiary.f32(i32 46, float %822, float %409, float %2688), !dx.precise !39  ; FMad(a,b,c)
  %2690 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %597, float %2689), !dx.precise !39  ; FMad(a,b,c)
  %2691 = fmul float %402, %820
  %2692 = call float @dx.op.tertiary.f32(i32 46, float %821, float %406, float %2691), !dx.precise !39  ; FMad(a,b,c)
  %2693 = call float @dx.op.tertiary.f32(i32 46, float %822, float %410, float %2692), !dx.precise !39  ; FMad(a,b,c)
  %2694 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %598, float %2693), !dx.precise !39  ; FMad(a,b,c)
  %2695 = fmul float %403, %820
  %2696 = call float @dx.op.tertiary.f32(i32 46, float %821, float %407, float %2695), !dx.precise !39  ; FMad(a,b,c)
  %2697 = call float @dx.op.tertiary.f32(i32 46, float %822, float %411, float %2696), !dx.precise !39  ; FMad(a,b,c)
  %2698 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %599, float %2697), !dx.precise !39  ; FMad(a,b,c)
  %2699 = fmul float %160, %2690
  %2700 = call float @dx.op.tertiary.f32(i32 46, float %2694, float %164, float %2699), !dx.precise !39  ; FMad(a,b,c)
  %2701 = call float @dx.op.tertiary.f32(i32 46, float %2698, float %168, float %2700), !dx.precise !39  ; FMad(a,b,c)
  %2702 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %172, float %2701), !dx.precise !39  ; FMad(a,b,c)
  %2703 = fmul float %161, %2690
  %2704 = call float @dx.op.tertiary.f32(i32 46, float %2694, float %165, float %2703), !dx.precise !39  ; FMad(a,b,c)
  %2705 = call float @dx.op.tertiary.f32(i32 46, float %2698, float %169, float %2704), !dx.precise !39  ; FMad(a,b,c)
  %2706 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %173, float %2705), !dx.precise !39  ; FMad(a,b,c)
  %2707 = fmul float %162, %2690
  %2708 = call float @dx.op.tertiary.f32(i32 46, float %2694, float %166, float %2707), !dx.precise !39  ; FMad(a,b,c)
  %2709 = call float @dx.op.tertiary.f32(i32 46, float %2698, float %170, float %2708), !dx.precise !39  ; FMad(a,b,c)
  %2710 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %174, float %2709), !dx.precise !39  ; FMad(a,b,c)
  %2711 = fmul float %401, %875
  %2712 = call float @dx.op.tertiary.f32(i32 46, float %876, float %405, float %2711), !dx.precise !39  ; FMad(a,b,c)
  %2713 = call float @dx.op.tertiary.f32(i32 46, float %877, float %409, float %2712), !dx.precise !39  ; FMad(a,b,c)
  %2714 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %597, float %2713), !dx.precise !39  ; FMad(a,b,c)
  %2715 = fmul float %402, %875
  %2716 = call float @dx.op.tertiary.f32(i32 46, float %876, float %406, float %2715), !dx.precise !39  ; FMad(a,b,c)
  %2717 = call float @dx.op.tertiary.f32(i32 46, float %877, float %410, float %2716), !dx.precise !39  ; FMad(a,b,c)
  %2718 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %598, float %2717), !dx.precise !39  ; FMad(a,b,c)
  %2719 = fmul float %403, %875
  %2720 = call float @dx.op.tertiary.f32(i32 46, float %876, float %407, float %2719), !dx.precise !39  ; FMad(a,b,c)
  %2721 = call float @dx.op.tertiary.f32(i32 46, float %877, float %411, float %2720), !dx.precise !39  ; FMad(a,b,c)
  %2722 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %599, float %2721), !dx.precise !39  ; FMad(a,b,c)
  %2723 = fmul float %160, %2714
  %2724 = call float @dx.op.tertiary.f32(i32 46, float %2718, float %164, float %2723), !dx.precise !39  ; FMad(a,b,c)
  %2725 = call float @dx.op.tertiary.f32(i32 46, float %2722, float %168, float %2724), !dx.precise !39  ; FMad(a,b,c)
  %2726 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %172, float %2725), !dx.precise !39  ; FMad(a,b,c)
  %2727 = fmul float %161, %2714
  %2728 = call float @dx.op.tertiary.f32(i32 46, float %2718, float %165, float %2727), !dx.precise !39  ; FMad(a,b,c)
  %2729 = call float @dx.op.tertiary.f32(i32 46, float %2722, float %169, float %2728), !dx.precise !39  ; FMad(a,b,c)
  %2730 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %173, float %2729), !dx.precise !39  ; FMad(a,b,c)
  %2731 = fmul float %162, %2714
  %2732 = call float @dx.op.tertiary.f32(i32 46, float %2718, float %166, float %2731), !dx.precise !39  ; FMad(a,b,c)
  %2733 = call float @dx.op.tertiary.f32(i32 46, float %2722, float %170, float %2732), !dx.precise !39  ; FMad(a,b,c)
  br label %2734

; <label>:2734                                    ; preds = %2674, %2644
  %2735 = phi float [ %2673, %2644 ], [ %2733, %2674 ]
  %2736 = phi float [ %2660, %2644 ], [ %2714, %2674 ]
  %2737 = phi float [ %2290, %2644 ], [ %2690, %2674 ]
  %2738 = phi float [ %1920, %2644 ], [ %1563, %2674 ]
  %2739 = phi float [ %2661, %2644 ], [ %2718, %2674 ]
  %2740 = phi float [ %2291, %2644 ], [ %2694, %2674 ]
  %2741 = phi float [ %1921, %2644 ], [ %1567, %2674 ]
  %2742 = phi float [ %2662, %2644 ], [ %2722, %2674 ]
  %2743 = phi float [ %2292, %2644 ], [ %2698, %2674 ]
  %2744 = phi float [ %1922, %2644 ], [ %1571, %2674 ]
  %2745 = phi float [ %2657, %2644 ], [ %875, %2674 ]
  %2746 = phi float [ %2287, %2644 ], [ %820, %2674 ]
  %2747 = phi float [ %1917, %2644 ], [ %765, %2674 ]
  %2748 = phi float [ %2658, %2644 ], [ %876, %2674 ]
  %2749 = phi float [ %2288, %2644 ], [ %821, %2674 ]
  %2750 = phi float [ %1918, %2644 ], [ %766, %2674 ]
  %2751 = phi float [ %2659, %2644 ], [ %877, %2674 ]
  %2752 = phi float [ %2289, %2644 ], [ %822, %2674 ]
  %2753 = phi float [ %1919, %2644 ], [ %767, %2674 ]
  %2754 = phi float [ %2308, %2644 ], [ %2714, %2674 ]
  %2755 = phi float [ %1938, %2644 ], [ %2690, %2674 ]
  %2756 = phi float [ %2312, %2644 ], [ %2718, %2674 ]
  %2757 = phi float [ %1942, %2644 ], [ %2694, %2674 ]
  %2758 = phi float [ %2316, %2644 ], [ %2722, %2674 ]
  %2759 = phi float [ %1946, %2644 ], [ %2698, %2674 ]
  %2760 = phi float [ %2666, %2644 ], [ %2726, %2674 ]
  %2761 = phi float [ %2296, %2644 ], [ %2702, %2674 ]
  %2762 = phi float [ %1926, %2644 ], [ %2678, %2674 ]
  %2763 = phi float [ %2670, %2644 ], [ %2730, %2674 ]
  %2764 = phi float [ %2300, %2644 ], [ %2706, %2674 ]
  %2765 = phi float [ %1930, %2644 ], [ %2682, %2674 ]
  %2766 = phi float [ %2304, %2644 ], [ %2710, %2674 ]
  %2767 = phi float [ %1934, %2644 ], [ %2686, %2674 ]
  %2768 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %174, float %2735), !dx.precise !39  ; FMad(a,b,c)
  %2769 = sitofp i32 %213 to float
  %2770 = sitofp i32 %214 to float
  %2771 = fsub float %98, %2769
  %2772 = fsub float %99, %2770
  %2773 = fmul float %147, %2771
  %2774 = fmul float %148, %2772
  %2775 = fmul float %2773, 2.000000e+00
  %2776 = fmul float %2774, 2.000000e+00
  %2777 = fadd float %2775, -1.000000e+00
  %2778 = fsub float 1.000000e+00, %2776
  %2779 = fdiv float 1.000000e+00, %2767
  %2780 = fdiv float 1.000000e+00, %2766
  %2781 = fdiv float 1.000000e+00, %2768
  %2782 = fmul float %2762, %2779
  %2783 = fmul float %2765, %2779
  %2784 = fmul float %2761, %2780
  %2785 = fmul float %2764, %2780
  %2786 = fmul float %2760, %2781
  %2787 = fmul float %2763, %2781
  %2788 = fsub float %2787, %2785
  %2789 = fsub float %2783, %2787
  %2790 = fsub float %2785, %2783
  %2791 = fsub float %2784, %2786
  %2792 = fsub float %2786, %2782
  %2793 = fsub float %2782, %2784
  %2794 = fsub float %2777, %2784
  %2795 = fsub float %2777, %2786
  %2796 = fsub float %2777, %2782
  %2797 = fmul float %2794, %2788
  %2798 = fmul float %2789, %2795
  %2799 = fmul float %2796, %2790
  %2800 = fsub float %2778, %2785
  %2801 = fsub float %2778, %2787
  %2802 = fsub float %2778, %2783
  %2803 = fmul float %2800, %2791
  %2804 = fmul float %2792, %2801
  %2805 = fmul float %2802, %2793
  %2806 = fadd float %2797, %2803
  %2807 = fadd float %2798, %2804
  %2808 = fadd float %2799, %2805
  %2809 = fmul float %2779, %2806
  %2810 = fmul float %2780, %2807
  %2811 = fmul float %2781, %2808
  %2812 = call float @dx.op.dot3.f32(i32 55, float %2806, float %2807, float %2808, float %2779, float %2780, float %2781), !dx.precise !39  ; Dot3(ax,ay,az,bx,by,bz)
  %2813 = fdiv float 1.000000e+00, %2812
  %2814 = fmul float %2813, %2809
  %2815 = fmul float %2813, %2810
  %2816 = fmul float %2813, %2811
  %2817 = fsub fast float %2760, %2762
  %2818 = fsub fast float %2763, %2765
  %2819 = fsub fast float %2768, %2767
  %2820 = fsub fast float %2761, %2762
  %2821 = fsub fast float %2764, %2765
  %2822 = fsub fast float %2766, %2767
  %2823 = fmul fast float %2819, %2821
  %2824 = fmul fast float %2822, %2818
  %2825 = fsub fast float %2823, %2824
  %2826 = fmul fast float %2822, %2817
  %2827 = fmul fast float %2819, %2820
  %2828 = fsub fast float %2826, %2827
  %2829 = fmul fast float %2818, %2820
  %2830 = fmul fast float %2821, %2817
  %2831 = fsub fast float %2829, %2830
  %2832 = call float @dx.op.dot3.f32(i32 55, float %2825, float %2828, float %2831, float %2762, float %2765, float %2767)  ; Dot3(ax,ay,az,bx,by,bz)
  %2833 = fcmp fast olt float %2832, 0.000000e+00
  %2834 = select i1 %2833, float -1.000000e+00, float 1.000000e+00
  %2835 = fmul fast float %2814, %955
  %2836 = fmul fast float %2814, %956
  %2837 = fmul fast float %2814, %957
  %2838 = fmul fast float %2815, %1116
  %2839 = fmul fast float %2815, %1117
  %2840 = fmul fast float %2815, %1118
  %2841 = fmul fast float %2816, %1269
  %2842 = fmul fast float %2816, %1270
  %2843 = fmul fast float %2816, %1271
  %2844 = fadd fast float %2838, %2841
  %2845 = fadd fast float %2844, %2835
  %2846 = fadd fast float %2839, %2842
  %2847 = fadd fast float %2846, %2836
  %2848 = fadd fast float %2840, %2843
  %2849 = fadd fast float %2848, %2837
  %2850 = call float @dx.op.dot3.f32(i32 55, float %2845, float %2847, float %2849, float %2845, float %2847, float %2849)  ; Dot3(ax,ay,az,bx,by,bz)
  %2851 = call float @dx.op.unary.f32(i32 25, float %2850)  ; Rsqrt(value)
  %2852 = fmul fast float %2845, %2851
  %2853 = fmul fast float %2847, %2851
  %2854 = fmul fast float %2849, %2851
  br i1 %1361, label %2855, label %2868

; <label>:2855                                    ; preds = %2734
  %2856 = fmul fast float %2852, %418
  %2857 = fmul fast float %2853, %418
  %2858 = fmul fast float %2854, %418
  %2859 = fmul fast float %2856, %401
  %2860 = call float @dx.op.tertiary.f32(i32 46, float %2857, float %405, float %2859)  ; FMad(a,b,c)
  %2861 = call float @dx.op.tertiary.f32(i32 46, float %2858, float %409, float %2860)  ; FMad(a,b,c)
  %2862 = fmul fast float %2856, %402
  %2863 = call float @dx.op.tertiary.f32(i32 46, float %2857, float %406, float %2862)  ; FMad(a,b,c)
  %2864 = call float @dx.op.tertiary.f32(i32 46, float %2858, float %410, float %2863)  ; FMad(a,b,c)
  %2865 = fmul fast float %2856, %403
  %2866 = call float @dx.op.tertiary.f32(i32 46, float %2857, float %407, float %2865)  ; FMad(a,b,c)
  %2867 = call float @dx.op.tertiary.f32(i32 46, float %2858, float %411, float %2866)  ; FMad(a,b,c)
  br label %3045

; <label>:2868                                    ; preds = %2734
  br i1 %654, label %2966, label %2869, !dx.controlflow.hints !48

; <label>:2869                                    ; preds = %2868
  %2870 = fsub fast float %817, %762
  %2871 = fmul fast float %758, %2870
  %2872 = fsub fast float %818, %763
  %2873 = fmul fast float %758, %2872
  %2874 = fsub fast float %819, %764
  %2875 = fmul fast float %758, %2874
  %2876 = fsub fast float %872, %762
  %2877 = fmul fast float %758, %2876
  %2878 = fsub fast float %873, %763
  %2879 = fmul fast float %758, %2878
  %2880 = fsub fast float %874, %764
  %2881 = fmul fast float %758, %2880
  %2882 = fsub fast float %1551, %1552
  %2883 = fsub fast float %1554, %1555
  %2884 = fsub fast float %1550, %1552
  %2885 = fsub fast float %1553, %1555
  %2886 = call float @dx.op.unary.f32(i32 6, float %2882)  ; FAbs(value)
  %2887 = call float @dx.op.unary.f32(i32 6, float %2884)  ; FAbs(value)
  %2888 = fadd fast float %2887, %2886
  %2889 = fcmp fast ogt float %2888, 0x3EB0C6F7A0000000
  br i1 %2889, label %2909, label %2890, !dx.controlflow.hints !49

; <label>:2890                                    ; preds = %2869
  %2891 = fcmp fast oge float %2854, 0.000000e+00
  %2892 = select i1 %2891, float 1.000000e+00, float -1.000000e+00
  %2893 = fadd fast float %2892, %2854
  %2894 = fdiv fast float 1.000000e+00, %2893
  %2895 = fsub fast float -0.000000e+00, %2894
  %2896 = fmul fast float %2852, %2853
  %2897 = fmul fast float %2896, %2895
  %2898 = fmul fast float %2852, %2852
  %2899 = fmul fast float %2898, %2892
  %2900 = fmul fast float %2899, %2895
  %2901 = fadd fast float %2900, 1.000000e+00
  %2902 = fmul fast float %2897, %2892
  %2903 = fmul fast float %2852, %2892
  %2904 = fsub fast float -0.000000e+00, %2903
  %2905 = fmul fast float %2853, %2853
  %2906 = fmul fast float %2905, %2895
  %2907 = fadd fast float %2906, %2892
  %2908 = fsub fast float -0.000000e+00, %2853
  br label %2999

; <label>:2909                                    ; preds = %2869
  %2910 = fmul fast float %2853, %2881
  %2911 = fmul fast float %2854, %2879
  %2912 = fsub fast float %2910, %2911
  %2913 = fmul fast float %2854, %2877
  %2914 = fmul fast float %2852, %2881
  %2915 = fsub fast float %2913, %2914
  %2916 = fmul fast float %2852, %2879
  %2917 = fmul fast float %2853, %2877
  %2918 = fsub fast float %2916, %2917
  %2919 = fmul fast float %2854, %2873
  %2920 = fmul fast float %2853, %2875
  %2921 = fsub fast float %2919, %2920
  %2922 = fmul fast float %2852, %2875
  %2923 = fmul fast float %2854, %2871
  %2924 = fsub fast float %2922, %2923
  %2925 = fmul fast float %2853, %2871
  %2926 = fmul fast float %2852, %2873
  %2927 = fsub fast float %2925, %2926
  %2928 = fmul fast float %2912, %2882
  %2929 = fmul fast float %2915, %2882
  %2930 = fmul fast float %2918, %2882
  %2931 = fmul fast float %2921, %2884
  %2932 = fmul fast float %2924, %2884
  %2933 = fmul fast float %2927, %2884
  %2934 = fadd fast float %2928, %2931
  %2935 = fadd fast float %2929, %2932
  %2936 = fadd fast float %2930, %2933
  %2937 = fmul fast float %2912, %2883
  %2938 = fmul fast float %2915, %2883
  %2939 = fmul fast float %2918, %2883
  %2940 = fmul fast float %2921, %2885
  %2941 = fmul fast float %2924, %2885
  %2942 = fmul fast float %2927, %2885
  %2943 = fadd fast float %2937, %2940
  %2944 = fadd fast float %2938, %2941
  %2945 = fadd fast float %2939, %2942
  %2946 = call float @dx.op.dot3.f32(i32 55, float %2934, float %2935, float %2936, float %2934, float %2935, float %2936)  ; Dot3(ax,ay,az,bx,by,bz)
  %2947 = call float @dx.op.unary.f32(i32 25, float %2946)  ; Rsqrt(value)
  %2948 = fmul fast float %2947, %2934
  %2949 = fmul fast float %2947, %2935
  %2950 = fmul fast float %2947, %2936
  %2951 = fmul fast float %2950, %2853
  %2952 = fmul fast float %2949, %2854
  %2953 = fsub fast float %2951, %2952
  %2954 = fmul fast float %2948, %2854
  %2955 = fmul fast float %2950, %2852
  %2956 = fsub fast float %2954, %2955
  %2957 = fmul fast float %2949, %2852
  %2958 = fmul fast float %2948, %2853
  %2959 = fsub fast float %2957, %2958
  %2960 = call float @dx.op.dot3.f32(i32 55, float %2943, float %2944, float %2945, float %2953, float %2956, float %2959)  ; Dot3(ax,ay,az,bx,by,bz)
  %2961 = fcmp fast olt float %2960, 0.000000e+00
  %2962 = select i1 %2961, float -1.000000e+00, float 1.000000e+00
  %2963 = fmul fast float %2953, %2962
  %2964 = fmul fast float %2956, %2962
  %2965 = fmul fast float %2959, %2962
  br label %2999

; <label>:2966                                    ; preds = %2868
  %2967 = fmul fast float %2814, %1027
  %2968 = fmul fast float %2814, %1028
  %2969 = fmul fast float %2814, %1029
  %2970 = fmul fast float %2814, %1030
  %2971 = fmul fast float %2815, %1183
  %2972 = fmul fast float %2815, %1184
  %2973 = fmul fast float %2815, %1185
  %2974 = fmul fast float %2815, %1186
  %2975 = fmul fast float %2816, %1336
  %2976 = fmul fast float %2816, %1337
  %2977 = fmul fast float %2816, %1338
  %2978 = fmul fast float %2816, %1339
  %2979 = fadd fast float %2971, %2975
  %2980 = fadd fast float %2979, %2967
  %2981 = fadd fast float %2972, %2976
  %2982 = fadd fast float %2981, %2968
  %2983 = fadd fast float %2973, %2977
  %2984 = fadd fast float %2983, %2969
  %2985 = fadd fast float %2974, %2978
  %2986 = fadd fast float %2985, %2970
  %2987 = fmul fast float %2847, %2984
  %2988 = fmul fast float %2849, %2982
  %2989 = fsub fast float %2987, %2988
  %2990 = fmul fast float %2849, %2980
  %2991 = fmul fast float %2845, %2984
  %2992 = fsub fast float %2990, %2991
  %2993 = fmul fast float %2845, %2982
  %2994 = fmul fast float %2847, %2980
  %2995 = fsub fast float %2993, %2994
  %2996 = fmul fast float %2989, %2986
  %2997 = fmul fast float %2992, %2986
  %2998 = fmul fast float %2995, %2986
  br label %2999

; <label>:2999                                    ; preds = %2966, %2909, %2890
  %3000 = phi float [ %2980, %2966 ], [ %2948, %2909 ], [ %2901, %2890 ]
  %3001 = phi float [ %2982, %2966 ], [ %2949, %2909 ], [ %2902, %2890 ]
  %3002 = phi float [ %2984, %2966 ], [ %2950, %2909 ], [ %2904, %2890 ]
  %3003 = phi float [ %2996, %2966 ], [ %2963, %2909 ], [ %2897, %2890 ]
  %3004 = phi float [ %2997, %2966 ], [ %2964, %2909 ], [ %2907, %2890 ]
  %3005 = phi float [ %2998, %2966 ], [ %2965, %2909 ], [ %2908, %2890 ]
  %3006 = phi float [ %2845, %2966 ], [ %2852, %2909 ], [ %2852, %2890 ]
  %3007 = phi float [ %2847, %2966 ], [ %2853, %2909 ], [ %2853, %2890 ]
  %3008 = phi float [ %2849, %2966 ], [ %2854, %2909 ], [ %2854, %2890 ]
  %3009 = fmul fast float %401, %416
  %3010 = fmul fast float %402, %416
  %3011 = fmul fast float %403, %416
  %3012 = fmul fast float %405, %417
  %3013 = fmul fast float %406, %417
  %3014 = fmul fast float %407, %417
  %3015 = fmul fast float %418, %409
  %3016 = fmul fast float %418, %410
  %3017 = fmul fast float %418, %411
  %3018 = fmul fast float %3000, %3009
  %3019 = call float @dx.op.tertiary.f32(i32 46, float %3001, float %3012, float %3018)  ; FMad(a,b,c)
  %3020 = call float @dx.op.tertiary.f32(i32 46, float %3002, float %3015, float %3019)  ; FMad(a,b,c)
  %3021 = fmul fast float %3000, %3010
  %3022 = call float @dx.op.tertiary.f32(i32 46, float %3001, float %3013, float %3021)  ; FMad(a,b,c)
  %3023 = call float @dx.op.tertiary.f32(i32 46, float %3002, float %3016, float %3022)  ; FMad(a,b,c)
  %3024 = fmul fast float %3000, %3011
  %3025 = call float @dx.op.tertiary.f32(i32 46, float %3001, float %3014, float %3024)  ; FMad(a,b,c)
  %3026 = call float @dx.op.tertiary.f32(i32 46, float %3002, float %3017, float %3025)  ; FMad(a,b,c)
  %3027 = fmul fast float %3003, %3009
  %3028 = call float @dx.op.tertiary.f32(i32 46, float %3004, float %3012, float %3027)  ; FMad(a,b,c)
  %3029 = call float @dx.op.tertiary.f32(i32 46, float %3005, float %3015, float %3028)  ; FMad(a,b,c)
  %3030 = fmul fast float %3003, %3010
  %3031 = call float @dx.op.tertiary.f32(i32 46, float %3004, float %3013, float %3030)  ; FMad(a,b,c)
  %3032 = call float @dx.op.tertiary.f32(i32 46, float %3005, float %3016, float %3031)  ; FMad(a,b,c)
  %3033 = fmul fast float %3003, %3011
  %3034 = call float @dx.op.tertiary.f32(i32 46, float %3004, float %3014, float %3033)  ; FMad(a,b,c)
  %3035 = call float @dx.op.tertiary.f32(i32 46, float %3005, float %3017, float %3034)  ; FMad(a,b,c)
  %3036 = fmul fast float %3006, %3009
  %3037 = call float @dx.op.tertiary.f32(i32 46, float %3007, float %3012, float %3036)  ; FMad(a,b,c)
  %3038 = call float @dx.op.tertiary.f32(i32 46, float %3008, float %3015, float %3037)  ; FMad(a,b,c)
  %3039 = fmul fast float %3006, %3010
  %3040 = call float @dx.op.tertiary.f32(i32 46, float %3007, float %3013, float %3039)  ; FMad(a,b,c)
  %3041 = call float @dx.op.tertiary.f32(i32 46, float %3008, float %3016, float %3040)  ; FMad(a,b,c)
  %3042 = fmul fast float %3006, %3011
  %3043 = call float @dx.op.tertiary.f32(i32 46, float %3007, float %3014, float %3042)  ; FMad(a,b,c)
  %3044 = call float @dx.op.tertiary.f32(i32 46, float %3008, float %3017, float %3043)  ; FMad(a,b,c)
  br label %3045

; <label>:3045                                    ; preds = %2999, %2855
  %3046 = phi float [ %3020, %2999 ], [ 0.000000e+00, %2855 ]
  %3047 = phi float [ %3023, %2999 ], [ 0.000000e+00, %2855 ]
  %3048 = phi float [ %3026, %2999 ], [ 0.000000e+00, %2855 ]
  %3049 = phi float [ %3029, %2999 ], [ 0.000000e+00, %2855 ]
  %3050 = phi float [ %3032, %2999 ], [ 0.000000e+00, %2855 ]
  %3051 = phi float [ %3035, %2999 ], [ 0.000000e+00, %2855 ]
  %3052 = phi float [ %3038, %2999 ], [ %2861, %2855 ]
  %3053 = phi float [ %3041, %2999 ], [ %2864, %2855 ]
  %3054 = phi float [ %3044, %2999 ], [ %2867, %2855 ]
  %3055 = fmul float %2738, %2814
  %3056 = fmul float %2741, %2814
  %3057 = fmul float %2744, %2814
  %3058 = fmul float %2737, %2815
  %3059 = fmul float %2740, %2815
  %3060 = fmul float %2743, %2815
  %3061 = fadd float %3055, %3058
  %3062 = fadd float %3056, %3059
  %3063 = fadd float %3057, %3060
  %3064 = fmul float %2736, %2816
  %3065 = fmul float %2739, %2816
  %3066 = fmul float %2742, %2816
  %3067 = fadd float %3064, %3061
  %3068 = fadd float %3065, %3062
  %3069 = fadd float %3066, %3063
  %3070 = fmul float %1563, %2814
  %3071 = fmul float %1567, %2814
  %3072 = fmul float %1571, %2814
  %3073 = fmul float %2755, %2815
  %3074 = fmul float %2757, %2815
  %3075 = fmul float %2759, %2815
  %3076 = fadd float %3070, %3073
  %3077 = fadd float %3071, %3074
  %3078 = fadd float %3072, %3075
  %3079 = fmul float %2754, %2816
  %3080 = fmul float %2756, %2816
  %3081 = fmul float %2758, %2816
  %3082 = fadd float %3079, %3076
  %3083 = fadd float %3080, %3077
  %3084 = fadd float %3081, %3078
  %3085 = fmul fast float %2814, %2747
  %3086 = fmul fast float %2814, %2750
  %3087 = fmul fast float %2814, %2753
  %3088 = fmul fast float %2815, %2746
  %3089 = fmul fast float %2815, %2749
  %3090 = fmul fast float %2815, %2752
  %3091 = fmul fast float %2816, %2745
  %3092 = fmul fast float %2816, %2748
  %3093 = fmul fast float %2816, %2751
  %3094 = fadd fast float %3088, %3091
  %3095 = fadd fast float %3094, %3085
  %3096 = fadd fast float %3089, %3092
  %3097 = fadd fast float %3096, %3086
  %3098 = fadd fast float %3090, %3093
  %3099 = fadd fast float %3098, %3087
  %3100 = fmul fast float %3095, %573
  %3101 = call float @dx.op.tertiary.f32(i32 46, float %3097, float %576, float %3100)  ; FMad(a,b,c)
  %3102 = call float @dx.op.tertiary.f32(i32 46, float %3099, float %579, float %3101)  ; FMad(a,b,c)
  %3103 = fadd fast float %3102, %606
  %3104 = fmul fast float %3095, %574
  %3105 = call float @dx.op.tertiary.f32(i32 46, float %3097, float %577, float %3104)  ; FMad(a,b,c)
  %3106 = call float @dx.op.tertiary.f32(i32 46, float %3099, float %580, float %3105)  ; FMad(a,b,c)
  %3107 = fadd fast float %3106, %607
  %3108 = fmul fast float %3095, %575
  %3109 = call float @dx.op.tertiary.f32(i32 46, float %3097, float %578, float %3108)  ; FMad(a,b,c)
  %3110 = call float @dx.op.tertiary.f32(i32 46, float %3099, float %581, float %3109)  ; FMad(a,b,c)
  %3111 = fadd fast float %3110, %608
  %3112 = fmul fast float %3103, %184
  %3113 = call float @dx.op.tertiary.f32(i32 46, float %3107, float %189, float %3112)  ; FMad(a,b,c)
  %3114 = call float @dx.op.tertiary.f32(i32 46, float %3111, float %194, float %3113)  ; FMad(a,b,c)
  %3115 = fadd fast float %3114, %199
  %3116 = fmul fast float %3103, %185
  %3117 = call float @dx.op.tertiary.f32(i32 46, float %3107, float %190, float %3116)  ; FMad(a,b,c)
  %3118 = call float @dx.op.tertiary.f32(i32 46, float %3111, float %195, float %3117)  ; FMad(a,b,c)
  %3119 = fadd fast float %3118, %200
  %3120 = fmul fast float %3103, %186
  %3121 = call float @dx.op.tertiary.f32(i32 46, float %3107, float %191, float %3120)  ; FMad(a,b,c)
  %3122 = call float @dx.op.tertiary.f32(i32 46, float %3111, float %196, float %3121)  ; FMad(a,b,c)
  %3123 = fadd fast float %3122, %201
  %3124 = fmul fast float %3103, %187
  %3125 = call float @dx.op.tertiary.f32(i32 46, float %3107, float %192, float %3124)  ; FMad(a,b,c)
  %3126 = call float @dx.op.tertiary.f32(i32 46, float %3111, float %197, float %3125)  ; FMad(a,b,c)
  %3127 = fadd fast float %3126, %202
  %3128 = fmul fast float %2814, %2767
  %3129 = fmul fast float %2815, %2766
  %3130 = fmul fast float %2816, %2768
  %3131 = fadd fast float %3129, %3130
  %3132 = fadd fast float %3131, %3128
  %3133 = fsub fast float %98, %144
  %3134 = fsub fast float %99, %145
  %3135 = fmul fast float %3133, %147
  %3136 = fmul fast float %3134, %148
  %3137 = fadd fast float %3135, -5.000000e-01
  %3138 = fadd fast float %3136, -5.000000e-01
  %3139 = fmul fast float %3137, 2.000000e+00
  %3140 = fmul fast float %3138, -2.000000e+00
  %3141 = fmul fast float %3139, %3132
  %3142 = fmul fast float %3140, %3132
  %3143 = fmul fast float %3132, %225
  %3144 = fcmp ogt float %2834, 0.000000e+00
  %3145 = select i1 %3144, float 1.000000e+00, float -1.000000e+00
  br label %3146

; <label>:3146                                    ; preds = %3045, %84
  %3147 = phi float [ %3141, %3045 ], [ 0.000000e+00, %84 ]
  %3148 = phi float [ %3142, %3045 ], [ 0.000000e+00, %84 ]
  %3149 = phi float [ %3143, %3045 ], [ 0.000000e+00, %84 ]
  %3150 = phi float [ %3132, %3045 ], [ 0.000000e+00, %84 ]
  %3151 = phi float [ %3115, %3045 ], [ 0.000000e+00, %84 ]
  %3152 = phi float [ %3119, %3045 ], [ 0.000000e+00, %84 ]
  %3153 = phi float [ %3123, %3045 ], [ 0.000000e+00, %84 ]
  %3154 = phi float [ %3127, %3045 ], [ 0.000000e+00, %84 ]
  %3155 = phi float [ %3145, %3045 ], [ -1.000000e+00, %84 ]
  %3156 = phi float [ %3046, %3045 ], [ 1.000000e+00, %84 ]
  %3157 = phi float [ %3047, %3045 ], [ 0.000000e+00, %84 ]
  %3158 = phi float [ %3048, %3045 ], [ 0.000000e+00, %84 ]
  %3159 = phi float [ %3049, %3045 ], [ 0.000000e+00, %84 ]
  %3160 = phi float [ %3050, %3045 ], [ 1.000000e+00, %84 ]
  %3161 = phi float [ %3051, %3045 ], [ 0.000000e+00, %84 ]
  %3162 = phi float [ %3052, %3045 ], [ 0.000000e+00, %84 ]
  %3163 = phi float [ %3053, %3045 ], [ 0.000000e+00, %84 ]
  %3164 = phi float [ %3054, %3045 ], [ 1.000000e+00, %84 ]
  %3165 = phi float [ %3067, %3045 ], [ 0.000000e+00, %84 ]
  %3166 = phi float [ %3068, %3045 ], [ 0.000000e+00, %84 ]
  %3167 = phi float [ %3069, %3045 ], [ 0.000000e+00, %84 ]
  %3168 = phi float [ %3082, %3045 ], [ 0.000000e+00, %84 ]
  %3169 = phi float [ %3083, %3045 ], [ 0.000000e+00, %84 ]
  %3170 = phi float [ %3084, %3045 ], [ 0.000000e+00, %84 ]
  %3171 = phi i32 [ %265, %3045 ], [ 0, %84 ]
  %3172 = fsub float %3165, %131
  %3173 = fsub float %3166, %132
  %3174 = fsub float %3167, %133
  %3175 = call float @dx.op.tertiary.f32(i32 46, float %127, float 2.097152e+06, float %3172), !dx.precise !39  ; FMad(a,b,c)
  %3176 = call float @dx.op.tertiary.f32(i32 46, float %128, float 2.097152e+06, float %3173), !dx.precise !39  ; FMad(a,b,c)
  %3177 = call float @dx.op.tertiary.f32(i32 46, float %129, float 2.097152e+06, float %3174), !dx.precise !39  ; FMad(a,b,c)
  %3178 = call float @dx.op.tertiary.f32(i32 46, float %156, float 2.097152e+06, float %3175), !dx.precise !39  ; FMad(a,b,c)
  %3179 = call float @dx.op.tertiary.f32(i32 46, float %157, float 2.097152e+06, float %3176), !dx.precise !39  ; FMad(a,b,c)
  %3180 = call float @dx.op.tertiary.f32(i32 46, float %158, float 2.097152e+06, float %3177), !dx.precise !39  ; FMad(a,b,c)
  %3181 = fsub float %3172, %3178
  %3182 = fsub float %3173, %3179
  %3183 = fsub float %3174, %3180
  %3184 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3185 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3184, i32 %3171, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3186 = extractvalue %dx.types.ResRet.f32 %3185, 0
  %3187 = bitcast float %3186 to i32
  %3188 = and i32 %3187, 64
  %3189 = icmp ne i32 %3188, 0
  %3190 = select i1 %3189, float -1.000000e+00, float 1.000000e+00
  %3191 = fmul fast float %3155, %155
  %3192 = fmul fast float %3191, %3190
  %3193 = fmul fast float %3192, %153
  %3194 = fadd fast float %3193, %152
  %3195 = call float @dx.op.dot3.f32(i32 55, float %150, float %151, float %3194, float %150, float %151, float %3194)  ; Dot3(ax,ay,az,bx,by,bz)
  %3196 = call float @dx.op.unary.f32(i32 25, float %3195)  ; Rsqrt(value)
  %3197 = fmul fast float %3196, %150
  %3198 = fmul fast float %3196, %151
  %3199 = fmul fast float %3194, %3196
  %3200 = fmul fast float %3197, %3156
  %3201 = call float @dx.op.tertiary.f32(i32 46, float %3198, float %3159, float %3200)  ; FMad(a,b,c)
  %3202 = call float @dx.op.tertiary.f32(i32 46, float %3199, float %3162, float %3201)  ; FMad(a,b,c)
  %3203 = fmul fast float %3197, %3157
  %3204 = call float @dx.op.tertiary.f32(i32 46, float %3198, float %3160, float %3203)  ; FMad(a,b,c)
  %3205 = call float @dx.op.tertiary.f32(i32 46, float %3199, float %3163, float %3204)  ; FMad(a,b,c)
  %3206 = fmul fast float %3197, %3158
  %3207 = call float @dx.op.tertiary.f32(i32 46, float %3198, float %3161, float %3206)  ; FMad(a,b,c)
  %3208 = call float @dx.op.tertiary.f32(i32 46, float %3199, float %3164, float %3207)  ; FMad(a,b,c)
  %3209 = call float @dx.op.dot3.f32(i32 55, float %3202, float %3205, float %3208, float %3202, float %3205, float %3208)  ; Dot3(ax,ay,az,bx,by,bz)
  %3210 = call float @dx.op.unary.f32(i32 25, float %3209)  ; Rsqrt(value)
  %3211 = fmul fast float %3192, %3202
  %3212 = fmul fast float %3211, %3210
  %3213 = fmul fast float %3192, %3205
  %3214 = fmul fast float %3213, %3210
  %3215 = fmul fast float %3208, %3192
  %3216 = fmul fast float %3215, %3210
  %3217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3218 = extractvalue %dx.types.CBufRet.f32 %3217, 0
  %3219 = extractvalue %dx.types.CBufRet.f32 %3217, 1
  %3220 = extractvalue %dx.types.CBufRet.f32 %3217, 2
  %3221 = extractvalue %dx.types.CBufRet.f32 %3217, 3
  %3222 = fmul fast float %3219, %3218
  %3223 = fmul fast float %3220, %3218
  %3224 = fmul fast float %3221, %3218
  %3225 = and i32 %3187, 8
  %3226 = icmp eq i32 %3225, 0
  br i1 %3226, label %3273, label %3227

; <label>:3227                                    ; preds = %3146
  %3228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 217)  ; CBufferLoadLegacy(handle,regIndex)
  %3229 = extractvalue %dx.types.CBufRet.f32 %3228, 3
  %3230 = fcmp fast ogt float %3229, 0.000000e+00
  br i1 %3230, label %3231, label %3273, !dx.controlflow.hints !50

; <label>:3231                                    ; preds = %3227
  %3232 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 151)  ; CBufferLoadLegacy(handle,regIndex)
  %3233 = extractvalue %dx.types.CBufRet.f32 %3232, 2
  %3234 = extractvalue %dx.types.CBufRet.f32 %3232, 3
  %3235 = fmul fast float %3233, %98
  %3236 = fmul fast float %3234, %99
  %3237 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3238 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3239 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3237, %dx.types.Handle %3238, float %3235, float %3236, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3240 = extractvalue %dx.types.ResRet.f32 %3239, 0
  %3241 = extractvalue %dx.types.ResRet.f32 %3239, 1
  %3242 = extractvalue %dx.types.ResRet.f32 %3239, 2
  %3243 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3244 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3243, %dx.types.Handle %3238, float %3235, float %3236, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3245 = extractvalue %dx.types.ResRet.f32 %3244, 0
  %3246 = extractvalue %dx.types.ResRet.f32 %3244, 1
  %3247 = extractvalue %dx.types.ResRet.f32 %3244, 2
  %3248 = extractvalue %dx.types.ResRet.f32 %3244, 3
  %3249 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3250 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3249, %dx.types.Handle %3238, float %3235, float %3236, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3251 = extractvalue %dx.types.ResRet.f32 %3250, 0
  %3252 = extractvalue %dx.types.ResRet.f32 %3250, 1
  %3253 = extractvalue %dx.types.ResRet.f32 %3250, 2
  %3254 = extractvalue %dx.types.ResRet.f32 %3250, 3
  %3255 = fmul fast float %3245, 2.000000e+00
  %3256 = fmul fast float %3246, 2.000000e+00
  %3257 = fmul fast float %3247, 2.000000e+00
  %3258 = fadd fast float %3255, 0xBFF0101020000000
  %3259 = fadd fast float %3256, 0xBFF0101020000000
  %3260 = fadd fast float %3257, 0xBFF0101020000000
  %3261 = fmul fast float %3248, %3212
  %3262 = fmul fast float %3248, %3214
  %3263 = fmul fast float %3248, %3216
  %3264 = fadd fast float %3258, %3261
  %3265 = fadd fast float %3259, %3262
  %3266 = fadd fast float %3260, %3263
  %3267 = call float @dx.op.dot3.f32(i32 55, float %3264, float %3265, float %3266, float %3264, float %3265, float %3266)  ; Dot3(ax,ay,az,bx,by,bz)
  %3268 = call float @dx.op.unary.f32(i32 25, float %3267)  ; Rsqrt(value)
  %3269 = fmul fast float %3268, %3264
  %3270 = fmul fast float %3268, %3265
  %3271 = fmul fast float %3268, %3266
  %3272 = fadd fast float %3254, %3253
  br label %3273

; <label>:3273                                    ; preds = %3231, %3227, %3146
  %3274 = phi float [ %3269, %3231 ], [ %3212, %3227 ], [ %3212, %3146 ]
  %3275 = phi float [ %3270, %3231 ], [ %3214, %3227 ], [ %3214, %3146 ]
  %3276 = phi float [ %3271, %3231 ], [ %3216, %3227 ], [ %3216, %3146 ]
  %3277 = phi float [ %3240, %3231 ], [ 0.000000e+00, %3227 ], [ 0.000000e+00, %3146 ]
  %3278 = phi float [ %3241, %3231 ], [ 0.000000e+00, %3227 ], [ 0.000000e+00, %3146 ]
  %3279 = phi float [ %3242, %3231 ], [ 0.000000e+00, %3227 ], [ 0.000000e+00, %3146 ]
  %3280 = phi float [ %3251, %3231 ], [ 0.000000e+00, %3227 ], [ 0.000000e+00, %3146 ]
  %3281 = phi float [ %3252, %3231 ], [ 0.000000e+00, %3227 ], [ 0.000000e+00, %3146 ]
  %3282 = phi float [ %3272, %3231 ], [ 1.000000e+00, %3227 ], [ 1.000000e+00, %3146 ]
  %3283 = and i32 %3187, 256
  %3284 = icmp ne i32 %3283, 0
  %3285 = and i32 %3187, 512
  %3286 = icmp ne i32 %3285, 0
  %3287 = select i1 %3286, float 1.000000e+00, float 0.000000e+00
  %3288 = select i1 %3284, float 2.000000e+00, float 0.000000e+00
  %3289 = fadd fast float %3288, %3287
  %3290 = fmul fast float %3289, 0x3FD5555560000000
  %3291 = and i32 %3187, 32
  %3292 = icmp eq i32 %3291, 0
  br i1 %3292, label %3343, label %3293, !dx.controlflow.hints !51

; <label>:3293                                    ; preds = %3273
  %3294 = fdiv fast float %3147, %3150
  %3295 = fdiv fast float %3148, %3150
  %3296 = fsub fast float %3294, %139
  %3297 = fsub fast float %3295, %140
  %3298 = fdiv fast float %3151, %3154
  %3299 = fdiv fast float %3152, %3154
  %3300 = fsub fast float %3298, %141
  %3301 = fsub fast float %3299, %142
  %3302 = fdiv fast float %3149, %3150
  %3303 = fdiv fast float %3153, %3154
  %3304 = fsub fast float %3296, %3300
  %3305 = fsub fast float %3297, %3301
  %3306 = fsub fast float %3302, %3303
  %3307 = fcmp fast ogt float %3304, 0.000000e+00
  %3308 = fcmp fast ogt float %3305, 0.000000e+00
  %3309 = fcmp fast olt float %3304, 0.000000e+00
  %3310 = fcmp fast olt float %3305, 0.000000e+00
  %3311 = zext i1 %3307 to i32
  %3312 = zext i1 %3308 to i32
  %3313 = zext i1 %3309 to i32
  %3314 = zext i1 %3310 to i32
  %3315 = sub nsw i32 %3311, %3313
  %3316 = sub nsw i32 %3312, %3314
  %3317 = sitofp i32 %3315 to float
  %3318 = sitofp i32 %3316 to float
  %3319 = call float @dx.op.unary.f32(i32 6, float %3304)  ; FAbs(value)
  %3320 = call float @dx.op.unary.f32(i32 6, float %3305)  ; FAbs(value)
  %3321 = call float @dx.op.unary.f32(i32 24, float %3319)  ; Sqrt(value)
  %3322 = call float @dx.op.unary.f32(i32 24, float %3320)  ; Sqrt(value)
  %3323 = fmul fast float %3317, 0x3FD69508A0000000
  %3324 = fmul fast float %3323, %3321
  %3325 = fmul fast float %3318, 0x3FD69508A0000000
  %3326 = fmul fast float %3325, %3322
  %3327 = fadd fast float %3324, 0x3FDFFFE000000000
  %3328 = fadd fast float %3326, 0x3FDFFFE000000000
  %3329 = bitcast float %3306 to i32
  %3330 = lshr i32 %3329, 16
  %3331 = uitofp i32 %3330 to float
  %3332 = fmul fast float %3331, 0x3EF0001000000000
  %3333 = fadd fast float %3332, 0x3EB999B340000000
  %3334 = call float @dx.op.unary.f32(i32 7, float %3333)  ; Saturate(value)
  %3335 = and i32 %3329, 65534
  %3336 = lshr i32 %3187, 26
  %3337 = and i32 %3336, 1
  %3338 = or i32 %3337, %3335
  %3339 = uitofp i32 %3338 to float
  %3340 = fmul fast float %3339, 0x3EF0001000000000
  %3341 = fadd fast float %3340, 0x3EB999B340000000
  %3342 = call float @dx.op.unary.f32(i32 7, float %3341)  ; Saturate(value)
  br label %3343

; <label>:3343                                    ; preds = %3293, %3273
  %3344 = phi float [ %3327, %3293 ], [ 0.000000e+00, %3273 ]
  %3345 = phi float [ %3328, %3293 ], [ 0.000000e+00, %3273 ]
  %3346 = phi float [ %3334, %3293 ], [ 0.000000e+00, %3273 ]
  %3347 = phi float [ %3342, %3293 ], [ 0.000000e+00, %3273 ]
  %3348 = fmul fast float %3281, 0x3FB47AE140000000
  %3349 = fsub fast float %3277, %3348
  %3350 = fsub fast float %3278, %3348
  %3351 = fsub fast float %3279, %3348
  %3352 = fmul fast float %3349, %3280
  %3353 = fmul fast float %3350, %3280
  %3354 = fmul fast float %3351, %3280
  %3355 = fadd fast float %3352, %3348
  %3356 = fadd fast float %3353, %3348
  %3357 = fadd fast float %3354, %3348
  %3358 = fmul fast float %3280, %3277
  %3359 = fmul fast float %3280, %3278
  %3360 = fmul fast float %3280, %3279
  %3361 = fsub fast float %3277, %3358
  %3362 = fsub fast float %3278, %3359
  %3363 = fsub fast float %3279, %3360
  %3364 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 156)  ; CBufferLoadLegacy(handle,regIndex)
  %3365 = extractvalue %dx.types.CBufRet.f32 %3364, 3
  %3366 = fmul fast float %3365, %3361
  %3367 = fmul fast float %3365, %3362
  %3368 = fmul fast float %3365, %3363
  %3369 = extractvalue %dx.types.CBufRet.f32 %3364, 0
  %3370 = extractvalue %dx.types.CBufRet.f32 %3364, 1
  %3371 = extractvalue %dx.types.CBufRet.f32 %3364, 2
  %3372 = fadd fast float %3366, %3369
  %3373 = fadd fast float %3367, %3370
  %3374 = fadd fast float %3368, %3371
  %3375 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %3376 = extractvalue %dx.types.CBufRet.f32 %3375, 3
  %3377 = fmul fast float %3376, %3355
  %3378 = fmul fast float %3376, %3356
  %3379 = fmul fast float %3376, %3357
  %3380 = extractvalue %dx.types.CBufRet.f32 %3375, 0
  %3381 = extractvalue %dx.types.CBufRet.f32 %3375, 1
  %3382 = extractvalue %dx.types.CBufRet.f32 %3375, 2
  %3383 = fadd fast float %3377, %3380
  %3384 = fadd fast float %3378, %3381
  %3385 = fadd fast float %3379, %3382
  %3386 = fmul fast float %3383, 0x3FDCCCCCC0000000
  %3387 = fmul fast float %3384, 0x3FDCCCCCC0000000
  %3388 = fmul fast float %3385, 0x3FDCCCCCC0000000
  %3389 = fadd fast float %3372, %3386
  %3390 = fadd fast float %3373, %3387
  %3391 = fadd fast float %3374, %3388
  %3392 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 166)  ; CBufferLoadLegacy(handle,regIndex)
  %3393 = extractvalue %dx.types.CBufRet.f32 %3392, 0
  %3394 = fmul fast float %3389, %3393
  %3395 = fmul fast float %3390, %3393
  %3396 = fmul fast float %3391, %3393
  %3397 = call float @dx.op.binary.f32(i32 35, float %3222, float 0.000000e+00)  ; FMax(a,b)
  %3398 = call float @dx.op.binary.f32(i32 35, float %3223, float 0.000000e+00)  ; FMax(a,b)
  %3399 = call float @dx.op.binary.f32(i32 35, float %3224, float 0.000000e+00)  ; FMax(a,b)
  %3400 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %3401 = extractvalue %dx.types.CBufRet.f32 %3400, 0
  %3402 = fcmp ogt float %3401, 0.000000e+00
  br i1 %3402, label %3403, label %3501, !dx.controlflow.hints !52

; <label>:3403                                    ; preds = %3343
  %3404 = add nsw i32 %3171, 18
  %3405 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3184, i32 %3404, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3406 = extractvalue %dx.types.ResRet.f32 %3405, 0
  %3407 = extractvalue %dx.types.ResRet.f32 %3405, 1
  %3408 = extractvalue %dx.types.ResRet.f32 %3405, 2
  %3409 = add nsw i32 %3171, 19
  %3410 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3184, i32 %3409, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3411 = extractvalue %dx.types.ResRet.f32 %3410, 0
  %3412 = extractvalue %dx.types.ResRet.f32 %3410, 1
  %3413 = extractvalue %dx.types.ResRet.f32 %3410, 2
  %3414 = add nsw i32 %3171, 17
  %3415 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3184, i32 %3414, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3416 = extractvalue %dx.types.ResRet.f32 %3415, 3
  %3417 = fmul float %3406, 2.097152e+06
  %3418 = fmul float %3407, 2.097152e+06
  %3419 = fmul float %3408, 2.097152e+06
  %3420 = fadd float %3417, %3411
  %3421 = fadd float %3418, %3412
  %3422 = fadd float %3419, %3413
  %3423 = fsub float %3420, %3417
  %3424 = fsub float %3421, %3418
  %3425 = fsub float %3422, %3419
  %3426 = fsub float %3411, %3423
  %3427 = fsub float %3412, %3424
  %3428 = fsub float %3413, %3425
  %3429 = add nsw i32 %3171, 26
  %3430 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3184, i32 %3429, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3431 = extractvalue %dx.types.ResRet.f32 %3430, 3
  %3432 = add nsw i32 %3171, 27
  %3433 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3184, i32 %3432, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3434 = extractvalue %dx.types.ResRet.f32 %3433, 3
  %3435 = add nsw i32 %3171, 32
  %3436 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3184, i32 %3435, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3437 = extractvalue %dx.types.ResRet.f32 %3436, 0
  %3438 = fsub float %3175, %3420
  %3439 = fsub float %3176, %3421
  %3440 = fsub float %3177, %3422
  %3441 = fsub float %3181, %3426
  %3442 = fsub float %3182, %3427
  %3443 = fsub float %3183, %3428
  %3444 = fadd float %3438, %3441
  %3445 = fadd float %3439, %3442
  %3446 = fadd float %3440, %3443
  %3447 = call float @dx.op.unary.f32(i32 6, float %3444)  ; FAbs(value)
  %3448 = call float @dx.op.unary.f32(i32 6, float %3445)  ; FAbs(value)
  %3449 = call float @dx.op.unary.f32(i32 6, float %3446)  ; FAbs(value)
  %3450 = fadd fast float %3416, 1.000000e+00
  %3451 = fadd fast float %3431, 1.000000e+00
  %3452 = fadd fast float %3434, 1.000000e+00
  %3453 = fcmp fast ogt float %3447, %3450
  %3454 = fcmp fast ogt float %3448, %3451
  %3455 = fcmp fast ogt float %3449, %3452
  %3456 = or i1 %3453, %3454
  %3457 = or i1 %3456, %3455
  br i1 %3457, label %3458, label %3485

; <label>:3458                                    ; preds = %3403
  %3459 = fmul fast float %3181, 0x3EF0000000000000
  %3460 = fmul fast float %3182, 0x3EF0000000000000
  %3461 = fmul fast float %3183, 0x3EF0000000000000
  %3462 = fmul fast float %3175, 0x3EF0000000000000
  %3463 = fmul fast float %3176, 0x3EF0000000000000
  %3464 = fmul fast float %3177, 0x3EF0000000000000
  %3465 = call float @dx.op.unary.f32(i32 22, float %3462)  ; Frc(value)
  %3466 = call float @dx.op.unary.f32(i32 22, float %3463)  ; Frc(value)
  %3467 = call float @dx.op.unary.f32(i32 22, float %3464)  ; Frc(value)
  %3468 = call float @dx.op.unary.f32(i32 22, float %3459)  ; Frc(value)
  %3469 = call float @dx.op.unary.f32(i32 22, float %3460)  ; Frc(value)
  %3470 = call float @dx.op.unary.f32(i32 22, float %3461)  ; Frc(value)
  %3471 = fadd fast float %3468, %3465
  %3472 = fadd fast float %3469, %3466
  %3473 = fadd fast float %3470, %3467
  %3474 = call float @dx.op.unary.f32(i32 22, float %3471)  ; Frc(value)
  %3475 = call float @dx.op.unary.f32(i32 22, float %3472)  ; Frc(value)
  %3476 = call float @dx.op.unary.f32(i32 22, float %3473)  ; Frc(value)
  %3477 = fmul fast float %3474, 6.553600e+04
  %3478 = fmul fast float %3475, 6.553600e+04
  %3479 = fmul fast float %3476, 6.553600e+04
  %3480 = call float @dx.op.dot3.f32(i32 55, float %3477, float %3478, float %3479, float 0x3F52E83A20000000, float 0x3F52E83A20000000, float 0x3F52E83A20000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3481 = call float @dx.op.unary.f32(i32 22, float %3480)  ; Frc(value)
  %3482 = fcmp fast ogt float %3481, 5.000000e-01
  %3483 = uitofp i1 %3482 to float
  %3484 = fsub fast float 1.000000e+00, %3483
  br label %3501

; <label>:3485                                    ; preds = %3403
  %3486 = fcmp fast ogt float %3437, 0.000000e+00
  br i1 %3486, label %3487, label %3501

; <label>:3487                                    ; preds = %3485
  %3488 = fsub fast float %3165, %3168
  %3489 = fsub fast float %3166, %3169
  %3490 = fsub fast float %3167, %3170
  %3491 = call float @dx.op.unary.f32(i32 6, float %3488)  ; FAbs(value)
  %3492 = call float @dx.op.unary.f32(i32 6, float %3489)  ; FAbs(value)
  %3493 = call float @dx.op.unary.f32(i32 6, float %3490)  ; FAbs(value)
  %3494 = call float @dx.op.binary.f32(i32 35, float %3492, float %3493)  ; FMax(a,b)
  %3495 = call float @dx.op.binary.f32(i32 35, float %3491, float %3494)  ; FMax(a,b)
  %3496 = fsub fast float %3495, %3437
  %3497 = call float @dx.op.unary.f32(i32 6, float %3496)  ; FAbs(value)
  %3498 = fmul fast float %3497, 2.000000e+01
  %3499 = call float @dx.op.unary.f32(i32 7, float %3498)  ; Saturate(value)
  %3500 = fsub fast float 1.000000e+00, %3499
  br label %3501

; <label>:3501                                    ; preds = %3487, %3485, %3458, %3343
  %3502 = phi float [ %3484, %3458 ], [ %3500, %3487 ], [ %3397, %3485 ], [ %3397, %3343 ]
  %3503 = phi float [ 1.000000e+00, %3458 ], [ 0.000000e+00, %3487 ], [ %3398, %3485 ], [ %3398, %3343 ]
  %3504 = phi float [ %3483, %3458 ], [ %3500, %3487 ], [ %3399, %3485 ], [ %3399, %3343 ]
  %3505 = fadd fast float %3502, %3394
  %3506 = fadd fast float %3503, %3395
  %3507 = fadd fast float %3504, %3396
  %3508 = fmul fast float %3274, 5.000000e-01
  %3509 = fmul fast float %3275, 5.000000e-01
  %3510 = fmul fast float %3276, 5.000000e-01
  %3511 = fadd fast float %3508, 5.000000e-01
  %3512 = fadd fast float %3509, 5.000000e-01
  %3513 = fadd fast float %3510, 5.000000e-01
  %3514 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 155)  ; CBufferLoadLegacy(handle,regIndex)
  %3515 = extractvalue %dx.types.CBufRet.f32 %3514, 2
  %3516 = fmul fast float %3515, %3505
  %3517 = fmul fast float %3515, %3506
  %3518 = fmul fast float %3515, %3507
  %3519 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 318)  ; CBufferLoadLegacy(handle,regIndex)
  %3520 = extractvalue %dx.types.CBufRet.f32 %3519, 0
  %3521 = call float @dx.op.binary.f32(i32 36, float %3516, float %3520)  ; FMin(a,b)
  %3522 = call float @dx.op.binary.f32(i32 36, float %3517, float %3520)  ; FMin(a,b)
  %3523 = call float @dx.op.binary.f32(i32 36, float %3518, float %3520)  ; FMin(a,b)
  br i1 %101, label %3524, label %3556

; <label>:3524                                    ; preds = %3501
  %3525 = fcmp fast olt float %3277, 0x3F69A57DA0000000
  br i1 %3525, label %3526, label %3528

; <label>:3526                                    ; preds = %3524
  %3527 = fmul fast float %3277, 0x4029D70A40000000
  br label %3534

; <label>:3528                                    ; preds = %3524
  %3529 = call float @dx.op.unary.f32(i32 23, float %3277)  ; Log(value)
  %3530 = fmul fast float %3529, 0x3FDAAAAAA0000000
  %3531 = call float @dx.op.unary.f32(i32 21, float %3530)  ; Exp(value)
  %3532 = fmul fast float %3531, 0x3FF0E147A0000000
  %3533 = fadd fast float %3532, 0xBFAC28F5C0000000
  br label %3534

; <label>:3534                                    ; preds = %3528, %3526
  %3535 = phi float [ %3527, %3526 ], [ %3533, %3528 ]
  %3536 = fcmp fast olt float %3278, 0x3F69A57DA0000000
  br i1 %3536, label %3537, label %3539

; <label>:3537                                    ; preds = %3534
  %3538 = fmul fast float %3278, 0x4029D70A40000000
  br label %3545

; <label>:3539                                    ; preds = %3534
  %3540 = call float @dx.op.unary.f32(i32 23, float %3278)  ; Log(value)
  %3541 = fmul fast float %3540, 0x3FDAAAAAA0000000
  %3542 = call float @dx.op.unary.f32(i32 21, float %3541)  ; Exp(value)
  %3543 = fmul fast float %3542, 0x3FF0E147A0000000
  %3544 = fadd fast float %3543, 0xBFAC28F5C0000000
  br label %3545

; <label>:3545                                    ; preds = %3539, %3537
  %3546 = phi float [ %3538, %3537 ], [ %3544, %3539 ]
  %3547 = fcmp fast olt float %3279, 0x3F69A57DA0000000
  br i1 %3547, label %3548, label %3550

; <label>:3548                                    ; preds = %3545
  %3549 = fmul fast float %3279, 0x4029D70A40000000
  br label %3556

; <label>:3550                                    ; preds = %3545
  %3551 = call float @dx.op.unary.f32(i32 23, float %3279)  ; Log(value)
  %3552 = fmul fast float %3551, 0x3FDAAAAAA0000000
  %3553 = call float @dx.op.unary.f32(i32 21, float %3552)  ; Exp(value)
  %3554 = fmul fast float %3553, 0x3FF0E147A0000000
  %3555 = fadd fast float %3554, 0xBFAC28F5C0000000
  br label %3556

; <label>:3556                                    ; preds = %3550, %3548, %3501
  %3557 = phi float [ %3277, %3501 ], [ %3535, %3550 ], [ %3535, %3548 ]
  %3558 = phi float [ %3278, %3501 ], [ %3546, %3550 ], [ %3546, %3548 ]
  %3559 = phi float [ %3279, %3501 ], [ %3555, %3550 ], [ %3549, %3548 ]
  %3560 = and i32 %89, 1
  %3561 = icmp eq i32 %3560, 0
  br i1 %3561, label %3568, label %3562, !dx.controlflow.hints !53

; <label>:3562                                    ; preds = %3556
  %3563 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3563, i32 %85, i32 %86, i32 undef, float %3521, float %3522, float %3523, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3564 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3564, i32 %85, i32 %86, i32 undef, float %3511, float %3512, float %3513, float %3290, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3565 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3565, i32 %85, i32 %86, i32 undef, float %3280, float %3281, float %3282, float 0x3FC09090A0000000, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3566 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3566, i32 %85, i32 %86, i32 undef, float %3557, float %3558, float %3559, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3567 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3567, i32 %85, i32 %86, i32 undef, float %3344, float %3345, float %3346, float %3347, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3568

; <label>:3568                                    ; preds = %3562, %3556
  %3569 = and i32 %89, 2
  %3570 = icmp eq i32 %3569, 0
  br i1 %3570, label %3578, label %3571, !dx.controlflow.hints !54

; <label>:3571                                    ; preds = %3568
  %3572 = add i32 %85, 1
  %3573 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3573, i32 %3572, i32 %86, i32 undef, float %3521, float %3522, float %3523, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3574 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3574, i32 %3572, i32 %86, i32 undef, float %3511, float %3512, float %3513, float %3290, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3575 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3575, i32 %3572, i32 %86, i32 undef, float %3280, float %3281, float %3282, float 0x3FC09090A0000000, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3576 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3576, i32 %3572, i32 %86, i32 undef, float %3557, float %3558, float %3559, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3577 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3577, i32 %3572, i32 %86, i32 undef, float %3344, float %3345, float %3346, float %3347, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3578

; <label>:3578                                    ; preds = %3571, %3568
  %3579 = and i32 %89, 4
  %3580 = icmp eq i32 %3579, 0
  br i1 %3580, label %3588, label %3581, !dx.controlflow.hints !55

; <label>:3581                                    ; preds = %3578
  %3582 = add i32 %86, 1
  %3583 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3583, i32 %85, i32 %3582, i32 undef, float %3521, float %3522, float %3523, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3584 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3584, i32 %85, i32 %3582, i32 undef, float %3511, float %3512, float %3513, float %3290, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3585 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3585, i32 %85, i32 %3582, i32 undef, float %3280, float %3281, float %3282, float 0x3FC09090A0000000, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3586 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3586, i32 %85, i32 %3582, i32 undef, float %3557, float %3558, float %3559, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3587 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3587, i32 %85, i32 %3582, i32 undef, float %3344, float %3345, float %3346, float %3347, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3588

; <label>:3588                                    ; preds = %3581, %3578
  %3589 = and i32 %89, 8
  %3590 = icmp eq i32 %3589, 0
  br i1 %3590, label %3599, label %3591, !dx.controlflow.hints !56

; <label>:3591                                    ; preds = %3588
  %3592 = add i32 %85, 1
  %3593 = add i32 %86, 1
  %3594 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3594, i32 %3592, i32 %3593, i32 undef, float %3521, float %3522, float %3523, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3595, i32 %3592, i32 %3593, i32 undef, float %3511, float %3512, float %3513, float %3290, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3596 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3596, i32 %3592, i32 %3593, i32 undef, float %3280, float %3281, float %3282, float 0x3FC09090A0000000, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3597 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3597, i32 %3592, i32 %3593, i32 undef, float %3557, float %3558, float %3559, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3598 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3598, i32 %3592, i32 %3593, i32 undef, float %3344, float %3345, float %3346, float %3347, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3599

; <label>:3599                                    ; preds = %3591, %3588, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!33}

!0 = !{!"dxc(private) 1.8.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 8}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !19, !25, !31}
!5 = !{!6, !8, !9, !10, !12, !13, !14, !15, !16, !18}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !11}
!11 = !{i32 0, i32 9}
!12 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !11}
!13 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !11}
!14 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !17}
!17 = !{i32 0, i32 5}
!18 = !{i32 9, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 9, i32 1, i32 11, i32 0, null}
!19 = !{!20, !21, !22, !23, !24}
!20 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !11}
!21 = !{i32 1, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !11}
!22 = !{i32 2, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !11}
!23 = !{i32 3, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !11}
!24 = !{i32 4, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !11}
!25 = !{!26, !27, !28, !29, !30}
!26 = !{i32 0, %hostlayout.View* undef, !"", i32 0, i32 0, i32 1, i32 6012, null}
!27 = !{i32 1, %Scene* undef, !"", i32 0, i32 1, i32 1, i32 188, null}
!28 = !{i32 2, %NaniteRaster* undef, !"", i32 0, i32 2, i32 1, i32 48, null}
!29 = !{i32 3, %Material* undef, !"", i32 0, i32 3, i32 1, i32 92, null}
!30 = !{i32 4, %UERootConstants* undef, !"", i32 3, i32 0, i32 1, i32 16, null}
!31 = !{!32}
!32 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!33 = !{void ()* @MainCS, !"MainCS", null, !4, !34}
!34 = !{i32 0, i64 16, i32 4, !35, i32 5, !36}
!35 = !{i32 64, i32 1, i32 1}
!36 = !{i32 0}
!37 = distinct !{!37, !"dx.controlflow.hints", i32 1}
!38 = distinct !{!38, !"dx.controlflow.hints", i32 1}
!39 = !{i32 1}
!40 = distinct !{!40, !"dx.controlflow.hints", i32 1}
!41 = distinct !{!41, !"dx.controlflow.hints", i32 1}
!42 = distinct !{!42, !"dx.controlflow.hints", i32 1}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 2}
!51 = distinct !{!51, !"dx.controlflow.hints", i32 1}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 1}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !"dx.controlflow.hints", i32 1}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 1}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
