;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 43d5cb2e6fe68055d7d8587260bf5014
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(32,1,1)
;
;
; Buffer Definitions:
;
; cbuffer View
; {
;
;   struct hostlayout.View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       row_major float4x4 View_MobileMultiviewDecalTransform;; Offset:  960
;       row_major float4x4 View_FirstPersonTransform; ; Offset: 1024
;       row_major float4x4 View_PrevFirstPersonTransform;; Offset: 1088
;       float3 View_ViewOriginHigh;                   ; Offset: 1152
;       float View_Padding1164;                       ; Offset: 1164
;       float3 View_ViewForward;                      ; Offset: 1168
;       float View_Padding1180;                       ; Offset: 1180
;       float3 View_ViewUp;                           ; Offset: 1184
;       float View_Padding1196;                       ; Offset: 1196
;       float3 View_ViewRight;                        ; Offset: 1200
;       float View_Padding1212;                       ; Offset: 1212
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1216
;       float View_Padding1228;                       ; Offset: 1228
;       float3 View_HMDViewNoRollRight;               ; Offset: 1232
;       float View_Padding1244;                       ; Offset: 1244
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1248
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1264
;       float3 View_ViewOriginLow;                    ; Offset: 1280
;       float View_Padding1292;                       ; Offset: 1292
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1296
;       float View_Padding1308;                       ; Offset: 1308
;       float3 View_WorldViewOriginHigh;              ; Offset: 1312
;       float View_Padding1324;                       ; Offset: 1324
;       float3 View_WorldViewOriginLow;               ; Offset: 1328
;       float View_Padding1340;                       ; Offset: 1340
;       float3 View_PreViewTranslationHigh;           ; Offset: 1344
;       float View_Padding1356;                       ; Offset: 1356
;       float3 View_PreViewTranslationLow;            ; Offset: 1360
;       float View_Padding1372;                       ; Offset: 1372
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1376
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1440
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1504
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1568
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1632
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1696
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1760
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1824
;       float View_Padding1836;                       ; Offset: 1836
;       float3 View_PrevWorldCameraOriginHigh;        ; Offset: 1840
;       float View_Padding1852;                       ; Offset: 1852
;       float3 View_PrevWorldCameraOriginLow;         ; Offset: 1856
;       float View_Padding1868;                       ; Offset: 1868
;       float3 View_PrevWorldViewOriginHigh;          ; Offset: 1872
;       float View_Padding1884;                       ; Offset: 1884
;       float3 View_PrevWorldViewOriginLow;           ; Offset: 1888
;       float View_Padding1900;                       ; Offset: 1900
;       float3 View_PrevPreViewTranslationHigh;       ; Offset: 1904
;       float View_Padding1916;                       ; Offset: 1916
;       float3 View_PrevPreViewTranslationLow;        ; Offset: 1920
;       float View_Padding1932;                       ; Offset: 1932
;       float3 View_ViewTilePosition;                 ; Offset: 1936
;       float View_Padding1948;                       ; Offset: 1948
;       float3 View_RelativeWorldCameraOriginTO;      ; Offset: 1952
;       float View_Padding1964;                       ; Offset: 1964
;       float3 View_RelativeWorldViewOriginTO;        ; Offset: 1968
;       float View_Padding1980;                       ; Offset: 1980
;       float3 View_RelativePreViewTranslationTO;     ; Offset: 1984
;       float View_Padding1996;                       ; Offset: 1996
;       float3 View_PrevRelativeWorldCameraOriginTO;  ; Offset: 2000
;       float View_Padding2012;                       ; Offset: 2012
;       float3 View_PrevRelativeWorldViewOriginTO;    ; Offset: 2016
;       float View_Padding2028;                       ; Offset: 2028
;       float3 View_RelativePrevPreViewTranslationTO; ; Offset: 2032
;       float View_Padding2044;                       ; Offset: 2044
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 2048
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 2112
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 2176
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 2240
;       float4 View_TemporalAAJitter;                 ; Offset: 2304
;       float4 View_GlobalClippingPlane;              ; Offset: 2320
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2336
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2344
;       float4 View_ViewRectMin;                      ; Offset: 2352
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2368
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2384
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2400
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2416
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2432
;       float4 View_ScreenToViewSpace;                ; Offset: 2448
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2464
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2472
;       int View_NumSceneColorMSAASamples;            ; Offset: 2480
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2484
;       float View_PreExposure;                       ; Offset: 2488
;       float View_OneOverPreExposure;                ; Offset: 2492
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2496
;       float4 View_SpecularOverrideParameter;        ; Offset: 2512
;       float4 View_NormalOverrideParameter;          ; Offset: 2528
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2544
;       float View_PrevFrameGameTime;                 ; Offset: 2552
;       float View_PrevFrameRealTime;                 ; Offset: 2556
;       float View_OutOfBoundsMask;                   ; Offset: 2560
;       float View_Padding2564;                       ; Offset: 2564
;       float View_Padding2568;                       ; Offset: 2568
;       float View_Padding2572;                       ; Offset: 2572
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2576
;       float View_CullingSign;                       ; Offset: 2588
;       float View_NearPlane;                         ; Offset: 2592
;       float View_OrthoFarPlane;                     ; Offset: 2596
;       float View_GameTime;                          ; Offset: 2600
;       float View_RealTime;                          ; Offset: 2604
;       float View_DeltaTime;                         ; Offset: 2608
;       float View_MaterialTextureMipBias;            ; Offset: 2612
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2616
;       uint View_Random;                             ; Offset: 2620
;       uint View_FrameNumber;                        ; Offset: 2624
;       uint View_FrameCounter;                       ; Offset: 2628
;       uint View_StateFrameIndexMod8;                ; Offset: 2632
;       uint View_StateFrameIndex;                    ; Offset: 2636
;       uint View_StateOutputFrameIndex;              ; Offset: 2640
;       uint View_DebugViewModeMask;                  ; Offset: 2644
;       uint View_WorldIsPaused;                      ; Offset: 2648
;       float View_CameraCut;                         ; Offset: 2652
;       float View_UnlitViewmodeMask;                 ; Offset: 2656
;       float View_Padding2660;                       ; Offset: 2660
;       float View_Padding2664;                       ; Offset: 2664
;       float View_Padding2668;                       ; Offset: 2668
;       float4 View_DirectionalLightColor;            ; Offset: 2672
;       float3 View_DirectionalLightDirection;        ; Offset: 2688
;       float View_Padding2700;                       ; Offset: 2700
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2704
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2736
;       float4 View_TemporalAAParams;                 ; Offset: 2768
;       float4 View_CircleDOFParams;                  ; Offset: 2784
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2800
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2804
;       float View_DepthOfFieldScale;                 ; Offset: 2808
;       float View_DepthOfFieldFocalLength;           ; Offset: 2812
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2816
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2820
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2824
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2828
;       float View_GeneralPurposeTweak;               ; Offset: 2832
;       float View_GeneralPurposeTweak2;              ; Offset: 2836
;       float View_DemosaicVposOffset;                ; Offset: 2840
;       float View_DecalDepthBias;                    ; Offset: 2844
;       float3 View_IndirectLightingColorScale;       ; Offset: 2848
;       float View_Padding2860;                       ; Offset: 2860
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2864
;       float View_Padding2876;                       ; Offset: 2876
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2880
;       float View_Padding2892;                       ; Offset: 2892
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2896
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2928
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2960
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2992
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 3024
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 3056
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 3072
;       float View_Padding3084;                       ; Offset: 3084
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 3088
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 3104
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 3168
;       float View_SkyAtmospherePresentInScene;       ; Offset: 3184
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 3188
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 3192
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 3196
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 3200
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 3216
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 3220
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 3224
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 3228
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 3232
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 3236
;       float View_Padding3240;                       ; Offset: 3240
;       float View_Padding3244;                       ; Offset: 3244
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 3248
;       float View_RenderingReflectionCaptureMask;    ; Offset: 3260
;       float View_RealTimeReflectionCapture;         ; Offset: 3264
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 3268
;       float View_Padding3272;                       ; Offset: 3272
;       float View_Padding3276;                       ; Offset: 3276
;       float4 View_AmbientCubemapTint;               ; Offset: 3280
;       float View_AmbientCubemapIntensity;           ; Offset: 3296
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 3300
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 3304
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 3308
;       float4 View_SkyLightColor;                    ; Offset: 3312
;       float View_SkyLightVolumetricScatteringIntensity;; Offset: 3328
;       float View_Padding3332;                       ; Offset: 3332
;       float View_Padding3336;                       ; Offset: 3336
;       float View_Padding3340;                       ; Offset: 3340
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3344
;       float View_MobilePreviewMode;                 ; Offset: 3472
;       float View_HMDEyePaddingOffset;               ; Offset: 3476
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3480
;       float View_ShowDecalsMask;                    ; Offset: 3484
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3488
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3492
;       float View_Padding3496;                       ; Offset: 3496
;       float View_Padding3500;                       ; Offset: 3500
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3504
;       int View_StereoPassIndex;                     ; Offset: 3516
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3520
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3616
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3712
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3808
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3904
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3908
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3912
;       int View_Padding3916;                         ; Offset: 3916
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3920
;       float View_Padding3932;                       ; Offset: 3932
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3936
;       float View_GlobalVolumeDimension;             ; Offset: 3948
;       float View_GlobalVolumeTexelSize;             ; Offset: 3952
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3956
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3960
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3964
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3968
;       float View_NotCoveredMinStepScale;            ; Offset: 3972
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3976
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3980
;       float View_ViewportScaleUI;                   ; Offset: 3984
;       float View_Padding3988;                       ; Offset: 3988
;       int2 View_CursorPosition;                     ; Offset: 3992
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 4000
;       float View_Padding4004;                       ; Offset: 4004
;       float View_Padding4008;                       ; Offset: 4008
;       float View_Padding4012;                       ; Offset: 4012
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 4016
;       float View_Padding4028;                       ; Offset: 4028
;       float3 View_VolumetricFogGridZParams;         ; Offset: 4032
;       float View_Padding4044;                       ; Offset: 4044
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 4048
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 4056
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 4064
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 4072
;       float2 View_VolumetricFogPrevUVMaxForTemporalBlend;; Offset: 4080
;       float View_Padding4088;                       ; Offset: 4088
;       float View_Padding4092;                       ; Offset: 4092
;       float3 View_VolumetricFogPrevResourceGridSize;; Offset: 4096
;       float View_Padding4108;                       ; Offset: 4108
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 4112
;       float2 View_VolumetricFogUVMax;               ; Offset: 4120
;       float View_VolumetricFogMaxDistance;          ; Offset: 4128
;       float View_Padding4132;                       ; Offset: 4132
;       float View_Padding4136;                       ; Offset: 4136
;       float View_Padding4140;                       ; Offset: 4140
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 4144
;       float View_Padding4156;                       ; Offset: 4156
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 4160
;       float View_Padding4172;                       ; Offset: 4172
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 4176
;       float View_VolumetricLightmapBrickSize;       ; Offset: 4188
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 4192
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 4204
;       float View_EyeToPixelSpreadAngle;             ; Offset: 4208
;       float View_Padding4212;                       ; Offset: 4212
;       float View_Padding4216;                       ; Offset: 4216
;       float View_Padding4220;                       ; Offset: 4220
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 4224
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 4256
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 4260
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 4264
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 4268
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 4272
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 4276
;       uint View_Padding4280;                        ; Offset: 4280
;       uint View_Padding4284;                        ; Offset: 4284
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 4288
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 4304
;       float View_Padding4312;                       ; Offset: 4312
;       float View_Padding4316;                       ; Offset: 4316
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 4320
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 4336
;       float View_MinRoughness;                      ; Offset: 4340
;       float View_Padding4344;                       ; Offset: 4344
;       float View_Padding4348;                       ; Offset: 4348
;       float4 View_HairRenderInfo;                   ; Offset: 4352
;       uint View_EnableSkyLight;                     ; Offset: 4368
;       uint View_HairRenderInfoBits;                 ; Offset: 4372
;       uint View_HairComponents;                     ; Offset: 4376
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 4380
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 4384
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 4400
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 4416
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4432
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4444
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4448
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4452
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4456
;       int View_PhysicsFieldTargetCount;             ; Offset: 4460
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4464
;       uint View_GPUSceneViewId;                     ; Offset: 4976
;       float View_ViewResolutionFraction;            ; Offset: 4980
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4984
;       float View_Padding4988;                       ; Offset: 4988
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4992
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 5008
;       float2 View_WorldDepthToPixelWorldRadius;     ; Offset: 5024
;       float View_Padding5032;                       ; Offset: 5032
;       float View_Padding5036;                       ; Offset: 5036
;       float4 View_ScreenRayLengthMultiplier;        ; Offset: 5040
;       float4 View_GlintLUTParameters0;              ; Offset: 5056
;       float4 View_GlintLUTParameters1;              ; Offset: 5072
;       float View_MaterialMaxEmissiveValue;          ; Offset: 5088
;       int View_PostVolumeUserFlags;                 ; Offset: 5092
;       int View_Padding5096;                         ; Offset: 5096
;       int View_Padding5100;                         ; Offset: 5100
;       int4 View_EnvironmentComponentsFlags;         ; Offset: 5104
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 5120
;       uint View_Padding5124;                        ; Offset: 5124
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 5128
;       uint View_Padding5132;                        ; Offset: 5132
;       uint BindlessSRV_View_VolumetricLightmapIndirectionTexture;; Offset: 5136
;       uint View_Padding5140;                        ; Offset: 5140
;       uint BindlessSRV_View_VolumetricLightmapBrickAmbientVector;; Offset: 5144
;       uint View_Padding5148;                        ; Offset: 5148
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 5152
;       uint View_Padding5156;                        ; Offset: 5156
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 5160
;       uint View_Padding5164;                        ; Offset: 5164
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 5168
;       uint View_Padding5172;                        ; Offset: 5172
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 5176
;       uint View_Padding5180;                        ; Offset: 5180
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 5184
;       uint View_Padding5188;                        ; Offset: 5188
;       uint BindlessSRV_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 5192
;       uint View_Padding5196;                        ; Offset: 5196
;       uint BindlessSRV_View_SkyBentNormalBrickTexture;; Offset: 5200
;       uint View_Padding5204;                        ; Offset: 5204
;       uint BindlessSRV_View_DirectionalLightShadowingBrickTexture;; Offset: 5208
;       uint View_Padding5212;                        ; Offset: 5212
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 5216
;       uint View_Padding5220;                        ; Offset: 5220
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 5224
;       uint View_Padding5228;                        ; Offset: 5228
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 5232
;       uint View_Padding5236;                        ; Offset: 5236
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 5240
;       uint View_Padding5244;                        ; Offset: 5244
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 5248
;       uint View_Padding5252;                        ; Offset: 5252
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 5256
;       uint View_Padding5260;                        ; Offset: 5260
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 5264
;       uint View_Padding5268;                        ; Offset: 5268
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 5272
;       uint View_Padding5276;                        ; Offset: 5276
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 5280
;       uint View_Padding5284;                        ; Offset: 5284
;       uint BindlessSRV_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 5288
;       uint View_Padding5292;                        ; Offset: 5292
;       uint BindlessSRV_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 5296
;       uint View_Padding5300;                        ; Offset: 5300
;       uint BindlessSRV_View_GlobalDistanceFieldPageTableTexture;; Offset: 5304
;       uint View_Padding5308;                        ; Offset: 5308
;       uint BindlessSRV_View_GlobalDistanceFieldMipTexture;; Offset: 5312
;       uint View_Padding5316;                        ; Offset: 5316
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 5320
;       uint View_Padding5324;                        ; Offset: 5324
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 5328
;       uint View_Padding5332;                        ; Offset: 5332
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 5336
;       uint View_Padding5340;                        ; Offset: 5340
;       uint BindlessSRV_View_AtmosphereTransmittanceTexture;; Offset: 5344
;       uint View_Padding5348;                        ; Offset: 5348
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 5352
;       uint View_Padding5356;                        ; Offset: 5356
;       uint BindlessSRV_View_AtmosphereIrradianceTexture;; Offset: 5360
;       uint View_Padding5364;                        ; Offset: 5364
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 5368
;       uint View_Padding5372;                        ; Offset: 5372
;       uint BindlessSRV_View_AtmosphereInscatterTexture;; Offset: 5376
;       uint View_Padding5380;                        ; Offset: 5380
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 5384
;       uint View_Padding5388;                        ; Offset: 5388
;       uint BindlessSRV_View_PerlinNoiseGradientTexture;; Offset: 5392
;       uint View_Padding5396;                        ; Offset: 5396
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 5400
;       uint View_Padding5404;                        ; Offset: 5404
;       uint BindlessSRV_View_PerlinNoise3DTexture;   ; Offset: 5408
;       uint View_Padding5412;                        ; Offset: 5412
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 5416
;       uint View_Padding5420;                        ; Offset: 5420
;       uint BindlessSRV_View_SobolSamplingTexture;   ; Offset: 5424
;       uint View_Padding5428;                        ; Offset: 5428
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 5432
;       uint View_Padding5436;                        ; Offset: 5436
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 5440
;       uint View_Padding5444;                        ; Offset: 5444
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 5448
;       uint View_Padding5452;                        ; Offset: 5452
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 5456
;       uint View_Padding5460;                        ; Offset: 5460
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 5464
;       uint View_Padding5468;                        ; Offset: 5468
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 5472
;       uint View_Padding5476;                        ; Offset: 5476
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 5480
;       uint View_Padding5484;                        ; Offset: 5484
;       uint BindlessSRV_View_PreIntegratedBRDF;      ; Offset: 5488
;       uint View_Padding5492;                        ; Offset: 5492
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 5496
;       uint View_Padding5500;                        ; Offset: 5500
;       uint BindlessSRV_View_SkyIrradianceEnvironmentMap;; Offset: 5504
;       uint View_Padding5508;                        ; Offset: 5508
;       uint BindlessSRV_View_TransmittanceLutTexture;; Offset: 5512
;       uint View_Padding5516;                        ; Offset: 5516
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5520
;       uint View_Padding5524;                        ; Offset: 5524
;       uint BindlessSRV_View_SkyViewLutTexture;      ; Offset: 5528
;       uint View_Padding5532;                        ; Offset: 5532
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5536
;       uint View_Padding5540;                        ; Offset: 5540
;       uint BindlessSRV_View_CameraAerialPerspectiveVolume;; Offset: 5544
;       uint View_Padding5548;                        ; Offset: 5548
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5552
;       uint View_Padding5556;                        ; Offset: 5556
;       uint BindlessSRV_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5560
;       uint View_Padding5564;                        ; Offset: 5564
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5568
;       uint View_Padding5572;                        ; Offset: 5572
;       uint BindlessSRV_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5576
;       uint View_Padding5580;                        ; Offset: 5580
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5584
;       uint View_Padding5588;                        ; Offset: 5588
;       uint BindlessSRV_View_DistantSkyLightLutBufferSRV;; Offset: 5592
;       uint View_Padding5596;                        ; Offset: 5596
;       uint BindlessSRV_View_MobileDistantSkyLightLutBufferSRV;; Offset: 5600
;       uint View_Padding5604;                        ; Offset: 5604
;       uint BindlessSRV_View_HairScatteringLUTTexture;; Offset: 5608
;       uint View_Padding5612;                        ; Offset: 5612
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5616
;       uint View_Padding5620;                        ; Offset: 5620
;       uint BindlessSRV_View_GGXLTCMatTexture;       ; Offset: 5624
;       uint View_Padding5628;                        ; Offset: 5628
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5632
;       uint View_Padding5636;                        ; Offset: 5636
;       uint BindlessSRV_View_GGXLTCAmpTexture;       ; Offset: 5640
;       uint View_Padding5644;                        ; Offset: 5644
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5648
;       uint View_Padding5652;                        ; Offset: 5652
;       uint BindlessSRV_View_SheenLTCTexture;        ; Offset: 5656
;       uint View_Padding5660;                        ; Offset: 5660
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5664
;       uint View_Padding5668;                        ; Offset: 5668
;       uint View_bShadingEnergyConservation;         ; Offset: 5672
;       uint View_bShadingEnergyPreservation;         ; Offset: 5676
;       uint BindlessSRV_View_ShadingEnergyGGXSpecTexture;; Offset: 5680
;       uint View_Padding5684;                        ; Offset: 5684
;       uint BindlessSRV_View_ShadingEnergyGGXGlassTexture;; Offset: 5688
;       uint View_Padding5692;                        ; Offset: 5692
;       uint BindlessSRV_View_ShadingEnergyClothSpecTexture;; Offset: 5696
;       uint View_Padding5700;                        ; Offset: 5700
;       uint BindlessSRV_View_ShadingEnergyDiffuseTexture;; Offset: 5704
;       uint View_Padding5708;                        ; Offset: 5708
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5712
;       uint View_Padding5716;                        ; Offset: 5716
;       uint BindlessSRV_View_GlintTexture;           ; Offset: 5720
;       uint View_Padding5724;                        ; Offset: 5724
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5728
;       uint View_Padding5732;                        ; Offset: 5732
;       uint BindlessSRV_View_SimpleVolumeTexture;    ; Offset: 5736
;       uint View_Padding5740;                        ; Offset: 5740
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5744
;       uint View_Padding5748;                        ; Offset: 5748
;       uint BindlessSRV_View_SimpleVolumeEnvTexture; ; Offset: 5752
;       uint View_Padding5756;                        ; Offset: 5756
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5760
;       uint View_Padding5764;                        ; Offset: 5764
;       uint BindlessSRV_View_SSProfilesTexture;      ; Offset: 5768
;       uint View_Padding5772;                        ; Offset: 5772
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5776
;       uint View_Padding5780;                        ; Offset: 5780
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5784
;       uint View_Padding5788;                        ; Offset: 5788
;       uint BindlessSRV_View_SSProfilesPreIntegratedTexture;; Offset: 5792
;       uint View_Padding5796;                        ; Offset: 5796
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5800
;       uint View_Padding5804;                        ; Offset: 5804
;       uint BindlessSRV_View_SpecularProfileTexture; ; Offset: 5808
;       uint View_Padding5812;                        ; Offset: 5812
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5816
;       uint View_Padding5820;                        ; Offset: 5820
;       uint BindlessSRV_View_WaterIndirection;       ; Offset: 5824
;       uint View_Padding5828;                        ; Offset: 5828
;       uint BindlessSRV_View_WaterData;              ; Offset: 5832
;       uint View_Padding5836;                        ; Offset: 5836
;       int View_WaterInfoTextureViewIndex;           ; Offset: 5840
;       int View_Padding5844;                         ; Offset: 5844
;       int View_Padding5848;                         ; Offset: 5848
;       int View_Padding5852;                         ; Offset: 5852
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5856
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5872
;       float View_Padding5876;                       ; Offset: 5876
;       uint BindlessSRV_View_RectLightAtlasTexture;  ; Offset: 5880
;       uint View_Padding5884;                        ; Offset: 5884
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5888
;       uint View_Padding5892;                        ; Offset: 5892
;       uint View_Padding5896;                        ; Offset: 5896
;       uint View_Padding5900;                        ; Offset: 5900
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5904
;       uint BindlessSRV_View_IESAtlasTexture;        ; Offset: 5920
;       uint View_Padding5924;                        ; Offset: 5924
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5928
;       uint View_Padding5932;                        ; Offset: 5932
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5936
;       uint View_Padding5940;                        ; Offset: 5940
;       uint BindlessSRV_View_LandscapeIndirection;   ; Offset: 5944
;       uint View_Padding5948;                        ; Offset: 5948
;       uint BindlessSRV_View_LandscapePerComponentData;; Offset: 5952
;       uint View_Padding5956;                        ; Offset: 5956
;       uint BindlessUAV_View_VTFeedbackBuffer;       ; Offset: 5960
;       uint View_Padding5964;                        ; Offset: 5964
;       uint BindlessSRV_View_PhysicsFieldClipmapBuffer;; Offset: 5968
;       uint View_Padding5972;                        ; Offset: 5972
;       uint View_Padding5976;                        ; Offset: 5976
;       uint View_Padding5980;                        ; Offset: 5980
;       float3 View_TLASPreViewTranslationHigh;       ; Offset: 5984
;       float View_Padding5996;                       ; Offset: 5996
;       float3 View_TLASPreViewTranslationLow;        ; Offset: 6000
;   
;   } View;                                           ; Offset:    0 Size:  6012
;
; }
;
; cbuffer Scene
; {
;
;   struct Scene
;   {
;
;       uint BindlessSRV_Scene_GPUScene_GPUSceneInstanceSceneData;; Offset:    0
;       uint Scene_Padding4;                          ; Offset:    4
;       uint BindlessSRV_Scene_GPUScene_GPUSceneInstancePayloadData;; Offset:    8
;       uint Scene_Padding12;                         ; Offset:   12
;       uint BindlessSRV_Scene_GPUScene_GPUScenePrimitiveSceneData;; Offset:   16
;       uint Scene_Padding20;                         ; Offset:   20
;       uint BindlessSRV_Scene_GPUScene_GPUSceneLightmapData;; Offset:   24
;       uint Scene_Padding28;                         ; Offset:   28
;       uint BindlessSRV_Scene_GPUScene_GPUSceneLightData;; Offset:   32
;       uint Scene_Padding36;                         ; Offset:   36
;       uint Scene_GPUScene_InstanceDataSOAStride;    ; Offset:   40
;       uint Scene_GPUScene_GPUSceneFrameNumber;      ; Offset:   44
;       int Scene_GPUScene_NumInstances;              ; Offset:   48
;       int Scene_GPUScene_NumScenePrimitives;        ; Offset:   52
;       float Scene_Padding56;                        ; Offset:   56
;       float Scene_Padding60;                        ; Offset:   60
;       uint BindlessSRV_Scene_MeshPaint_PageTableTexture;; Offset:   64
;       uint Scene_Padding68;                         ; Offset:   68
;       uint BindlessSRV_Scene_MeshPaint_PhysicalTexture;; Offset:   72
;       uint Scene_Padding76;                         ; Offset:   76
;       uint4 Scene_MeshPaint_PackedUniform;          ; Offset:   80
;       uint Scene_NaniteMaterials_PrimitiveMaterialElementStride;; Offset:   96
;       uint Scene_Padding100;                        ; Offset:  100
;       uint BindlessSRV_Scene_NaniteMaterials_PrimitiveMaterialData;; Offset:  104
;       uint Scene_Padding108;                        ; Offset:  108
;       uint BindlessSRV_Scene_NaniteMaterials_MaterialData;; Offset:  112
;       float Scene_Padding116;                       ; Offset:  116
;       float Scene_Padding120;                       ; Offset:  120
;       float Scene_Padding124;                       ; Offset:  124
;       uint BindlessSRV_Scene_NaniteSkinning_SkinningHeaders;; Offset:  128
;       uint Scene_Padding132;                        ; Offset:  132
;       uint BindlessSRV_Scene_NaniteSkinning_BoneHierarchy;; Offset:  136
;       uint Scene_Padding140;                        ; Offset:  140
;       uint BindlessSRV_Scene_NaniteSkinning_BoneObjectSpace;; Offset:  144
;       uint Scene_Padding148;                        ; Offset:  148
;       uint BindlessSRV_Scene_NaniteSkinning_BoneTransforms;; Offset:  152
;       float Scene_Padding156;                       ; Offset:  156
;       float2 Scene_SplineMesh_SplineTextureInvExtent;; Offset:  160
;       uint BindlessSRV_Scene_SplineMesh_SplinePosTexture;; Offset:  168
;       uint Scene_Padding172;                        ; Offset:  172
;       uint BindlessSRV_Scene_SplineMesh_SplineRotTexture;; Offset:  176
;       uint Scene_Padding180;                        ; Offset:  180
;       uint BindlessSampler_Scene_SplineMesh_SplineSampler;; Offset:  184
;   
;   } Scene;                                          ; Offset:    0 Size:   188
;
; }
;
; cbuffer NaniteRaster
; {
;
;   struct NaniteRaster
;   {
;
;       int4 NaniteRaster_PageConstants;              ; Offset:    0
;       uint NaniteRaster_MaxNodes;                   ; Offset:   16
;       uint NaniteRaster_MaxVisibleClusters;         ; Offset:   20
;       uint NaniteRaster_MaxCandidatePatches;        ; Offset:   24
;       uint NaniteRaster_MaxPatchesPerGroup;         ; Offset:   28
;       uint NaniteRaster_MeshPass;                   ; Offset:   32
;       float NaniteRaster_InvDiceRate;               ; Offset:   36
;       uint NaniteRaster_RenderFlags;                ; Offset:   40
;       uint NaniteRaster_DebugFlags;                 ; Offset:   44
;   
;   } NaniteRaster;                                   ; Offset:    0 Size:    48
;
; }
;
; cbuffer VirtualShadowMap
; {
;
;   struct VirtualShadowMap
;   {
;
;       uint VirtualShadowMap_NumFullShadowMaps;      ; Offset:    0
;       uint VirtualShadowMap_NumSinglePageShadowMaps;; Offset:    4
;       uint VirtualShadowMap_MaxPhysicalPages;       ; Offset:    8
;       uint VirtualShadowMap_NumShadowMapSlots;      ; Offset:   12
;       uint VirtualShadowMap_StaticCachedArrayIndex; ; Offset:   16
;       uint VirtualShadowMap_StaticHZBArrayIndex;    ; Offset:   20
;       uint VirtualShadowMap_PhysicalPageRowMask;    ; Offset:   24
;       uint VirtualShadowMap_PhysicalPageRowShift;   ; Offset:   28
;       uint VirtualShadowMap_PackedShadowMaskMaxLightCount;; Offset:   32
;       uint VirtualShadowMap_Padding36;              ; Offset:   36
;       uint VirtualShadowMap_Padding40;              ; Offset:   40
;       uint VirtualShadowMap_Padding44;              ; Offset:   44
;       float4 VirtualShadowMap_RecPhysicalPoolSize;  ; Offset:   48
;       int2 VirtualShadowMap_PhysicalPoolSize;       ; Offset:   64
;       int2 VirtualShadowMap_PhysicalPoolSizePages;  ; Offset:   72
;       uint VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;; Offset:   80
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamic;; Offset:   84
;       float VirtualShadowMap_CoarsePagePixelThresholdStatic;; Offset:   88
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;; Offset:   92
;       uint VirtualShadowMap_SceneFrameNumber;       ; Offset:   96
;       uint VirtualShadowMap_bClipmapGreedyLevelSelection;; Offset:  100
;       float VirtualShadowMap_GlobalResolutionLodBias;; Offset:  104
;       float VirtualShadowMap_ScreenRayLength;       ; Offset:  108
;       float VirtualShadowMap_NormalBias;            ; Offset:  112
;       uint VirtualShadowMap_SMRTAdaptiveRayCount;   ; Offset:  116
;       int VirtualShadowMap_SMRTRayCountLocal;       ; Offset:  120
;       int VirtualShadowMap_SMRTSamplesPerRayLocal;  ; Offset:  124
;       float VirtualShadowMap_SMRTExtrapolateMaxSlopeLocal;; Offset:  128
;       float VirtualShadowMap_SMRTTexelDitherScaleLocal;; Offset:  132
;       float VirtualShadowMap_SMRTMaxSlopeBiasLocal; ; Offset:  136
;       float VirtualShadowMap_SMRTCotMaxRayAngleFromLight;; Offset:  140
;       int VirtualShadowMap_SMRTRayCountDirectional; ; Offset:  144
;       int VirtualShadowMap_SMRTSamplesPerRayDirectional;; Offset:  148
;       float VirtualShadowMap_SMRTExtrapolateMaxSlopeDirectional;; Offset:  152
;       float VirtualShadowMap_SMRTTexelDitherScaleDirectional;; Offset:  156
;       float VirtualShadowMap_SMRTRayLengthScale;    ; Offset:  160
;       uint VirtualShadowMap_SMRTHairRayCount;       ; Offset:  164
;       uint BindlessSRV_VirtualShadowMap_ProjectionData;; Offset:  168
;       uint VirtualShadowMap_Padding172;             ; Offset:  172
;       uint BindlessSRV_VirtualShadowMap_PageTable;  ; Offset:  176
;       uint VirtualShadowMap_Padding180;             ; Offset:  180
;       uint BindlessSRV_VirtualShadowMap_PageFlags;  ; Offset:  184
;       uint VirtualShadowMap_Padding188;             ; Offset:  188
;       uint BindlessSRV_VirtualShadowMap_AllocatedPageRectBounds;; Offset:  192
;       uint VirtualShadowMap_Padding196;             ; Offset:  196
;       uint BindlessSRV_VirtualShadowMap_UncachedPageRectBounds;; Offset:  200
;       uint VirtualShadowMap_Padding204;             ; Offset:  204
;       uint BindlessSRV_VirtualShadowMap_PhysicalPagePool;; Offset:  208
;       uint VirtualShadowMap_Padding212;             ; Offset:  212
;       uint BindlessSRV_VirtualShadowMap_CachePrimitiveAsDynamic;; Offset:  216
;       float VirtualShadowMap_Padding220;            ; Offset:  220
;       uint BindlessSRV_VirtualShadowMap_LightGridData;; Offset:  224
;       uint VirtualShadowMap_Padding228;             ; Offset:  228
;       uint BindlessSRV_VirtualShadowMap_NumCulledLightsGrid;; Offset:  232
;       uint VirtualShadowMap_Padding236;             ; Offset:  236
;       uint VirtualShadowMap_MaxLightGridEntryIndex; ; Offset:  240
;   
;   } VirtualShadowMap;                               ; Offset:    0 Size:   244
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       float4 Material_PreshaderBuffer[3];           ; Offset:    0
;       uint BindlessSRV_Material_Texture2D_0;        ; Offset:   48
;       uint Material_Padding52;                      ; Offset:   52
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:   56
;       uint Material_Padding60;                      ; Offset:   60
;       uint BindlessSRV_Material_Texture2D_1;        ; Offset:   64
;       uint Material_Padding68;                      ; Offset:   68
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:   72
;       uint Material_Padding76;                      ; Offset:   76
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:   80
;       uint Material_Padding84;                      ; Offset:   84
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:   88
;   
;   } Material;                                       ; Offset:    0 Size:    92
;
; }
;
; cbuffer UERootConstants
; {
;
;   struct UERootConstants
;   {
;
;       struct struct.FUERootConstants
;       {
;
;           uint4 Values;                             ; Offset:    0
;       
;       } UERootConstants;                            ; Offset:    0
;
;   
;   } UERootConstants;                                ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for InViews
; {
;
;   struct hostlayout.struct.FPackedNaniteView
;   {
;
;       row_major float4x4 SVPositionToTranslatedWorld;; Offset:    0
;       row_major float4x4 ViewToTranslatedWorld;     ; Offset:   64
;       row_major float4x4 TranslatedWorldToView;     ; Offset:  128
;       row_major float4x4 TranslatedWorldToClip;     ; Offset:  192
;       row_major float4x4 ViewToClip;                ; Offset:  256
;       row_major float4x4 ClipToRelativeWorld;       ; Offset:  320
;       row_major float4x4 PrevTranslatedWorldToView; ; Offset:  384
;       row_major float4x4 PrevTranslatedWorldToClip; ; Offset:  448
;       row_major float4x4 PrevViewToClip;            ; Offset:  512
;       row_major float4x4 PrevClipToRelativeWorld;   ; Offset:  576
;       int4 ViewRect;                                ; Offset:  640
;       float4 ViewSizeAndInvSize;                    ; Offset:  656
;       float4 ClipSpaceScaleOffset;                  ; Offset:  672
;       float3 PreViewTranslationHigh;                ; Offset:  688
;       float ViewOriginHighX;                        ; Offset:  700
;       float3 PrevPreViewTranslationHigh;            ; Offset:  704
;       float ViewOriginHighY;                        ; Offset:  716
;       float3 PrevPreViewTranslationLow;             ; Offset:  720
;       float CullingViewMinRadiusTestFactorSq;       ; Offset:  732
;       float3 ViewOriginLow;                         ; Offset:  736
;       float ViewOriginHighZ;                        ; Offset:  748
;       float3 CullingViewOriginTranslatedWorld;      ; Offset:  752
;       float RangeBasedCullingDistance;              ; Offset:  764
;       float3 ViewForward;                           ; Offset:  768
;       float NearPlane;                              ; Offset:  780
;       float4 TranslatedGlobalClipPlane;             ; Offset:  784
;       float3 PreViewTranslationLow;                 ; Offset:  800
;       float CullingViewScreenMultiple;              ; Offset:  812
;       float2 LODScales;                             ; Offset:  816
;       uint InstanceOcclusionQueryMask;              ; Offset:  824
;       uint StreamingPriorityCategory_AndFlags;      ; Offset:  828
;       int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;; Offset:  832
;       int4 HZBTestViewRect;                         ; Offset:  848
;       uint4 FirstPersonTransformRowsExceptRow2Z;    ; Offset:  864
;       uint FirstPersonTransformRow2Z;               ; Offset:  880
;       uint LightingChannelMask;                     ; Offset:  884
;       uint Padding0;                                ; Offset:  888
;       uint Padding1;                                ; Offset:  892
;   
;   } $Element;                                       ; Offset:    0 Size:   896
;
; }
;
; Resource bind info for RasterBinMeta
; {
;
;   struct struct.FNaniteRasterBinMeta
;   {
;
;       uint BinSWCount;                              ; Offset:    0
;       uint BinHWCount;                              ; Offset:    4
;       uint ClusterOffset;                           ; Offset:    8
;       uint MaterialFlags;                           ; Offset:   12
;       struct struct.FNaniteMaterialDisplacementParams
;       {
;
;           float Center;                             ; Offset:   16
;           float Magnitude;                          ; Offset:   20
;           float FadeSizeStart;                      ; Offset:   24
;           float FadeSizeStop;                       ; Offset:   28
;       
;       } MaterialDisplacementParams;                 ; Offset:   16
;
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for RasterBinData
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; View                              cbuffer      NA          NA     CB0            cb0     1
; Scene                             cbuffer      NA          NA     CB1            cb1     1
; NaniteRaster                      cbuffer      NA          NA     CB2            cb2     1
; VirtualShadowMap                  cbuffer      NA          NA     CB3            cb3     1
; Material                          cbuffer      NA          NA     CB4            cb4     1
; UERootConstants                   cbuffer      NA          NA     CB5     cb0,space3     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S0             s0     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o      T0             t0     1
; Scene_GPUScene_GPUSceneInstancePayloadData   texture  struct         r/o      T1             t1     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T2             t2     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T3             t3     1
; Material_Texture2D_1              texture     f32          2d      T4             t4     1
; ClusterPageData                   texture    byte         r/o      T5             t5     1
; VisibleClustersSWHW               texture    byte         r/o      T6             t6     1
; InViews                           texture  struct         r/o      T7             t7     1
; RasterBinMeta                     texture  struct         r/o      T8             t8     1
; RasterBinData                     texture  struct         r/o      T9             t9     1
; OutDepthBufferArray                   UAV     u32     2darray      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"hostlayout.class.StructuredBuffer<FPackedNaniteView>" = type { %hostlayout.struct.FPackedNaniteView }
%hostlayout.struct.FPackedNaniteView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x i32>, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <3 x float>, float, <2 x float>, i32, i32, <4 x i32>, <4 x i32>, <4 x i32>, i32, i32, i32, i32 }
%"class.StructuredBuffer<FNaniteRasterBinMeta>" = type { %struct.FNaniteRasterBinMeta }
%struct.FNaniteRasterBinMeta = type { i32, i32, i32, i32, %struct.FNaniteMaterialDisplacementParams }
%struct.FNaniteMaterialDisplacementParams = type { float, float, float, float }
%"class.StructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2DArray<unsigned int>" = type { i32 }
%hostlayout.View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, i32, float, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <2 x float>, float, float, <4 x float>, <4 x float>, <4 x float>, float, i32, i32, i32, <4 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%Scene = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i32, i32, i32, i32, <4 x i32>, i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, <2 x float>, i32, i32, i32, i32, i32 }
%NaniteRaster = type { <4 x i32>, i32, i32, i32, i32, i32, float, i32, i32 }
%VirtualShadowMap = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x i32>, <2 x i32>, i32, float, float, float, i32, i32, float, float, float, i32, i32, i32, float, float, float, float, i32, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32 }
%Material = type { [3 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UERootConstants = type { %struct.FUERootConstants }
%struct.FUERootConstants = type { <4 x i32> }
%struct.SamplerState = type { i32 }

@"\01?GroupVsmPageTableCache@@3PAIA" = external addrspace(3) global [64 x i32], align 4
@"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim" = addrspace(3) global [256 x float] undef, align 4

define void @MicropolyRasterize() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 3, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 13, i32 16 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 13, i32 92 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %21 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 13, i32 244 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 13, i32 48 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 6012 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %25 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %26 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %27 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.i32 %27, 0
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %30 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %29, i32 %28, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %31 = extractvalue %dx.types.ResRet.i32 %30, 0
  %32 = add i32 %31, %25
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %34 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %33, i32 %32, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %35 = extractvalue %dx.types.ResRet.i32 %34, 0
  %36 = extractvalue %dx.types.ResRet.i32 %34, 1
  %37 = lshr i32 %36, 16
  %38 = and i32 %36, 65535
  %39 = sub nsw i32 %38, %37
  %40 = mul i32 %35, 12
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %42 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %41, i32 %40, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %43 = extractvalue %dx.types.ResRet.i32 %42, 0
  %44 = extractvalue %dx.types.ResRet.i32 %42, 1
  %45 = extractvalue %dx.types.ResRet.i32 %42, 2
  %46 = lshr i32 %43, 5
  %47 = and i32 %46, 4095
  %48 = lshr i32 %43, 17
  %49 = shl i32 %44, 15
  %50 = and i32 %49, 16744448
  %51 = or i32 %50, %48
  %52 = lshr i32 %44, 9
  %53 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.i32 %53, 1
  %55 = shl i32 %54, 8
  %56 = icmp ult i32 %52, %55
  br i1 %56, label %57, label %60

; <label>:57                                      ; preds = %0
  %58 = lshr i32 %44, 17
  %59 = and i32 %52, 255
  br label %65

; <label>:60                                      ; preds = %0
  %61 = sub i32 %52, %55
  %62 = lshr i32 %61, 6
  %63 = add i32 %62, %54
  %64 = and i32 %61, 63
  br label %65

; <label>:65                                      ; preds = %60, %57
  %66 = phi i32 [ %58, %57 ], [ %63, %60 ]
  %67 = phi i32 [ %59, %57 ], [ %64, %60 ]
  %68 = and i32 %45, 8191
  %69 = lshr i32 %45, 13
  %70 = and i32 %69, 8191
  %71 = lshr i32 %45, 26
  %72 = and i32 %71, 7
  %73 = lshr i32 %45, 29
  %74 = add nuw nsw i32 %72, %68
  %75 = add nuw nsw i32 %70, %73
  %76 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.i32 %76, 2
  %78 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %79 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %78, i32 %51, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %80 = extractvalue %dx.types.ResRet.f32 %79, 0
  %81 = bitcast float %80 to i32
  %82 = and i32 %81, 1048575
  %83 = lshr i32 %81, 20
  %84 = extractvalue %dx.types.ResRet.f32 %79, 1
  %85 = bitcast float %84 to i32
  %86 = and i32 %85, 16777215
  %87 = mul nuw nsw i32 %82, 43
  %88 = add nuw nsw i32 %87, 28
  %89 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %90 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %88, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %91 = extractvalue %dx.types.ResRet.f32 %90, 3
  %92 = bitcast float %91 to i32
  %93 = add nuw nsw i32 %87, 29
  %94 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %93, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %95 = extractvalue %dx.types.ResRet.f32 %94, 3
  %96 = bitcast float %95 to i32
  %97 = and i32 %96, 16777215
  %98 = mul i32 %97, %86
  %99 = and i32 %83, 128
  %100 = icmp ne i32 %99, 0
  %101 = and i32 %83, 8
  %102 = and i32 %83, 80
  %103 = icmp ne i32 %102, 0
  %104 = zext i1 %103 to i32
  %105 = select i1 %100, i32 2, i32 %104
  %106 = add i32 %92, %105
  %107 = add i32 %106, %98
  %108 = add nuw nsw i32 %87, 1
  %109 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %108, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %110 = extractvalue %dx.types.ResRet.f32 %109, 0
  %111 = extractvalue %dx.types.ResRet.f32 %109, 1
  %112 = extractvalue %dx.types.ResRet.f32 %109, 2
  %113 = add nuw nsw i32 %87, 14
  %114 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %113, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %115 = extractvalue %dx.types.ResRet.f32 %114, 0
  %116 = extractvalue %dx.types.ResRet.f32 %114, 1
  %117 = extractvalue %dx.types.ResRet.f32 %114, 2
  %118 = extractvalue %dx.types.ResRet.f32 %114, 3
  %119 = add nuw nsw i32 %87, 15
  %120 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %119, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %121 = extractvalue %dx.types.ResRet.f32 %120, 0
  %122 = extractvalue %dx.types.ResRet.f32 %120, 1
  %123 = extractvalue %dx.types.ResRet.f32 %120, 2
  %124 = extractvalue %dx.types.ResRet.f32 %120, 3
  %125 = add nuw nsw i32 %87, 16
  %126 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %125, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %127 = extractvalue %dx.types.ResRet.f32 %126, 0
  %128 = extractvalue %dx.types.ResRet.f32 %126, 1
  %129 = extractvalue %dx.types.ResRet.f32 %126, 2
  %130 = extractvalue %dx.types.ResRet.f32 %126, 3
  %131 = add i32 %77, %51
  %132 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %78, i32 %131, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %133 = extractvalue %dx.types.ResRet.f32 %132, 0
  %134 = extractvalue %dx.types.ResRet.f32 %132, 1
  %135 = extractvalue %dx.types.ResRet.f32 %132, 2
  %136 = extractvalue %dx.types.ResRet.f32 %132, 3
  %137 = bitcast float %133 to i32
  %138 = bitcast float %134 to i32
  %139 = bitcast float %135 to i32
  %140 = bitcast float %136 to i32
  %141 = shl i32 %77, 1
  %142 = add i32 %141, %51
  %143 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %78, i32 %142, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %144 = extractvalue %dx.types.ResRet.f32 %143, 0
  %145 = extractvalue %dx.types.ResRet.f32 %143, 1
  %146 = extractvalue %dx.types.ResRet.f32 %143, 2
  %147 = and i32 %137, 65535
  %148 = uitofp i32 %147 to float
  %149 = lshr i32 %137, 16
  %150 = uitofp i32 %149 to float
  %151 = and i32 %138, 32767
  %152 = uitofp i32 %151 to float
  %153 = fadd float %148, -3.276800e+04
  %154 = fadd float %150, -3.276800e+04
  %155 = fmul float %153, 0x3F00002000000000
  %156 = fmul float %154, 0x3F00002000000000
  %157 = fadd float %152, -1.638400e+04
  %158 = fmul float %157, 0x3F06A0F8E0000000
  %159 = and i32 %138, 32768
  %160 = icmp ne i32 %159, 0
  %161 = fadd float %155, %156
  %162 = fsub float %155, %156
  %163 = call float @dx.op.unary.f32(i32 6, float %161), !dx.precise !37  ; FAbs(value)
  %164 = call float @dx.op.unary.f32(i32 6, float %162), !dx.precise !37  ; FAbs(value)
  %165 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %163, float %164), !dx.precise !37  ; Dot2(ax,ay,bx,by)
  %166 = fsub float 2.000000e+00, %165
  %167 = call float @dx.op.dot3.f32(i32 55, float %161, float %162, float %166, float %161, float %162, float %166), !dx.precise !37  ; Dot3(ax,ay,az,bx,by,bz)
  %168 = call float @dx.op.unary.f32(i32 25, float %167), !dx.precise !37  ; Rsqrt(value)
  %169 = fmul float %161, %168
  %170 = fmul float %162, %168
  %171 = fmul float %166, %168
  %172 = fadd float %171, 1.000000e+00
  %173 = fdiv float 1.000000e+00, %172
  %174 = fmul float %169, %170
  %175 = fmul float %173, %174
  %176 = fsub float -0.000000e+00, %175
  %177 = fmul float %169, %169
  %178 = fmul float %173, %177
  %179 = fsub float 1.000000e+00, %178
  %180 = fmul float %170, %170
  %181 = fmul float %173, %180
  %182 = fsub float 1.000000e+00, %181
  %183 = fmul float %158, %158
  %184 = fsub float 1.000000e+00, %183
  %185 = call float @dx.op.unary.f32(i32 24, float %184), !dx.precise !37  ; Sqrt(value)
  %186 = select i1 %160, float %158, float %185
  %187 = select i1 %160, float %185, float %158
  %188 = fmul float %186, %179
  %189 = fmul float %186, %176
  %190 = fmul float %169, %186
  %191 = fmul float %187, %176
  %192 = fmul float %187, %182
  %193 = fmul float %170, %187
  %194 = fsub float -0.000000e+00, %193
  %195 = fadd float %191, %188
  %196 = fadd float %189, %192
  %197 = fsub float %194, %190
  %198 = fmul float %170, %197
  %199 = fmul float %171, %196
  %200 = fsub float %198, %199
  %201 = fmul float %171, %195
  %202 = fmul float %169, %197
  %203 = fsub float %201, %202
  %204 = fmul float %169, %196
  %205 = fmul float %170, %195
  %206 = fsub float %204, %205
  %207 = lshr i32 %140, 16
  %208 = shl i32 %207, 23
  %209 = add i32 %208, -125829120
  %210 = bitcast i32 %209 to float
  %211 = lshr i32 %139, 16
  %212 = and i32 %139, 65535
  %213 = and i32 %140, 65535
  %214 = uitofp i32 %212 to float
  %215 = uitofp i32 %211 to float
  %216 = uitofp i32 %213 to float
  %217 = fadd float %214, -3.276800e+04
  %218 = fadd float %215, -3.276800e+04
  %219 = fadd float %216, -3.276800e+04
  %220 = fmul float %217, %210
  %221 = fmul float %218, %210
  %222 = fmul float %219, %210
  %223 = fmul float %220, %195
  %224 = fmul float %220, %196
  %225 = fmul float %220, %197
  %226 = fmul float %220, 0.000000e+00
  %227 = fmul float %221, %200
  %228 = fmul float %221, %203
  %229 = fmul float %221, %206
  %230 = fmul float %221, 0.000000e+00
  %231 = fmul float %222, %169
  %232 = fmul float %222, %170
  %233 = fmul float %222, %171
  %234 = fmul float %222, 0.000000e+00
  %235 = call float @dx.op.unary.f32(i32 6, float %220)  ; FAbs(value)
  %236 = call float @dx.op.unary.f32(i32 6, float %221)  ; FAbs(value)
  %237 = call float @dx.op.unary.f32(i32 6, float %222)  ; FAbs(value)
  %238 = fdiv fast float 1.000000e+00, %235
  %239 = fdiv fast float 1.000000e+00, %236
  %240 = fdiv fast float 1.000000e+00, %237
  %241 = and i32 %83, 1
  %242 = icmp ne i32 %241, 0
  %243 = fmul fast float %238, %238
  %244 = fmul fast float %223, %243
  %245 = fmul fast float %224, %243
  %246 = fmul fast float %243, %225
  %247 = fmul fast float %239, %239
  %248 = fmul fast float %227, %247
  %249 = fmul fast float %228, %247
  %250 = fmul fast float %229, %247
  %251 = fmul fast float %240, %240
  %252 = fmul fast float %251, %231
  %253 = fmul fast float %251, %232
  %254 = fmul fast float %251, %233
  %255 = icmp eq i32 %107, -1
  %256 = icmp eq i32 %101, 0
  %257 = or i1 %256, %255
  br i1 %257, label %359, label %258, !dx.controlflow.hints !38

; <label>:258                                     ; preds = %65
  %259 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %260 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %259, i32 %107, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %261 = extractvalue %dx.types.ResRet.f32 %260, 0
  %262 = extractvalue %dx.types.ResRet.f32 %260, 1
  %263 = extractvalue %dx.types.ResRet.f32 %260, 2
  %264 = extractvalue %dx.types.ResRet.f32 %260, 3
  %265 = bitcast float %261 to i32
  %266 = bitcast float %262 to i32
  %267 = bitcast float %263 to i32
  %268 = bitcast float %264 to i32
  %269 = add i32 %107, 1
  %270 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %259, i32 %269, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %271 = extractvalue %dx.types.ResRet.f32 %270, 0
  %272 = extractvalue %dx.types.ResRet.f32 %270, 1
  %273 = extractvalue %dx.types.ResRet.f32 %270, 2
  %274 = and i32 %265, 65535
  %275 = uitofp i32 %274 to float
  %276 = lshr i32 %265, 16
  %277 = uitofp i32 %276 to float
  %278 = and i32 %266, 32767
  %279 = uitofp i32 %278 to float
  %280 = fadd fast float %275, -3.276800e+04
  %281 = fadd fast float %277, -3.276800e+04
  %282 = fadd fast float %279, -1.638400e+04
  %283 = fmul fast float %282, 0x3F06A0F8E0000000
  %284 = and i32 %266, 32768
  %285 = icmp ne i32 %284, 0
  %286 = fadd fast float %280, %281
  %287 = fmul fast float %286, 0x3F00002000000000
  %288 = fsub fast float %280, %281
  %289 = fmul fast float %288, 0x3F00002000000000
  %290 = call float @dx.op.unary.f32(i32 6, float %287)  ; FAbs(value)
  %291 = call float @dx.op.unary.f32(i32 6, float %289)  ; FAbs(value)
  %292 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %290, float %291)  ; Dot2(ax,ay,bx,by)
  %293 = fsub fast float 2.000000e+00, %292
  %294 = call float @dx.op.dot3.f32(i32 55, float %287, float %289, float %293, float %287, float %289, float %293)  ; Dot3(ax,ay,az,bx,by,bz)
  %295 = call float @dx.op.unary.f32(i32 25, float %294)  ; Rsqrt(value)
  %296 = fmul fast float %295, %287
  %297 = fmul fast float %295, %289
  %298 = fmul fast float %295, %293
  %299 = fadd fast float %298, 1.000000e+00
  %300 = fdiv fast float 1.000000e+00, %299
  %301 = fmul fast float %297, %296
  %302 = fmul fast float %301, %300
  %303 = fsub fast float -0.000000e+00, %302
  %304 = fmul fast float %296, %296
  %305 = fmul fast float %304, %300
  %306 = fsub fast float 1.000000e+00, %305
  %307 = fmul fast float %297, %297
  %308 = fmul fast float %307, %300
  %309 = fsub fast float 1.000000e+00, %308
  %310 = fmul fast float %283, %283
  %311 = fsub fast float 1.000000e+00, %310
  %312 = call float @dx.op.unary.f32(i32 24, float %311)  ; Sqrt(value)
  %313 = select i1 %285, float %283, float %312
  %314 = select i1 %285, float %312, float %283
  %315 = fmul fast float %306, %313
  %316 = fmul fast float %313, %303
  %317 = fmul fast float %313, %296
  %318 = fmul fast float %314, %303
  %319 = fmul fast float %309, %314
  %320 = fmul fast float %297, %314
  %321 = fsub fast float -0.000000e+00, %320
  %322 = fadd fast float %315, %318
  %323 = fadd fast float %316, %319
  %324 = fsub fast float %321, %317
  %325 = fmul fast float %324, %297
  %326 = fmul fast float %323, %298
  %327 = fsub fast float %325, %326
  %328 = fmul fast float %322, %298
  %329 = fmul fast float %324, %296
  %330 = fsub fast float %328, %329
  %331 = fmul fast float %323, %296
  %332 = fmul fast float %322, %297
  %333 = fsub fast float %331, %332
  %334 = lshr i32 %268, 16
  %335 = shl i32 %334, 23
  %336 = add i32 %335, -125829120
  %337 = bitcast i32 %336 to float
  %338 = lshr i32 %267, 16
  %339 = and i32 %267, 65535
  %340 = and i32 %268, 65535
  %341 = uitofp i32 %339 to float
  %342 = uitofp i32 %338 to float
  %343 = uitofp i32 %340 to float
  %344 = fadd fast float %341, -3.276800e+04
  %345 = fadd fast float %342, -3.276800e+04
  %346 = fadd fast float %343, -3.276800e+04
  %347 = fmul fast float %337, %344
  %348 = fmul fast float %337, %345
  %349 = fmul fast float %337, %346
  %350 = fmul fast float %322, %347
  %351 = fmul fast float %323, %347
  %352 = fmul fast float %324, %347
  %353 = fmul fast float %327, %348
  %354 = fmul fast float %330, %348
  %355 = fmul fast float %333, %348
  %356 = fmul fast float %296, %349
  %357 = fmul fast float %297, %349
  %358 = fmul fast float %298, %349
  br label %408

; <label>:359                                     ; preds = %65
  %360 = fmul fast float %223, %115
  %361 = call float @dx.op.tertiary.f32(i32 46, float %224, float %116, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %225, float %117, float %361)  ; FMad(a,b,c)
  %363 = call float @dx.op.tertiary.f32(i32 46, float %226, float %118, float %362)  ; FMad(a,b,c)
  %364 = fmul fast float %223, %121
  %365 = call float @dx.op.tertiary.f32(i32 46, float %224, float %122, float %364)  ; FMad(a,b,c)
  %366 = call float @dx.op.tertiary.f32(i32 46, float %225, float %123, float %365)  ; FMad(a,b,c)
  %367 = call float @dx.op.tertiary.f32(i32 46, float %226, float %124, float %366)  ; FMad(a,b,c)
  %368 = fmul fast float %223, %127
  %369 = call float @dx.op.tertiary.f32(i32 46, float %224, float %128, float %368)  ; FMad(a,b,c)
  %370 = call float @dx.op.tertiary.f32(i32 46, float %225, float %129, float %369)  ; FMad(a,b,c)
  %371 = call float @dx.op.tertiary.f32(i32 46, float %226, float %130, float %370)  ; FMad(a,b,c)
  %372 = fmul fast float %227, %115
  %373 = call float @dx.op.tertiary.f32(i32 46, float %228, float %116, float %372)  ; FMad(a,b,c)
  %374 = call float @dx.op.tertiary.f32(i32 46, float %229, float %117, float %373)  ; FMad(a,b,c)
  %375 = call float @dx.op.tertiary.f32(i32 46, float %230, float %118, float %374)  ; FMad(a,b,c)
  %376 = fmul fast float %227, %121
  %377 = call float @dx.op.tertiary.f32(i32 46, float %228, float %122, float %376)  ; FMad(a,b,c)
  %378 = call float @dx.op.tertiary.f32(i32 46, float %229, float %123, float %377)  ; FMad(a,b,c)
  %379 = call float @dx.op.tertiary.f32(i32 46, float %230, float %124, float %378)  ; FMad(a,b,c)
  %380 = fmul fast float %227, %127
  %381 = call float @dx.op.tertiary.f32(i32 46, float %228, float %128, float %380)  ; FMad(a,b,c)
  %382 = call float @dx.op.tertiary.f32(i32 46, float %229, float %129, float %381)  ; FMad(a,b,c)
  %383 = call float @dx.op.tertiary.f32(i32 46, float %230, float %130, float %382)  ; FMad(a,b,c)
  %384 = fmul fast float %231, %115
  %385 = call float @dx.op.tertiary.f32(i32 46, float %232, float %116, float %384)  ; FMad(a,b,c)
  %386 = call float @dx.op.tertiary.f32(i32 46, float %233, float %117, float %385)  ; FMad(a,b,c)
  %387 = call float @dx.op.tertiary.f32(i32 46, float %234, float %118, float %386)  ; FMad(a,b,c)
  %388 = fmul fast float %231, %121
  %389 = call float @dx.op.tertiary.f32(i32 46, float %232, float %122, float %388)  ; FMad(a,b,c)
  %390 = call float @dx.op.tertiary.f32(i32 46, float %233, float %123, float %389)  ; FMad(a,b,c)
  %391 = call float @dx.op.tertiary.f32(i32 46, float %234, float %124, float %390)  ; FMad(a,b,c)
  %392 = fmul fast float %231, %127
  %393 = call float @dx.op.tertiary.f32(i32 46, float %232, float %128, float %392)  ; FMad(a,b,c)
  %394 = call float @dx.op.tertiary.f32(i32 46, float %233, float %129, float %393)  ; FMad(a,b,c)
  %395 = call float @dx.op.tertiary.f32(i32 46, float %234, float %130, float %394)  ; FMad(a,b,c)
  %396 = fmul fast float %144, %115
  %397 = call float @dx.op.tertiary.f32(i32 46, float %145, float %116, float %396)  ; FMad(a,b,c)
  %398 = call float @dx.op.tertiary.f32(i32 46, float %146, float %117, float %397)  ; FMad(a,b,c)
  %399 = fadd fast float %398, %118
  %400 = fmul fast float %144, %121
  %401 = call float @dx.op.tertiary.f32(i32 46, float %145, float %122, float %400)  ; FMad(a,b,c)
  %402 = call float @dx.op.tertiary.f32(i32 46, float %146, float %123, float %401)  ; FMad(a,b,c)
  %403 = fadd fast float %402, %124
  %404 = fmul fast float %144, %127
  %405 = call float @dx.op.tertiary.f32(i32 46, float %145, float %128, float %404)  ; FMad(a,b,c)
  %406 = call float @dx.op.tertiary.f32(i32 46, float %146, float %129, float %405)  ; FMad(a,b,c)
  %407 = fadd fast float %406, %130
  br label %408

; <label>:408                                     ; preds = %359, %258
  %409 = phi float [ %350, %258 ], [ %363, %359 ]
  %410 = phi float [ %351, %258 ], [ %367, %359 ]
  %411 = phi float [ %352, %258 ], [ %371, %359 ]
  %412 = phi float [ %353, %258 ], [ %375, %359 ]
  %413 = phi float [ %354, %258 ], [ %379, %359 ]
  %414 = phi float [ %355, %258 ], [ %383, %359 ]
  %415 = phi float [ %356, %258 ], [ %387, %359 ]
  %416 = phi float [ %357, %258 ], [ %391, %359 ]
  %417 = phi float [ %358, %258 ], [ %395, %359 ]
  %418 = phi float [ %271, %258 ], [ %399, %359 ]
  %419 = phi float [ %272, %258 ], [ %403, %359 ]
  %420 = phi float [ %273, %258 ], [ %407, %359 ]
  %421 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %87, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %422 = extractvalue %dx.types.ResRet.f32 %421, 0
  %423 = bitcast float %422 to i32
  %424 = add nuw nsw i32 %87, 32
  %425 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %89, i32 %424, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %426 = extractvalue %dx.types.ResRet.f32 %425, 0
  %427 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 524, i32 896 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=896>
  %428 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 192, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %429 = extractvalue %dx.types.ResRet.f32 %428, 0
  %430 = extractvalue %dx.types.ResRet.f32 %428, 1
  %431 = extractvalue %dx.types.ResRet.f32 %428, 2
  %432 = extractvalue %dx.types.ResRet.f32 %428, 3
  %433 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 208, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %434 = extractvalue %dx.types.ResRet.f32 %433, 0
  %435 = extractvalue %dx.types.ResRet.f32 %433, 1
  %436 = extractvalue %dx.types.ResRet.f32 %433, 2
  %437 = extractvalue %dx.types.ResRet.f32 %433, 3
  %438 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 224, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %439 = extractvalue %dx.types.ResRet.f32 %438, 0
  %440 = extractvalue %dx.types.ResRet.f32 %438, 1
  %441 = extractvalue %dx.types.ResRet.f32 %438, 2
  %442 = extractvalue %dx.types.ResRet.f32 %438, 3
  %443 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 240, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %444 = extractvalue %dx.types.ResRet.f32 %443, 0
  %445 = extractvalue %dx.types.ResRet.f32 %443, 1
  %446 = extractvalue %dx.types.ResRet.f32 %443, 2
  %447 = extractvalue %dx.types.ResRet.f32 %443, 3
  %448 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %427, i32 %47, i32 640, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %449 = extractvalue %dx.types.ResRet.i32 %448, 0
  %450 = extractvalue %dx.types.ResRet.i32 %448, 1
  %451 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 656, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %452 = extractvalue %dx.types.ResRet.f32 %451, 0
  %453 = extractvalue %dx.types.ResRet.f32 %451, 1
  %454 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 688, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %455 = extractvalue %dx.types.ResRet.f32 %454, 0
  %456 = extractvalue %dx.types.ResRet.f32 %454, 1
  %457 = extractvalue %dx.types.ResRet.f32 %454, 2
  %458 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 704, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %459 = extractvalue %dx.types.ResRet.f32 %458, 0
  %460 = extractvalue %dx.types.ResRet.f32 %458, 1
  %461 = extractvalue %dx.types.ResRet.f32 %458, 2
  %462 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 720, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %463 = extractvalue %dx.types.ResRet.f32 %462, 0
  %464 = extractvalue %dx.types.ResRet.f32 %462, 1
  %465 = extractvalue %dx.types.ResRet.f32 %462, 2
  %466 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %427, i32 %47, i32 800, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %467 = extractvalue %dx.types.ResRet.f32 %466, 0
  %468 = extractvalue %dx.types.ResRet.f32 %466, 1
  %469 = extractvalue %dx.types.ResRet.f32 %466, 2
  %470 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %427, i32 %47, i32 828, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %471 = extractvalue %dx.types.ResRet.i32 %470, 0
  %472 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %427, i32 %47, i32 832, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %473 = extractvalue %dx.types.ResRet.i32 %472, 0
  %474 = extractvalue %dx.types.ResRet.i32 %472, 1
  %475 = and i32 %471, 64
  %476 = icmp ne i32 %475, 0
  %477 = xor i1 %242, %476
  %478 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %479 = extractvalue %dx.types.CBufRet.f32 %478, 0
  %480 = extractvalue %dx.types.CBufRet.f32 %478, 1
  %481 = extractvalue %dx.types.CBufRet.f32 %478, 2
  %482 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %483 = extractvalue %dx.types.CBufRet.f32 %482, 0
  %484 = extractvalue %dx.types.CBufRet.f32 %482, 1
  %485 = extractvalue %dx.types.CBufRet.f32 %482, 2
  %486 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %487 = extractvalue %dx.types.CBufRet.f32 %486, 0
  %488 = extractvalue %dx.types.CBufRet.f32 %486, 1
  %489 = extractvalue %dx.types.CBufRet.f32 %486, 2
  %490 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %491 = extractvalue %dx.types.CBufRet.f32 %490, 0
  %492 = extractvalue %dx.types.CBufRet.f32 %490, 1
  %493 = extractvalue %dx.types.CBufRet.f32 %490, 2
  %494 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %495 = extractvalue %dx.types.CBufRet.f32 %494, 0
  %496 = extractvalue %dx.types.CBufRet.f32 %494, 1
  %497 = extractvalue %dx.types.CBufRet.f32 %494, 2
  %498 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %499 = extractvalue %dx.types.CBufRet.f32 %498, 0
  %500 = extractvalue %dx.types.CBufRet.f32 %498, 1
  %501 = extractvalue %dx.types.CBufRet.f32 %498, 2
  %502 = fmul float %455, 0x3EA0000000000000
  %503 = fmul float %456, 0x3EA0000000000000
  %504 = fmul float %457, 0x3EA0000000000000
  %505 = call float @dx.op.unary.f32(i32 26, float %502), !dx.precise !37  ; Round_ne(value)
  %506 = call float @dx.op.unary.f32(i32 26, float %503), !dx.precise !37  ; Round_ne(value)
  %507 = call float @dx.op.unary.f32(i32 26, float %504), !dx.precise !37  ; Round_ne(value)
  %508 = call float @dx.op.tertiary.f32(i32 46, float %505, float -2.097152e+06, float %455), !dx.precise !37  ; FMad(a,b,c)
  %509 = call float @dx.op.tertiary.f32(i32 46, float %506, float -2.097152e+06, float %456), !dx.precise !37  ; FMad(a,b,c)
  %510 = call float @dx.op.tertiary.f32(i32 46, float %507, float -2.097152e+06, float %457), !dx.precise !37  ; FMad(a,b,c)
  %511 = fadd float %467, %508
  %512 = fadd float %468, %509
  %513 = fadd float %469, %510
  %514 = fmul float %459, 0x3EA0000000000000
  %515 = fmul float %460, 0x3EA0000000000000
  %516 = fmul float %461, 0x3EA0000000000000
  %517 = call float @dx.op.unary.f32(i32 26, float %514), !dx.precise !37  ; Round_ne(value)
  %518 = call float @dx.op.unary.f32(i32 26, float %515), !dx.precise !37  ; Round_ne(value)
  %519 = call float @dx.op.unary.f32(i32 26, float %516), !dx.precise !37  ; Round_ne(value)
  %520 = call float @dx.op.tertiary.f32(i32 46, float %517, float -2.097152e+06, float %459), !dx.precise !37  ; FMad(a,b,c)
  %521 = call float @dx.op.tertiary.f32(i32 46, float %518, float -2.097152e+06, float %460), !dx.precise !37  ; FMad(a,b,c)
  %522 = call float @dx.op.tertiary.f32(i32 46, float %519, float -2.097152e+06, float %461), !dx.precise !37  ; FMad(a,b,c)
  %523 = fadd float %463, %520
  %524 = fadd float %464, %521
  %525 = fadd float %465, %522
  %526 = fadd float %110, %455
  %527 = fadd float %111, %456
  %528 = fadd float %112, %457
  %529 = fadd float %526, %467
  %530 = fadd float %527, %468
  %531 = fadd float %528, %469
  %532 = fadd float %144, %529
  %533 = fadd float %145, %530
  %534 = fadd float %146, %531
  %535 = fadd float %110, %459
  %536 = fadd float %111, %460
  %537 = fadd float %112, %461
  %538 = fadd float %535, %463
  %539 = fadd float %536, %464
  %540 = fadd float %537, %465
  %541 = fadd fast float %538, %418
  %542 = fadd fast float %539, %419
  %543 = fadd fast float %540, %420
  %544 = call i32 @dx.op.binary.i32(i32 40, i32 %66, i32 %54)  ; UMin(a,b)
  %545 = shl i32 %544, 17
  %546 = sub nsw i32 %66, %54
  %547 = call i32 @dx.op.binary.i32(i32 37, i32 %546, i32 0)  ; IMax(a,b)
  %548 = shl i32 %547, 15
  %549 = add i32 %548, %545
  %550 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %551 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %550, i32 %549, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %552 = extractvalue %dx.types.ResRet.i32 %551, 0
  %553 = shl i32 %552, 4
  %554 = shl nuw nsw i32 %67, 4
  %555 = or i32 %549, %554
  %556 = add nsw i32 %555, 16
  %557 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %550, i32 %556, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %558 = extractvalue %dx.types.ResRet.i32 %557, 0
  %559 = extractvalue %dx.types.ResRet.i32 %557, 1
  %560 = extractvalue %dx.types.ResRet.i32 %557, 2
  %561 = extractvalue %dx.types.ResRet.i32 %557, 3
  %562 = add i32 %556, %553
  %563 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %550, i32 %562, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %564 = extractvalue %dx.types.ResRet.i32 %563, 0
  %565 = extractvalue %dx.types.ResRet.i32 %563, 1
  %566 = extractvalue %dx.types.ResRet.i32 %563, 2
  %567 = extractvalue %dx.types.ResRet.i32 %563, 3
  %568 = mul i32 %552, 80
  %569 = add i32 %556, %568
  %570 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %550, i32 %569, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %571 = extractvalue %dx.types.ResRet.i32 %570, 0
  %572 = extractvalue %dx.types.ResRet.i32 %570, 1
  %573 = and i32 %558, 511
  %574 = lshr i32 %558, 9
  %575 = and i32 %559, 255
  %576 = lshr i32 %559, 8
  %577 = and i32 %567, 7
  %578 = add nuw nsw i32 %577, 1
  %579 = lshr i32 %567, 9
  %580 = and i32 %579, 31
  %581 = lshr i32 %567, 14
  %582 = and i32 %581, 31
  %583 = lshr i32 %567, 19
  %584 = and i32 %583, 31
  %585 = lshr i32 %567, 24
  %586 = and i32 %585, 15
  %587 = lshr i32 %567, 28
  %588 = and i32 %571, 4194303
  %589 = lshr i32 %571, 22
  %590 = and i32 %572, 4194303
  %591 = and i32 %572, 4194304
  %592 = icmp ne i32 %591, 0
  %593 = and i32 %572, 117440512
  %594 = icmp eq i32 %38, %37
  %595 = select i1 %594, i32 %575, i32 %39
  %596 = fmul fast float %409, %243
  %597 = fmul fast float %410, %243
  %598 = fmul fast float %411, %243
  %599 = fmul fast float %412, %247
  %600 = fmul fast float %413, %247
  %601 = fmul fast float %414, %247
  %602 = fmul fast float %415, %251
  %603 = fmul fast float %416, %251
  %604 = fmul fast float %417, %251
  %605 = fmul float %452, 5.000000e-01
  %606 = fmul float %453, -5.000000e-01
  %607 = fmul float %453, 5.000000e-01
  %608 = sitofp i32 %449 to float
  %609 = sitofp i32 %450 to float
  %610 = fadd float %608, %605
  %611 = fadd float %609, %607
  %612 = or i32 %72, %73
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %614, label %645

; <label>:614                                     ; preds = %408
  %615 = icmp slt i32 %473, 8192
  br i1 %615, label %633, label %616

; <label>:616                                     ; preds = %614
  %617 = mul i32 %473, 21845
  %618 = shl i32 %474, 1
  %619 = sub i32 16, %618
  %620 = and i32 %618, 30
  %621 = shl i32 1, %620
  %622 = add i32 %621, -1
  %623 = and i32 %619, 30
  %624 = shl i32 %622, %623
  %625 = and i32 %624, 1431655765
  %626 = sub i32 7, %474
  %627 = and i32 %626, 31
  %628 = shl i32 %70, %627
  %629 = or i32 %68, -178946048
  %630 = add i32 %629, %617
  %631 = add i32 %630, %628
  %632 = add i32 %631, %625
  br label %633

; <label>:633                                     ; preds = %616, %614
  %634 = phi i32 [ %632, %616 ], [ %473, %614 ]
  %635 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %636 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %635, i32 %634, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %637 = extractvalue %dx.types.ResRet.i32 %636, 0
  %638 = and i32 %637, 1023
  %639 = lshr i32 %637, 10
  %640 = and i32 %639, 1023
  %641 = and i32 %637, 1073741824
  %642 = icmp ne i32 %641, 0
  %643 = select i1 %642, i32 %638, i32 65535
  %644 = select i1 %642, i32 %640, i32 65535
  br label %645

; <label>:645                                     ; preds = %633, %408
  %646 = phi i32 [ %643, %633 ], [ 0, %408 ]
  %647 = phi i32 [ %644, %633 ], [ 0, %408 ]
  %648 = and i32 %43, 4
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %653, label %650

; <label>:650                                     ; preds = %645
  %651 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %652 = extractvalue %dx.types.CBufRet.i32 %651, 0
  br label %653

; <label>:653                                     ; preds = %650, %645
  %654 = phi i32 [ %652, %650 ], [ 0, %645 ]
  br i1 %613, label %658, label %655

; <label>:655                                     ; preds = %653
  %656 = shl nuw nsw i32 %72, 7
  %657 = shl nuw nsw i32 %73, 7
  br label %661

; <label>:658                                     ; preds = %653
  %659 = shl nsw i32 %646, 7
  %660 = shl nsw i32 %647, 7
  br label %661

; <label>:661                                     ; preds = %658, %655
  %662 = phi i32 [ %656, %655 ], [ %659, %658 ]
  %663 = phi i32 [ %657, %655 ], [ %660, %658 ]
  %664 = phi i32 [ 0, %655 ], [ %659, %658 ]
  %665 = phi i32 [ 0, %655 ], [ %660, %658 ]
  %666 = uitofp i32 %646 to float
  %667 = uitofp i32 %647 to float
  %668 = uitofp i32 %68 to float
  %669 = uitofp i32 %70 to float
  %670 = fsub float %666, %668
  %671 = fsub float %667, %669
  %672 = fmul float %670, 1.280000e+02
  %673 = fmul float %671, 1.280000e+02
  %674 = fadd float %610, %672
  %675 = fadd float %611, %673
  %676 = fmul float %605, 2.560000e+02
  %677 = fmul float %606, 2.560000e+02
  %678 = fmul float %674, 2.560000e+02
  %679 = fmul float %675, 2.560000e+02
  %680 = fadd float %678, 5.000000e-01
  %681 = fadd float %679, 5.000000e-01
  br i1 %613, label %770, label %682

; <label>:682                                     ; preds = %661
  %683 = and i32 %26, 7
  %684 = lshr i32 %26, 3
  %685 = add nuw nsw i32 %68, %683
  %686 = add nuw nsw i32 %70, %684
  %687 = icmp ule i32 %685, %74
  %688 = icmp ule i32 %686, %75
  %689 = and i1 %687, %688
  br i1 %689, label %690, label %725

; <label>:690                                     ; preds = %682
  %691 = icmp slt i32 %473, 8192
  br i1 %691, label %710, label %692

; <label>:692                                     ; preds = %690
  %693 = mul i32 %473, 21845
  %694 = shl i32 %474, 1
  %695 = sub i32 16, %694
  %696 = and i32 %694, 30
  %697 = shl i32 1, %696
  %698 = add i32 %697, -1
  %699 = and i32 %695, 30
  %700 = shl i32 %698, %699
  %701 = and i32 %700, 1431655765
  %702 = sub i32 7, %474
  %703 = and i32 %702, 31
  %704 = shl i32 %686, %703
  %705 = or i32 %683, -178946048
  %706 = add nsw i32 %705, %68
  %707 = add i32 %706, %693
  %708 = add i32 %707, %704
  %709 = add i32 %708, %701
  br label %710

; <label>:710                                     ; preds = %692, %690
  %711 = phi i32 [ %709, %692 ], [ %473, %690 ]
  %712 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %713 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %712, i32 %711, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %714 = extractvalue %dx.types.ResRet.i32 %713, 0
  %715 = and i32 %714, 1023
  %716 = and i32 %714, 1073741824
  %717 = icmp ne i32 %716, 0
  %718 = shl i32 %714, 6
  %719 = and i32 %718, 67043328
  %720 = or i32 %719, %715
  %721 = select i1 %717, i32 %720, i32 -1
  %722 = shl nuw i32 %684, 3
  %723 = or i32 %722, %683
  %724 = getelementptr [64 x i32], [64 x i32] addrspace(3)* @"\01?GroupVsmPageTableCache@@3PAIA", i32 0, i32 %723
  store i32 %721, i32 addrspace(3)* %724, align 4, !tbaa !39
  br label %725

; <label>:725                                     ; preds = %710, %682
  %726 = add i32 %26, 32
  %727 = and i32 %726, 7
  %728 = lshr i32 %726, 3
  %729 = add nuw nsw i32 %68, %727
  %730 = add nuw nsw i32 %70, %728
  %731 = icmp ule i32 %729, %74
  %732 = icmp ule i32 %730, %75
  %733 = and i1 %731, %732
  br i1 %733, label %734, label %769

; <label>:734                                     ; preds = %725
  %735 = icmp slt i32 %473, 8192
  br i1 %735, label %754, label %736

; <label>:736                                     ; preds = %734
  %737 = mul i32 %473, 21845
  %738 = shl i32 %474, 1
  %739 = sub i32 16, %738
  %740 = and i32 %738, 30
  %741 = shl i32 1, %740
  %742 = add i32 %741, -1
  %743 = and i32 %739, 30
  %744 = shl i32 %742, %743
  %745 = and i32 %744, 1431655765
  %746 = sub i32 7, %474
  %747 = and i32 %746, 31
  %748 = shl i32 %730, %747
  %749 = or i32 %727, -178946048
  %750 = add nsw i32 %749, %68
  %751 = add i32 %750, %737
  %752 = add i32 %751, %748
  %753 = add i32 %752, %745
  br label %754

; <label>:754                                     ; preds = %736, %734
  %755 = phi i32 [ %753, %736 ], [ %473, %734 ]
  %756 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %757 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %756, i32 %755, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %758 = extractvalue %dx.types.ResRet.i32 %757, 0
  %759 = and i32 %758, 1023
  %760 = and i32 %758, 1073741824
  %761 = icmp ne i32 %760, 0
  %762 = shl i32 %758, 6
  %763 = and i32 %762, 67043328
  %764 = or i32 %763, %759
  %765 = select i1 %761, i32 %764, i32 -1
  %766 = shl nuw i32 %728, 3
  %767 = or i32 %766, %727
  %768 = getelementptr [64 x i32], [64 x i32] addrspace(3)* @"\01?GroupVsmPageTableCache@@3PAIA", i32 0, i32 %767
  store i32 %765, i32 addrspace(3)* %768, align 4, !tbaa !39
  br label %769

; <label>:769                                     ; preds = %754, %725
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  br label %770

; <label>:770                                     ; preds = %769, %661
  %771 = icmp eq i32 %595, 0
  br i1 %771, label %3125, label %772

; <label>:772                                     ; preds = %770
  br label %773

; <label>:773                                     ; preds = %3121, %772
  %774 = phi float [ %2551, %3121 ], [ undef, %772 ]
  %775 = phi float [ %2552, %3121 ], [ undef, %772 ]
  %776 = phi float [ %2571, %3121 ], [ undef, %772 ]
  %777 = phi float [ %2572, %3121 ], [ undef, %772 ]
  %778 = phi float [ %2573, %3121 ], [ undef, %772 ]
  %779 = phi float [ %2574, %3121 ], [ undef, %772 ]
  %780 = phi float [ %2575, %3121 ], [ undef, %772 ]
  %781 = phi float [ %2576, %3121 ], [ undef, %772 ]
  %782 = phi float [ %2577, %3121 ], [ undef, %772 ]
  %783 = phi float [ %2578, %3121 ], [ undef, %772 ]
  %784 = phi float [ %2579, %3121 ], [ undef, %772 ]
  %785 = phi float [ %2580, %3121 ], [ undef, %772 ]
  %786 = phi float [ %2581, %3121 ], [ undef, %772 ]
  %787 = phi float [ %2582, %3121 ], [ undef, %772 ]
  %788 = phi float [ %2583, %3121 ], [ undef, %772 ]
  %789 = phi float [ %2584, %3121 ], [ undef, %772 ]
  %790 = phi float [ %2585, %3121 ], [ undef, %772 ]
  %791 = phi float [ %2586, %3121 ], [ undef, %772 ]
  %792 = phi float [ %2587, %3121 ], [ undef, %772 ]
  %793 = phi float [ %2588, %3121 ], [ undef, %772 ]
  %794 = phi float [ %2589, %3121 ], [ undef, %772 ]
  %795 = phi float [ %2590, %3121 ], [ undef, %772 ]
  %796 = phi float [ %2591, %3121 ], [ undef, %772 ]
  %797 = phi float [ %2592, %3121 ], [ undef, %772 ]
  %798 = phi float [ %2593, %3121 ], [ undef, %772 ]
  %799 = phi float [ %2594, %3121 ], [ undef, %772 ]
  %800 = phi float [ %2595, %3121 ], [ undef, %772 ]
  %801 = phi float [ %2596, %3121 ], [ undef, %772 ]
  %802 = phi float [ %2597, %3121 ], [ undef, %772 ]
  %803 = phi float [ %2598, %3121 ], [ undef, %772 ]
  %804 = phi float [ %2599, %3121 ], [ undef, %772 ]
  %805 = phi float [ %2600, %3121 ], [ undef, %772 ]
  %806 = phi float [ %2601, %3121 ], [ undef, %772 ]
  %807 = phi float [ %2602, %3121 ], [ undef, %772 ]
  %808 = phi float [ %2603, %3121 ], [ undef, %772 ]
  %809 = phi float [ %2604, %3121 ], [ undef, %772 ]
  %810 = phi float [ %2605, %3121 ], [ undef, %772 ]
  %811 = phi float [ %2606, %3121 ], [ undef, %772 ]
  %812 = phi float [ %2607, %3121 ], [ undef, %772 ]
  %813 = phi float [ %2608, %3121 ], [ undef, %772 ]
  %814 = phi float [ %2609, %3121 ], [ undef, %772 ]
  %815 = phi float [ %2610, %3121 ], [ undef, %772 ]
  %816 = phi float [ %2611, %3121 ], [ undef, %772 ]
  %817 = phi float [ %2612, %3121 ], [ undef, %772 ]
  %818 = phi float [ %2613, %3121 ], [ undef, %772 ]
  %819 = phi float [ %2614, %3121 ], [ undef, %772 ]
  %820 = phi float [ %2615, %3121 ], [ undef, %772 ]
  %821 = phi float [ %2616, %3121 ], [ undef, %772 ]
  %822 = phi float [ %2617, %3121 ], [ undef, %772 ]
  %823 = phi float [ %2618, %3121 ], [ undef, %772 ]
  %824 = phi float [ %2619, %3121 ], [ undef, %772 ]
  %825 = phi float [ %2620, %3121 ], [ undef, %772 ]
  %826 = phi float [ %2621, %3121 ], [ undef, %772 ]
  %827 = phi float [ %2622, %3121 ], [ undef, %772 ]
  %828 = phi float [ %2623, %3121 ], [ undef, %772 ]
  %829 = phi float [ %2624, %3121 ], [ undef, %772 ]
  %830 = phi float [ %2625, %3121 ], [ undef, %772 ]
  %831 = phi float [ %2626, %3121 ], [ undef, %772 ]
  %832 = phi float [ %2627, %3121 ], [ undef, %772 ]
  %833 = phi float [ %2628, %3121 ], [ undef, %772 ]
  %834 = phi float [ %2629, %3121 ], [ undef, %772 ]
  %835 = phi float [ %2630, %3121 ], [ undef, %772 ]
  %836 = phi float [ %2631, %3121 ], [ undef, %772 ]
  %837 = phi float [ %2632, %3121 ], [ undef, %772 ]
  %838 = phi float [ %2633, %3121 ], [ undef, %772 ]
  %839 = phi float [ %2634, %3121 ], [ undef, %772 ]
  %840 = phi float [ %2635, %3121 ], [ undef, %772 ]
  %841 = phi float [ %2636, %3121 ], [ undef, %772 ]
  %842 = phi float [ %2637, %3121 ], [ undef, %772 ]
  %843 = phi float [ %2638, %3121 ], [ undef, %772 ]
  %844 = phi float [ %2639, %3121 ], [ undef, %772 ]
  %845 = phi float [ %2640, %3121 ], [ undef, %772 ]
  %846 = phi float [ %2641, %3121 ], [ undef, %772 ]
  %847 = phi float [ %2642, %3121 ], [ undef, %772 ]
  %848 = phi float [ %2643, %3121 ], [ undef, %772 ]
  %849 = phi float [ %2644, %3121 ], [ undef, %772 ]
  %850 = phi i32 [ %2645, %3121 ], [ undef, %772 ]
  %851 = phi float [ %2646, %3121 ], [ undef, %772 ]
  %852 = phi float [ %2647, %3121 ], [ undef, %772 ]
  %853 = phi float [ %2648, %3121 ], [ undef, %772 ]
  %854 = phi float [ %2649, %3121 ], [ undef, %772 ]
  %855 = phi float [ %2650, %3121 ], [ undef, %772 ]
  %856 = phi float [ %2651, %3121 ], [ undef, %772 ]
  %857 = phi float [ %2652, %3121 ], [ undef, %772 ]
  %858 = phi float [ %2653, %3121 ], [ undef, %772 ]
  %859 = phi float [ %2654, %3121 ], [ undef, %772 ]
  %860 = phi float [ %2655, %3121 ], [ undef, %772 ]
  %861 = phi float [ %2656, %3121 ], [ undef, %772 ]
  %862 = phi float [ %2657, %3121 ], [ undef, %772 ]
  %863 = phi float [ %2658, %3121 ], [ undef, %772 ]
  %864 = phi float [ %2659, %3121 ], [ undef, %772 ]
  %865 = phi float [ %2660, %3121 ], [ undef, %772 ]
  %866 = phi float [ %2661, %3121 ], [ undef, %772 ]
  %867 = phi float [ %2662, %3121 ], [ undef, %772 ]
  %868 = phi float [ %2663, %3121 ], [ undef, %772 ]
  %869 = phi float [ %2664, %3121 ], [ undef, %772 ]
  %870 = phi float [ %2665, %3121 ], [ undef, %772 ]
  %871 = phi float [ %2666, %3121 ], [ undef, %772 ]
  %872 = phi float [ %2667, %3121 ], [ undef, %772 ]
  %873 = phi float [ %2668, %3121 ], [ undef, %772 ]
  %874 = phi float [ %2669, %3121 ], [ undef, %772 ]
  %875 = phi float [ %2670, %3121 ], [ undef, %772 ]
  %876 = phi float [ %2671, %3121 ], [ undef, %772 ]
  %877 = phi float [ %2672, %3121 ], [ undef, %772 ]
  %878 = phi float [ %2673, %3121 ], [ undef, %772 ]
  %879 = phi float [ %2674, %3121 ], [ undef, %772 ]
  %880 = phi float [ %2675, %3121 ], [ undef, %772 ]
  %881 = phi float [ %2676, %3121 ], [ undef, %772 ]
  %882 = phi float [ %2677, %3121 ], [ undef, %772 ]
  %883 = phi float [ %2678, %3121 ], [ undef, %772 ]
  %884 = phi float [ %2679, %3121 ], [ undef, %772 ]
  %885 = phi float [ %2680, %3121 ], [ undef, %772 ]
  %886 = phi float [ %2681, %3121 ], [ undef, %772 ]
  %887 = phi float [ %2682, %3121 ], [ undef, %772 ]
  %888 = phi float [ %2683, %3121 ], [ undef, %772 ]
  %889 = phi float [ %2684, %3121 ], [ undef, %772 ]
  %890 = phi float [ %2685, %3121 ], [ undef, %772 ]
  %891 = phi float [ %2686, %3121 ], [ undef, %772 ]
  %892 = phi float [ %2687, %3121 ], [ undef, %772 ]
  %893 = phi float [ %2688, %3121 ], [ undef, %772 ]
  %894 = phi float [ %2689, %3121 ], [ undef, %772 ]
  %895 = phi float [ %2690, %3121 ], [ undef, %772 ]
  %896 = phi float [ %2691, %3121 ], [ undef, %772 ]
  %897 = phi float [ %2692, %3121 ], [ undef, %772 ]
  %898 = phi float [ %2693, %3121 ], [ undef, %772 ]
  %899 = phi float [ %2694, %3121 ], [ undef, %772 ]
  %900 = phi float [ %2695, %3121 ], [ undef, %772 ]
  %901 = phi float [ %2696, %3121 ], [ undef, %772 ]
  %902 = phi float [ %2697, %3121 ], [ undef, %772 ]
  %903 = phi float [ %2698, %3121 ], [ undef, %772 ]
  %904 = phi float [ %2699, %3121 ], [ undef, %772 ]
  %905 = phi float [ %2700, %3121 ], [ undef, %772 ]
  %906 = phi float [ %2701, %3121 ], [ undef, %772 ]
  %907 = phi float [ %2702, %3121 ], [ undef, %772 ]
  %908 = phi i32 [ %2703, %3121 ], [ undef, %772 ]
  %909 = phi i32 [ %2704, %3121 ], [ undef, %772 ]
  %910 = phi float [ %2705, %3121 ], [ undef, %772 ]
  %911 = phi float [ %2706, %3121 ], [ undef, %772 ]
  %912 = phi i32 [ %2707, %3121 ], [ 0, %772 ]
  %913 = phi i32 [ %3122, %3121 ], [ 0, %772 ]
  %914 = add i32 %913, %26
  %915 = icmp ult i32 %914, %595
  br i1 %915, label %916, label %950

; <label>:916                                     ; preds = %773
  %917 = add i32 %914, %37
  %918 = add nuw nsw i32 %577, 11
  %919 = mul i32 %917, %918
  %920 = add i32 %576, %549
  %921 = ashr i32 %919, 5
  %922 = shl nsw i32 %921, 2
  %923 = add i32 %920, %922
  %924 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %925 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %924, i32 %923, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %926 = extractvalue %dx.types.ResRet.i32 %925, 0
  %927 = and i32 %919, 31
  %928 = lshr i32 %926, %927
  %929 = icmp eq i32 %927, 0
  br i1 %929, label %935, label %930

; <label>:930                                     ; preds = %916
  %931 = extractvalue %dx.types.ResRet.i32 %925, 1
  %932 = sub i32 0, %919
  %933 = and i32 %932, 31
  %934 = shl i32 %931, %933
  br label %935

; <label>:935                                     ; preds = %930, %916
  %936 = phi i32 [ %934, %930 ], [ 0, %916 ]
  %937 = or i32 %936, %928
  %938 = shl i32 1, %578
  %939 = add i32 %938, -1
  %940 = and i32 %937, %939
  %941 = lshr i32 %937, %578
  %942 = and i32 %941, 31
  %943 = add nuw nsw i32 %577, 6
  %944 = lshr i32 %937, %943
  %945 = and i32 %944, 31
  %946 = add i32 %942, %940
  %947 = add i32 %945, %940
  %948 = select i1 %477, i32 %946, i32 %947
  %949 = select i1 %477, i32 %947, i32 %946
  br label %950

; <label>:950                                     ; preds = %935, %773
  %951 = phi i32 [ 0, %773 ], [ %948, %935 ]
  %952 = phi i32 [ 0, %773 ], [ %949, %935 ]
  %953 = phi i32 [ 0, %773 ], [ %940, %935 ]
  %954 = and i32 %953, 31
  %955 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %909, i32 %954)  ; WaveReadLaneAt(value,lane)
  %956 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %803, i32 %954)  ; WaveReadLaneAt(value,lane)
  %957 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %805, i32 %954)  ; WaveReadLaneAt(value,lane)
  %958 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %807, i32 %954)  ; WaveReadLaneAt(value,lane)
  %959 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %809, i32 %954)  ; WaveReadLaneAt(value,lane)
  %960 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %842, i32 %954)  ; WaveReadLaneAt(value,lane)
  %961 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %840, i32 %954)  ; WaveReadLaneAt(value,lane)
  %962 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %838, i32 %954)  ; WaveReadLaneAt(value,lane)
  %963 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %811, i32 %954)  ; WaveReadLaneAt(value,lane)
  %964 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %813, i32 %954)  ; WaveReadLaneAt(value,lane)
  %965 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %815, i32 %954)  ; WaveReadLaneAt(value,lane)
  %966 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %817, i32 %954)  ; WaveReadLaneAt(value,lane)
  %967 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %825, i32 %954)  ; WaveReadLaneAt(value,lane)
  %968 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %826, i32 %954)  ; WaveReadLaneAt(value,lane)
  %969 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %970 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %971 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %972 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %973 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %974 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %975 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %889, i32 %954)  ; WaveReadLaneAt(value,lane)
  %976 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %887, i32 %954)  ; WaveReadLaneAt(value,lane)
  %977 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %885, i32 %954)  ; WaveReadLaneAt(value,lane)
  %978 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %907, i32 %954)  ; WaveReadLaneAt(value,lane)
  %979 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %905, i32 %954)  ; WaveReadLaneAt(value,lane)
  %980 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %903, i32 %954)  ; WaveReadLaneAt(value,lane)
  %981 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %895, i32 %954)  ; WaveReadLaneAt(value,lane)
  %982 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %893, i32 %954)  ; WaveReadLaneAt(value,lane)
  %983 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %891, i32 %954)  ; WaveReadLaneAt(value,lane)
  %984 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %901, i32 %954)  ; WaveReadLaneAt(value,lane)
  %985 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %899, i32 %954)  ; WaveReadLaneAt(value,lane)
  %986 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %897, i32 %954)  ; WaveReadLaneAt(value,lane)
  %987 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %883, i32 %954)  ; WaveReadLaneAt(value,lane)
  %988 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %881, i32 %954)  ; WaveReadLaneAt(value,lane)
  %989 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %879, i32 %954)  ; WaveReadLaneAt(value,lane)
  %990 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %786, i32 %954)  ; WaveReadLaneAt(value,lane)
  %991 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %788, i32 %954)  ; WaveReadLaneAt(value,lane)
  %992 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %790, i32 %954)  ; WaveReadLaneAt(value,lane)
  %993 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %792, i32 %954)  ; WaveReadLaneAt(value,lane)
  %994 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %995 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %795, i32 %954)  ; WaveReadLaneAt(value,lane)
  %996 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %797, i32 %954)  ; WaveReadLaneAt(value,lane)
  %997 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %799, i32 %954)  ; WaveReadLaneAt(value,lane)
  %998 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %801, i32 %954)  ; WaveReadLaneAt(value,lane)
  %999 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %848, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1000 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %846, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1001 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %844, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1002 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %783, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1003 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %781, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1004 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %779, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1005 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %784, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1006 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %911, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1007 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %910, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1008 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %908, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1009 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %802, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1010 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %804, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1011 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %806, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1012 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %808, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1013 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %843, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1014 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %841, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1015 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %839, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1016 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %810, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1017 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %812, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1018 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %814, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1019 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %816, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1020 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %776, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1021 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %777, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1022 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1023 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1024 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1025 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1026 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1027 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1028 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %888, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1029 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %886, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1030 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %884, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1031 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %906, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1032 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %904, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1033 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %902, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1034 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %894, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1035 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %892, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1036 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %890, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1037 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %900, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1038 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %898, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1039 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %896, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1040 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %882, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1041 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %880, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1042 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %878, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1043 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %787, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1044 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %789, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1045 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %791, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1046 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %793, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1047 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1048 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %794, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1049 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %796, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1050 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %798, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1051 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %800, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1052 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %849, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1053 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %847, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1054 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %845, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1055 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %782, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1056 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %780, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1057 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %778, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1058 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %785, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1059 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %774, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1060 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %775, i32 %954)  ; WaveReadLaneAt(value,lane)
  %1061 = sub i32 %953, %912
  %1062 = and i32 %1061, 32
  %1063 = icmp eq i32 %1062, 0
  %1064 = select i1 %1063, float %1060, float %1007
  %1065 = select i1 %1063, float %1059, float %1006
  %1066 = and i32 %953, 63
  %1067 = mul i32 %1066, 4
  %1068 = add i32 0, %1067
  %1069 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1068
  %1070 = load float, float addrspace(3)* %1069, align 4
  %1071 = mul i32 %1066, 4
  %1072 = add i32 1, %1071
  %1073 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1072
  %1074 = load float, float addrspace(3)* %1073, align 4
  %1075 = mul i32 %1066, 4
  %1076 = add i32 2, %1075
  %1077 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1076
  %1078 = load float, float addrspace(3)* %1077, align 4
  %1079 = mul i32 %1066, 4
  %1080 = add i32 3, %1079
  %1081 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1080
  %1082 = load float, float addrspace(3)* %1081, align 4
  %1083 = and i32 %952, 31
  %1084 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %909, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1085 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %803, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1086 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %805, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1087 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %807, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1088 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %809, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1089 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %842, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1090 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %840, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1091 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %838, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1092 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %811, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1093 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %813, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1094 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %815, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1095 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %817, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1096 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %825, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1097 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %826, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1098 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1099 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1100 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1101 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1102 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1103 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1104 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %889, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1105 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %887, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1106 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %885, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1107 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %907, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1108 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %905, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1109 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %903, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1110 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %895, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1111 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %893, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1112 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %891, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1113 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %901, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1114 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %899, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1115 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %897, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1116 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %883, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1117 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %881, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1118 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %879, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1119 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %786, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1120 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %788, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1121 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %790, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1122 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %792, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1123 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1124 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %795, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1125 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %797, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1126 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %799, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1127 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %801, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1128 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %848, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1129 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %846, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1130 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %844, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1131 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %783, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1132 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %781, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1133 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %779, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1134 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %784, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1135 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %911, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1136 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %910, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1137 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %908, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1138 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %802, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1139 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %804, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1140 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %806, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1141 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %808, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1142 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %843, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1143 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %841, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1144 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %839, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1145 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %810, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1146 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %812, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1147 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %814, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1148 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %816, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1149 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %776, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1150 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %777, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1151 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1152 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1153 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1154 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1155 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1156 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1157 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %888, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1158 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %886, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1159 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %884, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1160 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %906, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1161 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %904, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1162 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %902, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1163 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %894, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1164 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %892, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1165 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %890, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1166 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %900, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1167 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %898, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1168 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %896, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1169 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %882, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1170 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %880, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1171 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %878, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1172 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %787, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1173 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %789, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1174 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %791, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1175 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %793, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1176 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1177 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %794, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1178 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %796, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1179 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %798, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1180 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %800, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1181 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %849, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1182 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %847, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1183 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %845, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1184 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %782, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1185 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %780, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1186 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %778, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1187 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %785, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1188 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %774, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1189 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %775, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %1190 = sub i32 %952, %912
  %1191 = and i32 %1190, 32
  %1192 = icmp eq i32 %1191, 0
  %1193 = select i1 %1192, float %1189, float %1136
  %1194 = select i1 %1192, float %1188, float %1135
  %1195 = and i32 %952, 63
  %1196 = mul i32 %1195, 4
  %1197 = add i32 0, %1196
  %1198 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1197
  %1199 = load float, float addrspace(3)* %1198, align 4
  %1200 = mul i32 %1195, 4
  %1201 = add i32 1, %1200
  %1202 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1201
  %1203 = load float, float addrspace(3)* %1202, align 4
  %1204 = mul i32 %1195, 4
  %1205 = add i32 2, %1204
  %1206 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1205
  %1207 = load float, float addrspace(3)* %1206, align 4
  %1208 = mul i32 %1195, 4
  %1209 = add i32 3, %1208
  %1210 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1209
  %1211 = load float, float addrspace(3)* %1210, align 4
  %1212 = and i32 %951, 31
  %1213 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %909, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1214 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %803, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1215 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %805, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1216 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %807, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1217 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %809, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1218 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %842, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1219 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %840, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1220 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %838, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1221 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %811, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1222 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %813, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1223 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %815, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1224 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %817, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1225 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %825, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1226 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %826, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1227 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1228 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1229 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1230 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1231 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1232 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1233 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %889, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1234 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %887, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1235 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %885, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1236 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %907, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1237 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %905, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1238 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %903, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1239 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %895, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1240 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %893, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1241 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %891, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1242 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %901, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1243 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %899, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1244 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %897, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1245 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %883, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1246 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %881, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1247 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %879, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1248 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %786, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1249 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %788, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1250 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %790, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1251 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %792, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1252 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1253 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %795, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1254 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %797, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1255 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %799, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1256 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %801, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1257 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %848, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1258 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %846, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1259 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %844, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1260 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %783, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1261 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %781, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1262 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %779, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1263 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %784, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1264 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %911, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1265 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %910, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1266 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %908, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1267 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %802, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1268 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %804, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1269 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %806, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1270 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %808, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1271 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %843, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1272 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %841, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1273 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %839, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1274 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %810, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1275 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %812, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1276 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %814, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1277 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %816, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1278 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %776, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1279 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %777, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1280 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1281 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1282 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1283 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1284 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1285 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1286 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %888, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1287 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %886, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1288 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %884, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1289 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %906, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1290 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %904, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1291 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %902, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1292 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %894, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1293 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %892, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1294 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %890, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1295 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %900, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1296 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %898, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1297 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %896, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1298 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %882, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1299 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %880, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1300 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %878, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1301 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %787, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1302 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %789, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1303 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %791, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1304 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %793, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1305 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1306 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %794, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1307 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %796, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1308 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %798, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1309 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %800, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1310 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %849, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1311 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %847, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1312 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %845, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1313 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %782, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1314 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %780, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1315 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %778, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1316 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %785, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1317 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %774, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1318 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %775, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %1319 = sub i32 %951, %912
  %1320 = and i32 %1319, 32
  %1321 = icmp eq i32 %1320, 0
  %1322 = select i1 %1321, float %1318, float %1265
  %1323 = select i1 %1321, float %1317, float %1264
  %1324 = and i32 %951, 63
  %1325 = mul i32 %1324, 4
  %1326 = add i32 0, %1325
  %1327 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1326
  %1328 = load float, float addrspace(3)* %1327, align 4
  %1329 = mul i32 %1324, 4
  %1330 = add i32 1, %1329
  %1331 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1330
  %1332 = load float, float addrspace(3)* %1331, align 4
  %1333 = mul i32 %1324, 4
  %1334 = add i32 2, %1333
  %1335 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1334
  %1336 = load float, float addrspace(3)* %1335, align 4
  %1337 = mul i32 %1324, 4
  %1338 = add i32 3, %1337
  %1339 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %1338
  %1340 = load float, float addrspace(3)* %1339, align 4
  %1341 = call i32 @dx.op.binary.i32(i32 39, i32 %952, i32 %951)  ; UMax(a,b)
  %1342 = icmp uge i32 %1341, %912
  %1343 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %1342)  ; WaveAnyTrue(cond)
  br i1 %1343, label %1344, label %2550

; <label>:1344                                    ; preds = %950
  br label %1345

; <label>:1345                                    ; preds = %2539, %1344
  %1346 = phi float [ %2540, %2539 ], [ %1323, %1344 ]
  %1347 = phi float [ %2474, %2539 ], [ %1194, %1344 ]
  %1348 = phi float [ %2408, %2539 ], [ %1065, %1344 ]
  %1349 = phi float [ %2541, %2539 ], [ %1322, %1344 ]
  %1350 = phi float [ %2475, %2539 ], [ %1193, %1344 ]
  %1351 = phi float [ %2409, %2539 ], [ %1064, %1344 ]
  %1352 = phi float [ %2542, %2539 ], [ %1328, %1344 ]
  %1353 = phi float [ %2476, %2539 ], [ %1199, %1344 ]
  %1354 = phi float [ %2410, %2539 ], [ %1070, %1344 ]
  %1355 = phi float [ %2543, %2539 ], [ %1332, %1344 ]
  %1356 = phi float [ %2477, %2539 ], [ %1203, %1344 ]
  %1357 = phi float [ %2411, %2539 ], [ %1074, %1344 ]
  %1358 = phi float [ %2544, %2539 ], [ %1336, %1344 ]
  %1359 = phi float [ %2478, %2539 ], [ %1207, %1344 ]
  %1360 = phi float [ %2412, %2539 ], [ %1078, %1344 ]
  %1361 = phi float [ %2545, %2539 ], [ %1340, %1344 ]
  %1362 = phi float [ %2479, %2539 ], [ %1211, %1344 ]
  %1363 = phi float [ %2413, %2539 ], [ %1082, %1344 ]
  %1364 = phi float [ %2327, %2539 ], [ %779, %1344 ]
  %1365 = phi float [ %2326, %2539 ], [ %781, %1344 ]
  %1366 = phi float [ %2325, %2539 ], [ %783, %1344 ]
  %1367 = phi float [ %2328, %2539 ], [ %784, %1344 ]
  %1368 = phi float [ %2321, %2539 ], [ %786, %1344 ]
  %1369 = phi float [ %2322, %2539 ], [ %788, %1344 ]
  %1370 = phi float [ %2323, %2539 ], [ %790, %1344 ]
  %1371 = phi float [ %2324, %2539 ], [ %792, %1344 ]
  %1372 = phi float [ %2288, %2539 ], [ %795, %1344 ]
  %1373 = phi float [ %2289, %2539 ], [ %797, %1344 ]
  %1374 = phi float [ %2290, %2539 ], [ %799, %1344 ]
  %1375 = phi float [ %2291, %2539 ], [ %801, %1344 ]
  %1376 = phi float [ %2294, %2539 ], [ %803, %1344 ]
  %1377 = phi float [ %2295, %2539 ], [ %805, %1344 ]
  %1378 = phi float [ %2296, %2539 ], [ %807, %1344 ]
  %1379 = phi float [ %2297, %2539 ], [ %809, %1344 ]
  %1380 = phi float [ %2301, %2539 ], [ %811, %1344 ]
  %1381 = phi float [ %2302, %2539 ], [ %813, %1344 ]
  %1382 = phi float [ %2303, %2539 ], [ %815, %1344 ]
  %1383 = phi float [ %2304, %2539 ], [ %817, %1344 ]
  %1384 = phi float [ %2285, %2539 ], [ %818, %1344 ]
  %1385 = phi float [ %2286, %2539 ], [ %819, %1344 ]
  %1386 = phi float [ %2287, %2539 ], [ %820, %1344 ]
  %1387 = phi float [ %2288, %2539 ], [ %821, %1344 ]
  %1388 = phi float [ %2289, %2539 ], [ %822, %1344 ]
  %1389 = phi float [ %2290, %2539 ], [ %823, %1344 ]
  %1390 = phi float [ %2291, %2539 ], [ %824, %1344 ]
  %1391 = phi float [ %2292, %2539 ], [ %825, %1344 ]
  %1392 = phi float [ %2293, %2539 ], [ %826, %1344 ]
  %1393 = phi float [ %2294, %2539 ], [ %827, %1344 ]
  %1394 = phi float [ %2295, %2539 ], [ %828, %1344 ]
  %1395 = phi float [ %2296, %2539 ], [ %829, %1344 ]
  %1396 = phi float [ %2297, %2539 ], [ %830, %1344 ]
  %1397 = phi float [ %2298, %2539 ], [ %831, %1344 ]
  %1398 = phi float [ %2299, %2539 ], [ %832, %1344 ]
  %1399 = phi float [ %2300, %2539 ], [ %833, %1344 ]
  %1400 = phi float [ %2301, %2539 ], [ %834, %1344 ]
  %1401 = phi float [ %2302, %2539 ], [ %835, %1344 ]
  %1402 = phi float [ %2303, %2539 ], [ %836, %1344 ]
  %1403 = phi float [ %2304, %2539 ], [ %837, %1344 ]
  %1404 = phi float [ %2300, %2539 ], [ %838, %1344 ]
  %1405 = phi float [ %2299, %2539 ], [ %840, %1344 ]
  %1406 = phi float [ %2298, %2539 ], [ %842, %1344 ]
  %1407 = phi float [ %2287, %2539 ], [ %844, %1344 ]
  %1408 = phi float [ %2286, %2539 ], [ %846, %1344 ]
  %1409 = phi float [ %2285, %2539 ], [ %848, %1344 ]
  %1410 = phi i32 [ %2305, %2539 ], [ %850, %1344 ]
  %1411 = phi float [ %2306, %2539 ], [ %851, %1344 ]
  %1412 = phi float [ %2307, %2539 ], [ %852, %1344 ]
  %1413 = phi float [ %2308, %2539 ], [ %853, %1344 ]
  %1414 = phi float [ %2309, %2539 ], [ %854, %1344 ]
  %1415 = phi float [ %2310, %2539 ], [ %855, %1344 ]
  %1416 = phi float [ %2311, %2539 ], [ %856, %1344 ]
  %1417 = phi float [ %2312, %2539 ], [ %857, %1344 ]
  %1418 = phi float [ %2313, %2539 ], [ %858, %1344 ]
  %1419 = phi float [ %2314, %2539 ], [ %859, %1344 ]
  %1420 = phi float [ %2315, %2539 ], [ %860, %1344 ]
  %1421 = phi float [ %2316, %2539 ], [ %861, %1344 ]
  %1422 = phi float [ %2317, %2539 ], [ %862, %1344 ]
  %1423 = phi float [ %2318, %2539 ], [ %863, %1344 ]
  %1424 = phi float [ %2319, %2539 ], [ %864, %1344 ]
  %1425 = phi float [ %2320, %2539 ], [ %865, %1344 ]
  %1426 = phi float [ %2321, %2539 ], [ %866, %1344 ]
  %1427 = phi float [ %2322, %2539 ], [ %867, %1344 ]
  %1428 = phi float [ %2323, %2539 ], [ %868, %1344 ]
  %1429 = phi float [ %2324, %2539 ], [ %869, %1344 ]
  %1430 = phi float [ %2325, %2539 ], [ %870, %1344 ]
  %1431 = phi float [ %2326, %2539 ], [ %871, %1344 ]
  %1432 = phi float [ %2327, %2539 ], [ %872, %1344 ]
  %1433 = phi float [ %2328, %2539 ], [ %873, %1344 ]
  %1434 = phi float [ %2329, %2539 ], [ %874, %1344 ]
  %1435 = phi float [ %2330, %2539 ], [ %875, %1344 ]
  %1436 = phi float [ %2331, %2539 ], [ %876, %1344 ]
  %1437 = phi float [ %2332, %2539 ], [ %877, %1344 ]
  %1438 = phi float [ %2320, %2539 ], [ %879, %1344 ]
  %1439 = phi float [ %2319, %2539 ], [ %881, %1344 ]
  %1440 = phi float [ %2318, %2539 ], [ %883, %1344 ]
  %1441 = phi float [ %2308, %2539 ], [ %885, %1344 ]
  %1442 = phi float [ %2307, %2539 ], [ %887, %1344 ]
  %1443 = phi float [ %2306, %2539 ], [ %889, %1344 ]
  %1444 = phi float [ %2314, %2539 ], [ %891, %1344 ]
  %1445 = phi float [ %2313, %2539 ], [ %893, %1344 ]
  %1446 = phi float [ %2312, %2539 ], [ %895, %1344 ]
  %1447 = phi float [ %2317, %2539 ], [ %897, %1344 ]
  %1448 = phi float [ %2316, %2539 ], [ %899, %1344 ]
  %1449 = phi float [ %2315, %2539 ], [ %901, %1344 ]
  %1450 = phi float [ %2311, %2539 ], [ %903, %1344 ]
  %1451 = phi float [ %2310, %2539 ], [ %905, %1344 ]
  %1452 = phi float [ %2309, %2539 ], [ %907, %1344 ]
  %1453 = phi i32 [ %2305, %2539 ], [ %909, %1344 ]
  %1454 = phi float [ %2333, %2539 ], [ %910, %1344 ]
  %1455 = phi float [ %2334, %2539 ], [ %911, %1344 ]
  %1456 = phi i32 [ %2546, %2539 ], [ %912, %1344 ]
  %1457 = add i32 %1456, %26
  %1458 = icmp ult i32 %1457, %573
  br i1 %1458, label %1459, label %2284, !dx.controlflow.hints !43

; <label>:1459                                    ; preds = %1345
  %1460 = add nuw nsw i32 %580, %582
  %1461 = add nuw nsw i32 %1460, %584
  %1462 = mul i32 %1457, %1461
  %1463 = add i32 %574, %549
  %1464 = lshr i32 %1462, 5
  %1465 = shl nuw nsw i32 %1464, 2
  %1466 = add i32 %1463, %1465
  %1467 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1468 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1467, i32 %1466, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1469 = extractvalue %dx.types.ResRet.i32 %1468, 0
  %1470 = extractvalue %dx.types.ResRet.i32 %1468, 1
  %1471 = extractvalue %dx.types.ResRet.i32 %1468, 2
  %1472 = and i32 %1462, 31
  %1473 = lshr i32 %1469, %1472
  %1474 = icmp eq i32 %1472, 0
  br i1 %1474, label %1479, label %1475

; <label>:1475                                    ; preds = %1459
  %1476 = sub i32 0, %1462
  %1477 = and i32 %1476, 31
  %1478 = shl i32 %1470, %1477
  br label %1479

; <label>:1479                                    ; preds = %1475, %1459
  %1480 = phi i32 [ %1478, %1475 ], [ 0, %1459 ]
  %1481 = or i32 %1480, %1473
  %1482 = lshr i32 %1470, %1472
  br i1 %1474, label %1487, label %1483

; <label>:1483                                    ; preds = %1479
  %1484 = sub i32 0, %1462
  %1485 = and i32 %1484, 31
  %1486 = shl i32 %1471, %1485
  br label %1487

; <label>:1487                                    ; preds = %1483, %1479
  %1488 = phi i32 [ %1486, %1483 ], [ 0, %1479 ]
  %1489 = or i32 %1488, %1482
  %1490 = shl i32 1, %580
  %1491 = add i32 %1490, -1
  %1492 = and i32 %1481, %1491
  %1493 = lshr i32 %1481, %580
  %1494 = icmp eq i32 %580, 0
  br i1 %1494, label %1499, label %1495

; <label>:1495                                    ; preds = %1487
  %1496 = sub nsw i32 0, %579
  %1497 = and i32 %1496, 31
  %1498 = shl i32 %1489, %1497
  br label %1499

; <label>:1499                                    ; preds = %1495, %1487
  %1500 = phi i32 [ %1498, %1495 ], [ 0, %1487 ]
  %1501 = or i32 %1500, %1493
  %1502 = shl i32 1, %582
  %1503 = add i32 %1502, -1
  %1504 = and i32 %1501, %1503
  %1505 = lshr i32 %1501, %582
  %1506 = icmp eq i32 %582, 0
  br i1 %1506, label %1512, label %1507

; <label>:1507                                    ; preds = %1499
  %1508 = lshr i32 %1489, %580
  %1509 = sub nsw i32 0, %581
  %1510 = and i32 %1509, 31
  %1511 = shl i32 %1508, %1510
  br label %1512

; <label>:1512                                    ; preds = %1507, %1499
  %1513 = phi i32 [ %1511, %1507 ], [ 0, %1499 ]
  %1514 = or i32 %1513, %1505
  %1515 = shl i32 1, %584
  %1516 = add i32 %1515, -1
  %1517 = and i32 %1514, %1516
  %1518 = shl i32 %567, 20
  %1519 = and i32 %1518, 528482304
  %1520 = sub nsw i32 1233125376, %1519
  %1521 = bitcast i32 %1520 to float
  %1522 = add i32 %1492, %564
  %1523 = add i32 %1504, %565
  %1524 = add i32 %1517, %566
  %1525 = sitofp i32 %1522 to float
  %1526 = sitofp i32 %1523 to float
  %1527 = sitofp i32 %1524 to float
  %1528 = fmul float %1521, %1525
  %1529 = fmul float %1521, %1526
  %1530 = fmul float %1521, %1527
  %1531 = add i32 %590, %549
  %1532 = add i32 %588, %549
  %1533 = and i32 %560, 255
  %1534 = uitofp i32 %1533 to float
  %1535 = fptoui float %1534 to i32
  %1536 = lshr i32 %560, 8
  %1537 = and i32 %1536, 255
  %1538 = uitofp i32 %1537 to float
  %1539 = fptoui float %1538 to i32
  %1540 = lshr i32 %560, 16
  %1541 = and i32 %1540, 255
  %1542 = uitofp i32 %1541 to float
  %1543 = fptoui float %1542 to i32
  %1544 = lshr i32 %560, 24
  %1545 = uitofp i32 %1544 to float
  %1546 = fptoui float %1545 to i32
  %1547 = and i32 %561, 15
  %1548 = lshr i32 %561, 4
  %1549 = and i32 %1548, 15
  %1550 = lshr i32 %561, 8
  %1551 = and i32 %1550, 15
  %1552 = lshr i32 %561, 12
  %1553 = and i32 %1552, 15
  %1554 = mul i32 %1457, %589
  %1555 = shl nuw nsw i32 %586, 1
  %1556 = ashr i32 %1554, 5
  %1557 = shl nsw i32 %1556, 2
  %1558 = add i32 %1557, %1532
  %1559 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1467, i32 %1558, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1560 = extractvalue %dx.types.ResRet.i32 %1559, 0
  %1561 = extractvalue %dx.types.ResRet.i32 %1559, 1
  %1562 = extractvalue %dx.types.ResRet.i32 %1559, 2
  %1563 = extractvalue %dx.types.ResRet.i32 %1559, 3
  %1564 = and i32 %1554, 31
  %1565 = lshr i32 %1560, %1564
  %1566 = icmp eq i32 %1564, 0
  br i1 %1566, label %1571, label %1567

; <label>:1567                                    ; preds = %1512
  %1568 = sub i32 0, %1554
  %1569 = and i32 %1568, 31
  %1570 = shl i32 %1561, %1569
  br label %1571

; <label>:1571                                    ; preds = %1567, %1512
  %1572 = phi i32 [ %1570, %1567 ], [ 0, %1512 ]
  %1573 = or i32 %1572, %1565
  %1574 = lshr i32 %1561, %1564
  br i1 %1566, label %1579, label %1575

; <label>:1575                                    ; preds = %1571
  %1576 = sub i32 0, %1554
  %1577 = and i32 %1576, 31
  %1578 = shl i32 %1562, %1577
  br label %1579

; <label>:1579                                    ; preds = %1575, %1571
  %1580 = phi i32 [ %1578, %1575 ], [ 0, %1571 ]
  %1581 = or i32 %1580, %1574
  %1582 = lshr i32 %1562, %1564
  br i1 %1566, label %1587, label %1583

; <label>:1583                                    ; preds = %1579
  %1584 = sub i32 0, %1554
  %1585 = and i32 %1584, 31
  %1586 = shl i32 %1563, %1585
  br label %1587

; <label>:1587                                    ; preds = %1583, %1579
  %1588 = phi i32 [ %1586, %1583 ], [ 0, %1579 ]
  %1589 = or i32 %1588, %1582
  %1590 = lshr i32 %1563, %1564
  %1591 = shl i32 1, %1555
  %1592 = add i32 %1591, -1
  %1593 = and i32 %1573, %1592
  %1594 = shl i32 1, %586
  %1595 = add i32 %1594, -1
  %1596 = and i32 %1593, %1595
  %1597 = lshr i32 %1593, %586
  %1598 = and i32 %1597, %1595
  %1599 = uitofp i32 %1596 to float
  %1600 = uitofp i32 %1598 to float
  %1601 = uitofp i32 %1595 to float
  %1602 = fdiv fast float 2.000000e+00, %1601
  %1603 = fmul fast float %1602, %1599
  %1604 = fmul fast float %1602, %1600
  %1605 = fadd fast float %1603, -1.000000e+00
  %1606 = fadd fast float %1604, -1.000000e+00
  %1607 = call float @dx.op.unary.f32(i32 6, float %1605)  ; FAbs(value)
  %1608 = fsub fast float 1.000000e+00, %1607
  %1609 = call float @dx.op.unary.f32(i32 6, float %1606)  ; FAbs(value)
  %1610 = fsub fast float %1608, %1609
  %1611 = fsub fast float -0.000000e+00, %1610
  %1612 = call float @dx.op.unary.f32(i32 7, float %1611)  ; Saturate(value)
  %1613 = fsub fast float -0.000000e+00, %1612
  %1614 = fcmp fast oge float %1605, 0.000000e+00
  %1615 = fcmp fast oge float %1606, 0.000000e+00
  %1616 = select i1 %1614, float %1613, float %1612
  %1617 = select i1 %1615, float %1613, float %1612
  %1618 = fadd fast float %1616, %1605
  %1619 = fadd fast float %1617, %1606
  %1620 = call float @dx.op.dot3.f32(i32 55, float %1618, float %1619, float %1610, float %1618, float %1619, float %1610)  ; Dot3(ax,ay,az,bx,by,bz)
  %1621 = call float @dx.op.unary.f32(i32 25, float %1620)  ; Rsqrt(value)
  %1622 = fmul fast float %1618, %1621
  %1623 = fmul fast float %1619, %1621
  %1624 = fmul fast float %1621, %1610
  %1625 = add nuw nsw i32 %587, 1
  %1626 = select i1 %592, i32 %1625, i32 0
  %1627 = add nsw i32 %1554, %1555
  %1628 = lshr i32 %1573, %1555
  %1629 = icmp eq i32 %586, 0
  br i1 %1629, label %1634, label %1630

; <label>:1630                                    ; preds = %1587
  %1631 = sub nsw i32 0, %1555
  %1632 = and i32 %1631, 30
  %1633 = shl i32 %1581, %1632
  br label %1634

; <label>:1634                                    ; preds = %1630, %1587
  %1635 = phi i32 [ %1633, %1630 ], [ 0, %1587 ]
  %1636 = or i32 %1635, %1628
  %1637 = lshr i32 %1581, %1555
  br i1 %1629, label %1642, label %1638

; <label>:1638                                    ; preds = %1634
  %1639 = sub nsw i32 0, %1555
  %1640 = and i32 %1639, 30
  %1641 = shl i32 %1589, %1640
  br label %1642

; <label>:1642                                    ; preds = %1638, %1634
  %1643 = phi i32 [ %1641, %1638 ], [ 0, %1634 ]
  %1644 = or i32 %1643, %1637
  %1645 = lshr i32 %1589, %1555
  br i1 %1629, label %1650, label %1646

; <label>:1646                                    ; preds = %1642
  %1647 = sub nsw i32 0, %1555
  %1648 = and i32 %1647, 30
  %1649 = shl i32 %1590, %1648
  br label %1650

; <label>:1650                                    ; preds = %1646, %1642
  %1651 = phi i32 [ %1649, %1646 ], [ 0, %1642 ]
  %1652 = or i32 %1651, %1645
  %1653 = shl i32 1, %1626
  %1654 = add i32 %1653, -1
  %1655 = and i32 %1636, %1654
  br i1 %592, label %1656, label %1693, !dx.controlflow.hints !44

; <label>:1656                                    ; preds = %1650
  %1657 = shl i32 1, %587
  %1658 = and i32 %1655, %1657
  %1659 = icmp ne i32 %1658, 0
  %1660 = add i32 %1657, -1
  %1661 = and i32 %1655, %1660
  %1662 = call float @dx.op.unary.f32(i32 6, float %1624)  ; FAbs(value)
  %1663 = call float @dx.op.unary.f32(i32 6, float %1622)  ; FAbs(value)
  %1664 = fcmp fast ogt float %1662, %1663
  %1665 = select i1 %1664, float %1624, float %1622
  %1666 = select i1 %1664, float %1622, float %1624
  %1667 = fsub fast float -0.000000e+00, %1623
  %1668 = fmul fast float %1666, %1665
  %1669 = fmul fast float %1666, %1667
  %1670 = fmul fast float %1665, %1665
  %1671 = fmul fast float %1623, %1667
  %1672 = fsub fast float %1670, %1671
  %1673 = call float @dx.op.dot2.f32(i32 54, float %1667, float %1665, float %1667, float %1665)  ; Dot2(ax,ay,bx,by)
  %1674 = call float @dx.op.unary.f32(i32 25, float %1673)  ; Rsqrt(value)
  %1675 = uitofp i32 %1661 to float
  %1676 = uitofp i32 %1657 to float
  %1677 = fdiv fast float 0x401921FB60000000, %1676
  %1678 = fmul fast float %1677, %1675
  %1679 = call float @dx.op.unary.f32(i32 12, float %1678)  ; Cos(value)
  %1680 = fmul fast float %1679, %1674
  %1681 = fmul fast float %1680, %1667
  %1682 = fmul fast float %1680, %1665
  %1683 = call float @dx.op.unary.f32(i32 13, float %1678)  ; Sin(value)
  %1684 = fmul fast float %1683, %1674
  %1685 = fmul fast float %1668, %1684
  %1686 = fmul fast float %1669, %1684
  %1687 = fmul fast float %1684, %1672
  %1688 = fsub fast float %1681, %1685
  %1689 = fadd fast float %1686, %1682
  %1690 = select i1 %1664, float %1687, float %1688
  %1691 = select i1 %1664, float %1688, float %1687
  %1692 = select i1 %1659, float -1.000000e+00, float 1.000000e+00
  br label %1693

; <label>:1693                                    ; preds = %1656, %1650
  %1694 = phi float [ %1690, %1656 ], [ 0.000000e+00, %1650 ]
  %1695 = phi float [ %1689, %1656 ], [ 0.000000e+00, %1650 ]
  %1696 = phi float [ %1691, %1656 ], [ 0.000000e+00, %1650 ]
  %1697 = phi float [ %1692, %1656 ], [ 0.000000e+00, %1650 ]
  %1698 = lshr i32 %1636, %1626
  %1699 = shl i32 1, %1547
  %1700 = add i32 %1699, -1
  %1701 = and i32 %1698, %1700
  %1702 = add nuw nsw i32 %1626, %1547
  %1703 = and i32 %1702, 31
  %1704 = lshr i32 %1636, %1703
  %1705 = shl i32 1, %1549
  %1706 = add i32 %1705, -1
  %1707 = and i32 %1704, %1706
  %1708 = add nuw nsw i32 %1702, %1549
  %1709 = add nsw i32 %1708, %1627
  %1710 = and i32 %1708, 31
  %1711 = lshr i32 %1636, %1710
  %1712 = icmp eq i32 %1710, 0
  br i1 %1712, label %1717, label %1713

; <label>:1713                                    ; preds = %1693
  %1714 = sub nsw i32 0, %1708
  %1715 = and i32 %1714, 31
  %1716 = shl i32 %1644, %1715
  br label %1717

; <label>:1717                                    ; preds = %1713, %1693
  %1718 = phi i32 [ %1716, %1713 ], [ 0, %1693 ]
  %1719 = or i32 %1718, %1711
  %1720 = and i32 %1708, 31
  %1721 = lshr i32 %1644, %1720
  %1722 = icmp eq i32 %1720, 0
  br i1 %1722, label %1727, label %1723

; <label>:1723                                    ; preds = %1717
  %1724 = sub nsw i32 0, %1708
  %1725 = and i32 %1724, 31
  %1726 = shl i32 %1652, %1725
  br label %1727

; <label>:1727                                    ; preds = %1723, %1717
  %1728 = phi i32 [ %1726, %1723 ], [ 0, %1717 ]
  %1729 = or i32 %1728, %1721
  %1730 = shl i32 1, %1551
  %1731 = add i32 %1730, -1
  %1732 = and i32 %1719, %1731
  %1733 = lshr i32 %1719, %1551
  %1734 = shl i32 1, %1553
  %1735 = add i32 %1734, -1
  %1736 = and i32 %1733, %1735
  %1737 = add nuw nsw i32 %1551, %1553
  %1738 = add i32 %1701, %1535
  %1739 = add i32 %1707, %1539
  %1740 = add i32 %1732, %1543
  %1741 = add i32 %1736, %1546
  %1742 = uitofp i32 %1738 to float
  %1743 = uitofp i32 %1739 to float
  %1744 = uitofp i32 %1740 to float
  %1745 = uitofp i32 %1741 to float
  %1746 = fmul fast float %1742, 0x3F70101020000000
  %1747 = fmul fast float %1743, 0x3F70101020000000
  %1748 = fmul fast float %1744, 0x3F70101020000000
  %1749 = fmul fast float %1745, 0x3F70101020000000
  %1750 = icmp eq i32 %593, 0
  br i1 %1750, label %1755, label %1751

; <label>:1751                                    ; preds = %1727
  %1752 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1467, i32 %1531, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1753 = extractvalue %dx.types.ResRet.i32 %1752, 0
  %1754 = extractvalue %dx.types.ResRet.i32 %1752, 1
  br label %1755

; <label>:1755                                    ; preds = %1751, %1727
  %1756 = phi i32 [ %1753, %1751 ], [ 0, %1727 ]
  %1757 = phi i32 [ %1754, %1751 ], [ 0, %1727 ]
  %1758 = and i32 %1756, 31
  %1759 = lshr i32 %1756, 5
  %1760 = and i32 %1757, 31
  %1761 = lshr i32 %1757, 5
  %1762 = add nsw i32 %1737, %1709
  %1763 = lshr i32 %1719, %1737
  %1764 = icmp eq i32 %1737, 0
  br i1 %1764, label %1769, label %1765

; <label>:1765                                    ; preds = %1755
  %1766 = sub nsw i32 0, %1737
  %1767 = and i32 %1766, 31
  %1768 = shl i32 %1729, %1767
  br label %1769

; <label>:1769                                    ; preds = %1765, %1755
  %1770 = phi i32 [ %1768, %1765 ], [ 0, %1755 ]
  %1771 = or i32 %1770, %1763
  %1772 = shl i32 1, %1758
  %1773 = add i32 %1772, -1
  %1774 = and i32 %1771, %1773
  %1775 = add nsw i32 %1758, %1762
  %1776 = ashr i32 %1775, 5
  %1777 = shl nsw i32 %1776, 2
  %1778 = add i32 %1777, %1532
  %1779 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1780 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1779, i32 %1778, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1781 = extractvalue %dx.types.ResRet.i32 %1780, 0
  %1782 = add i32 %1756, %1762
  %1783 = and i32 %1782, 31
  %1784 = lshr i32 %1781, %1783
  %1785 = icmp eq i32 %1783, 0
  br i1 %1785, label %1791, label %1786

; <label>:1786                                    ; preds = %1769
  %1787 = extractvalue %dx.types.ResRet.i32 %1780, 1
  %1788 = sub i32 0, %1775
  %1789 = and i32 %1788, 31
  %1790 = shl i32 %1787, %1789
  br label %1791

; <label>:1791                                    ; preds = %1786, %1769
  %1792 = phi i32 [ %1790, %1786 ], [ 0, %1769 ]
  br i1 %1750, label %1824, label %1793, !dx.controlflow.hints !45

; <label>:1793                                    ; preds = %1791
  %1794 = or i32 %1792, %1784
  %1795 = shl i32 1, %1760
  %1796 = add i32 %1795, -1
  %1797 = and i32 %1794, %1796
  %1798 = add i32 %1774, %1759
  %1799 = add i32 %1797, %1761
  %1800 = icmp ult i32 %1798, 524288
  %1801 = sext i1 %1800 to i32
  %1802 = xor i32 %1801, %1798
  %1803 = shl i32 %1802, 9
  %1804 = and i32 %1803, 268434944
  %1805 = add nuw nsw i32 %1804, 1056964608
  %1806 = bitcast i32 %1805 to float
  %1807 = fmul fast float %1806, 2.000000e+00
  %1808 = fadd fast float %1807, -1.000000e+00
  %1809 = call float @dx.op.binary.f32(i32 36, float %1808, float %1806)  ; FMin(a,b)
  %1810 = fsub fast float -0.000000e+00, %1809
  %1811 = select i1 %1800, float %1810, float %1809
  %1812 = icmp ult i32 %1799, 524288
  %1813 = sext i1 %1812 to i32
  %1814 = xor i32 %1813, %1799
  %1815 = shl i32 %1814, 9
  %1816 = and i32 %1815, 268434944
  %1817 = add nuw nsw i32 %1816, 1056964608
  %1818 = bitcast i32 %1817 to float
  %1819 = fmul float %1818, 2.000000e+00
  %1820 = fadd float %1819, -1.000000e+00
  %1821 = call float @dx.op.binary.f32(i32 36, float %1820, float %1818), !dx.precise !37  ; FMin(a,b)
  %1822 = fsub float -0.000000e+00, %1821
  %1823 = select i1 %1812, float %1822, float %1821
  br label %1824

; <label>:1824                                    ; preds = %1793, %1791
  %1825 = phi float [ 0.000000e+00, %1791 ], [ %1811, %1793 ]
  %1826 = phi float [ 0.000000e+00, %1791 ], [ %1823, %1793 ]
  %1827 = fmul fast float %1622, %223
  %1828 = call float @dx.op.tertiary.f32(i32 46, float %1623, float %227, float %1827)  ; FMad(a,b,c)
  %1829 = call float @dx.op.tertiary.f32(i32 46, float %1624, float %231, float %1828)  ; FMad(a,b,c)
  %1830 = fmul fast float %1622, %224
  %1831 = call float @dx.op.tertiary.f32(i32 46, float %1623, float %228, float %1830)  ; FMad(a,b,c)
  %1832 = call float @dx.op.tertiary.f32(i32 46, float %1624, float %232, float %1831)  ; FMad(a,b,c)
  %1833 = fmul fast float %1622, %225
  %1834 = call float @dx.op.tertiary.f32(i32 46, float %1623, float %229, float %1833)  ; FMad(a,b,c)
  %1835 = call float @dx.op.tertiary.f32(i32 46, float %1624, float %233, float %1834)  ; FMad(a,b,c)
  %1836 = fmul fast float %1829, %429
  %1837 = call float @dx.op.tertiary.f32(i32 46, float %1832, float %434, float %1836)  ; FMad(a,b,c)
  %1838 = call float @dx.op.tertiary.f32(i32 46, float %1835, float %439, float %1837)  ; FMad(a,b,c)
  %1839 = fmul fast float %1829, %430
  %1840 = call float @dx.op.tertiary.f32(i32 46, float %1832, float %435, float %1839)  ; FMad(a,b,c)
  %1841 = call float @dx.op.tertiary.f32(i32 46, float %1835, float %440, float %1840)  ; FMad(a,b,c)
  %1842 = fmul fast float %1829, %431
  %1843 = call float @dx.op.tertiary.f32(i32 46, float %1832, float %436, float %1842)  ; FMad(a,b,c)
  %1844 = call float @dx.op.tertiary.f32(i32 46, float %1835, float %441, float %1843)  ; FMad(a,b,c)
  %1845 = fmul fast float %1829, %432
  %1846 = call float @dx.op.tertiary.f32(i32 46, float %1832, float %437, float %1845)  ; FMad(a,b,c)
  %1847 = call float @dx.op.tertiary.f32(i32 46, float %1835, float %442, float %1846)  ; FMad(a,b,c)
  %1848 = lshr i32 %423, 15
  %1849 = lshr i32 %43, 3
  %1850 = and i32 %1849, 1
  %1851 = and i32 %1850, %1848
  %1852 = icmp eq i32 %1851, 0
  %1853 = fmul float %223, %1528
  %1854 = call float @dx.op.tertiary.f32(i32 46, float %1529, float %227, float %1853), !dx.precise !37  ; FMad(a,b,c)
  %1855 = call float @dx.op.tertiary.f32(i32 46, float %1530, float %231, float %1854), !dx.precise !37  ; FMad(a,b,c)
  %1856 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %532, float %1855), !dx.precise !37  ; FMad(a,b,c)
  %1857 = fmul float %224, %1528
  %1858 = call float @dx.op.tertiary.f32(i32 46, float %1529, float %228, float %1857), !dx.precise !37  ; FMad(a,b,c)
  %1859 = call float @dx.op.tertiary.f32(i32 46, float %1530, float %232, float %1858), !dx.precise !37  ; FMad(a,b,c)
  %1860 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %533, float %1859), !dx.precise !37  ; FMad(a,b,c)
  %1861 = fmul float %225, %1528
  %1862 = call float @dx.op.tertiary.f32(i32 46, float %1529, float %229, float %1861), !dx.precise !37  ; FMad(a,b,c)
  %1863 = call float @dx.op.tertiary.f32(i32 46, float %1530, float %233, float %1862), !dx.precise !37  ; FMad(a,b,c)
  %1864 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %534, float %1863), !dx.precise !37  ; FMad(a,b,c)
  br i1 %1852, label %2243, label %1865, !dx.controlflow.hints !46

; <label>:1865                                    ; preds = %1824
  %1866 = fmul fast float %1528, %409
  %1867 = call float @dx.op.tertiary.f32(i32 46, float %1529, float %412, float %1866)  ; FMad(a,b,c)
  %1868 = call float @dx.op.tertiary.f32(i32 46, float %1530, float %415, float %1867)  ; FMad(a,b,c)
  %1869 = fadd fast float %541, %1868
  %1870 = fmul fast float %1528, %410
  %1871 = call float @dx.op.tertiary.f32(i32 46, float %1529, float %413, float %1870)  ; FMad(a,b,c)
  %1872 = call float @dx.op.tertiary.f32(i32 46, float %1530, float %416, float %1871)  ; FMad(a,b,c)
  %1873 = fadd fast float %542, %1872
  %1874 = fmul fast float %1528, %411
  %1875 = call float @dx.op.tertiary.f32(i32 46, float %1529, float %414, float %1874)  ; FMad(a,b,c)
  %1876 = call float @dx.op.tertiary.f32(i32 46, float %1530, float %417, float %1875)  ; FMad(a,b,c)
  %1877 = fadd fast float %543, %1876
  %1878 = and i32 %423, 32768
  %1879 = icmp eq i32 %1878, 0
  br i1 %1879, label %2023, label %1880, !dx.controlflow.hints !47

; <label>:1880                                    ; preds = %1865
  %1881 = fsub float %1864, %513
  %1882 = fsub float %1860, %512
  %1883 = fsub float %1856, %511
  %1884 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %1885 = extractvalue %dx.types.CBufRet.f32 %1884, 2
  %1886 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1887 = extractvalue %dx.types.CBufRet.f32 %1886, 3
  %1888 = fmul float %1885, %1887
  %1889 = fmul float %1888, -5.000000e-01
  %1890 = fmul float %1889, 0.000000e+00
  %1891 = fmul float %1883, 9.765625e-04
  %1892 = fmul float %1882, 9.765625e-04
  %1893 = fmul float %1881, 9.765625e-04
  %1894 = fmul float %505, -9.765625e-04
  %1895 = fmul float %506, -9.765625e-04
  %1896 = fmul float %507, -9.765625e-04
  %1897 = fadd float %1891, %1890
  %1898 = fadd float %1892, %1889
  %1899 = fadd float %1893, %1890
  %1900 = fadd float %1897, 5.000000e-01
  %1901 = fadd float %1898, 5.000000e-01
  %1902 = fadd float %1899, 5.000000e-01
  %1903 = fmul float %1894, 2.097152e+06
  %1904 = fmul float %1895, 2.097152e+06
  %1905 = fmul float %1896, 2.097152e+06
  %1906 = call float @dx.op.unary.f32(i32 22, float %1903), !dx.precise !37  ; Frc(value)
  %1907 = call float @dx.op.unary.f32(i32 22, float %1904), !dx.precise !37  ; Frc(value)
  %1908 = call float @dx.op.unary.f32(i32 22, float %1905), !dx.precise !37  ; Frc(value)
  %1909 = fadd float %1906, %1900
  %1910 = fadd float %1907, %1901
  %1911 = fadd float %1908, %1902
  %1912 = call float @dx.op.unary.f32(i32 22, float %1909), !dx.precise !37  ; Frc(value)
  %1913 = call float @dx.op.unary.f32(i32 22, float %1910), !dx.precise !37  ; Frc(value)
  %1914 = call float @dx.op.unary.f32(i32 22, float %1911), !dx.precise !37  ; Frc(value)
  %1915 = fmul float %1912, 2.000000e+00
  %1916 = fmul float %1913, 2.000000e+00
  %1917 = fmul float %1914, 2.000000e+00
  %1918 = fadd float %1915, -1.000000e+00
  %1919 = fadd float %1916, -1.000000e+00
  %1920 = fadd float %1917, -1.000000e+00
  %1921 = call float @dx.op.unary.f32(i32 6, float %1918), !dx.precise !37  ; FAbs(value)
  %1922 = call float @dx.op.unary.f32(i32 6, float %1919), !dx.precise !37  ; FAbs(value)
  %1923 = call float @dx.op.unary.f32(i32 6, float %1920), !dx.precise !37  ; FAbs(value)
  %1924 = fmul float %1921, 2.000000e+00
  %1925 = fmul float %1922, 2.000000e+00
  %1926 = fmul float %1923, 2.000000e+00
  %1927 = fsub float 3.000000e+00, %1924
  %1928 = fsub float 3.000000e+00, %1925
  %1929 = fsub float 3.000000e+00, %1926
  %1930 = fmul float %1921, %1927
  %1931 = fmul float %1922, %1928
  %1932 = fmul float %1923, %1929
  %1933 = fmul float %1921, %1930
  %1934 = fmul float %1922, %1931
  %1935 = fmul float %1923, %1932
  %1936 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %1933, float %1934, float %1935), !dx.precise !37  ; Dot3(ax,ay,az,bx,by,bz)
  %1937 = fmul float %1883, 0x3F747AE140000000
  %1938 = fmul float %1882, 0x3F747AE140000000
  %1939 = fmul float %1881, 0x3F747AE140000000
  %1940 = fmul float %505, 0xBF747AE140000000
  %1941 = fmul float %506, 0xBF747AE140000000
  %1942 = fmul float %507, 0xBF747AE140000000
  %1943 = fadd float %1937, %1889
  %1944 = fadd float %1938, %1889
  %1945 = fadd float %1939, %1889
  %1946 = fadd float %1943, 5.000000e-01
  %1947 = fadd float %1944, 5.000000e-01
  %1948 = fadd float %1945, 5.000000e-01
  %1949 = fmul float %1940, 2.097152e+06
  %1950 = fmul float %1941, 2.097152e+06
  %1951 = fmul float %1942, 2.097152e+06
  %1952 = call float @dx.op.unary.f32(i32 22, float %1949), !dx.precise !37  ; Frc(value)
  %1953 = call float @dx.op.unary.f32(i32 22, float %1950), !dx.precise !37  ; Frc(value)
  %1954 = call float @dx.op.unary.f32(i32 22, float %1951), !dx.precise !37  ; Frc(value)
  %1955 = fadd float %1946, %1952
  %1956 = fadd float %1947, %1953
  %1957 = fadd float %1948, %1954
  %1958 = call float @dx.op.unary.f32(i32 22, float %1955), !dx.precise !37  ; Frc(value)
  %1959 = call float @dx.op.unary.f32(i32 22, float %1956), !dx.precise !37  ; Frc(value)
  %1960 = call float @dx.op.unary.f32(i32 22, float %1957), !dx.precise !37  ; Frc(value)
  %1961 = fmul float %1958, 2.000000e+00
  %1962 = fmul float %1959, 2.000000e+00
  %1963 = fmul float %1960, 2.000000e+00
  %1964 = fadd float %1961, -1.000000e+00
  %1965 = fadd float %1962, -1.000000e+00
  %1966 = fadd float %1963, -1.000000e+00
  %1967 = call float @dx.op.unary.f32(i32 6, float %1964), !dx.precise !37  ; FAbs(value)
  %1968 = call float @dx.op.unary.f32(i32 6, float %1965), !dx.precise !37  ; FAbs(value)
  %1969 = call float @dx.op.unary.f32(i32 6, float %1966), !dx.precise !37  ; FAbs(value)
  %1970 = fmul float %1967, 2.000000e+00
  %1971 = fmul float %1968, 2.000000e+00
  %1972 = fmul float %1969, 2.000000e+00
  %1973 = fsub float 3.000000e+00, %1970
  %1974 = fsub float 3.000000e+00, %1971
  %1975 = fsub float 3.000000e+00, %1972
  %1976 = fmul float %1967, %1973
  %1977 = fmul float %1968, %1974
  %1978 = fmul float %1969, %1975
  %1979 = fmul float %1967, %1976
  %1980 = fmul float %1968, %1977
  %1981 = fmul float %1969, %1978
  %1982 = fmul float %1979, %1979
  %1983 = fmul float %1980, %1980
  %1984 = fadd float %1982, %1983
  %1985 = fmul float %1981, %1981
  %1986 = fadd float %1984, %1985
  %1987 = call float @dx.op.unary.f32(i32 24, float %1986), !dx.precise !37  ; Sqrt(value)
  %1988 = fadd float %1936, %1987
  %1989 = fmul float %1988, 0x401921FB60000000
  %1990 = call float @dx.op.unary.f32(i32 13, float %1989), !dx.precise !37  ; Sin(value)
  %1991 = call float @dx.op.unary.f32(i32 12, float %1989), !dx.precise !37  ; Cos(value)
  %1992 = fmul float %1991, 0.000000e+00
  %1993 = fmul float %1991, 1.000000e+01
  %1994 = fmul float %1990, 0.000000e+00
  %1995 = fmul float %1990, 1.000000e+01
  %1996 = fadd float %1994, %1992
  %1997 = fsub float %1992, %1995
  %1998 = fadd float %1994, %1993
  %1999 = fadd float %1996, 0.000000e+00
  %2000 = fadd float %1997, 0.000000e+00
  %2001 = fadd float %1998, -1.000000e+01
  %2002 = fsub float 1.000000e+00, %1826
  %2003 = fmul float %2002, %1999
  %2004 = fmul float %2002, %2000
  %2005 = fmul float %2002, %2001
  %2006 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2007 = extractvalue %dx.types.CBufRet.f32 %2006, 0
  %2008 = fmul float %2007, %2003
  %2009 = fmul float %2007, %2004
  %2010 = fmul float %2007, %2005
  %2011 = fadd float %2008, 0.000000e+00
  %2012 = fadd float %2009, 0.000000e+00
  %2013 = fadd float %2010, 0.000000e+00
  %2014 = fcmp ugt float %426, 0.000000e+00
  br i1 %2014, label %2015, label %2023

; <label>:2015                                    ; preds = %1880
  %2016 = fsub float -0.000000e+00, %426
  %2017 = call float @dx.op.binary.f32(i32 35, float %2011, float %2016), !dx.precise !37  ; FMax(a,b)
  %2018 = call float @dx.op.binary.f32(i32 35, float %2012, float %2016), !dx.precise !37  ; FMax(a,b)
  %2019 = call float @dx.op.binary.f32(i32 35, float %2013, float %2016), !dx.precise !37  ; FMax(a,b)
  %2020 = call float @dx.op.binary.f32(i32 36, float %2017, float %426), !dx.precise !37  ; FMin(a,b)
  %2021 = call float @dx.op.binary.f32(i32 36, float %2018, float %426), !dx.precise !37  ; FMin(a,b)
  %2022 = call float @dx.op.binary.f32(i32 36, float %2019, float %426), !dx.precise !37  ; FMin(a,b)
  br label %2023

; <label>:2023                                    ; preds = %2015, %1880, %1865
  %2024 = phi float [ 0.000000e+00, %1865 ], [ %2020, %2015 ], [ %2011, %1880 ]
  %2025 = phi float [ 0.000000e+00, %1865 ], [ %2021, %2015 ], [ %2012, %1880 ]
  %2026 = phi float [ 0.000000e+00, %1865 ], [ %2022, %2015 ], [ %2013, %1880 ]
  %2027 = and i32 %423, 1073741824
  %2028 = icmp eq i32 %2027, 0
  br i1 %2028, label %2051, label %2029, !dx.controlflow.hints !48

; <label>:2029                                    ; preds = %2023
  %2030 = fadd float %1856, %2024
  %2031 = fadd float %1860, %2025
  %2032 = fadd float %1864, %2026
  %2033 = fmul float %479, %2030
  %2034 = call float @dx.op.tertiary.f32(i32 46, float %2031, float %483, float %2033), !dx.precise !37  ; FMad(a,b,c)
  %2035 = call float @dx.op.tertiary.f32(i32 46, float %2032, float %487, float %2034), !dx.precise !37  ; FMad(a,b,c)
  %2036 = fmul float %480, %2030
  %2037 = call float @dx.op.tertiary.f32(i32 46, float %2031, float %484, float %2036), !dx.precise !37  ; FMad(a,b,c)
  %2038 = call float @dx.op.tertiary.f32(i32 46, float %2032, float %488, float %2037), !dx.precise !37  ; FMad(a,b,c)
  %2039 = fmul float %481, %2030
  %2040 = call float @dx.op.tertiary.f32(i32 46, float %2031, float %485, float %2039), !dx.precise !37  ; FMad(a,b,c)
  %2041 = call float @dx.op.tertiary.f32(i32 46, float %2032, float %489, float %2040), !dx.precise !37  ; FMad(a,b,c)
  %2042 = fsub float %2035, %1856
  %2043 = fsub float %2038, %1860
  %2044 = fsub float %2041, %1864
  %2045 = fsub float %2042, %2024
  %2046 = fsub float %2043, %2025
  %2047 = fsub float %2044, %2026
  %2048 = fadd float %2024, %2045
  %2049 = fadd float %2025, %2046
  %2050 = fadd float %2026, %2047
  br label %2051

; <label>:2051                                    ; preds = %2029, %2023
  %2052 = phi float [ %2048, %2029 ], [ %2024, %2023 ]
  %2053 = phi float [ %2049, %2029 ], [ %2025, %2023 ]
  %2054 = phi float [ %2050, %2029 ], [ %2026, %2023 ]
  br i1 %1879, label %2177, label %2055, !dx.controlflow.hints !49

; <label>:2055                                    ; preds = %2051
  %2056 = fsub fast float 1.000000e+00, %1826
  %2057 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2058 = extractvalue %dx.types.CBufRet.f32 %2057, 2
  %2059 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2060 = extractvalue %dx.types.CBufRet.f32 %2059, 3
  %2061 = fmul fast float %2058, -5.000000e-01
  %2062 = fmul fast float %2061, %2060
  %2063 = fsub fast float %1869, %523
  %2064 = fsub fast float %1873, %524
  %2065 = fsub fast float %1877, %525
  %2066 = fmul fast float %2063, 9.765625e-04
  %2067 = fmul fast float %2064, 9.765625e-04
  %2068 = fmul fast float %2065, 9.765625e-04
  %2069 = fadd fast float %2066, 5.000000e-01
  %2070 = fadd fast float %2068, 5.000000e-01
  %2071 = fmul fast float %517, -2.048000e+03
  %2072 = fmul fast float %518, -2.048000e+03
  %2073 = fmul fast float %519, -2.048000e+03
  %2074 = call float @dx.op.unary.f32(i32 22, float %2071)  ; Frc(value)
  %2075 = call float @dx.op.unary.f32(i32 22, float %2072)  ; Frc(value)
  %2076 = call float @dx.op.unary.f32(i32 22, float %2073)  ; Frc(value)
  %2077 = fadd fast float %2069, %2074
  %2078 = fadd fast float %2067, 5.000000e-01
  %2079 = fadd fast float %2078, %2075
  %2080 = fadd fast float %2079, %2062
  %2081 = fadd fast float %2070, %2076
  %2082 = call float @dx.op.unary.f32(i32 22, float %2077)  ; Frc(value)
  %2083 = call float @dx.op.unary.f32(i32 22, float %2080)  ; Frc(value)
  %2084 = call float @dx.op.unary.f32(i32 22, float %2081)  ; Frc(value)
  %2085 = fmul fast float %2082, 2.000000e+00
  %2086 = fmul fast float %2083, 2.000000e+00
  %2087 = fmul fast float %2084, 2.000000e+00
  %2088 = fadd fast float %2085, -1.000000e+00
  %2089 = fadd fast float %2086, -1.000000e+00
  %2090 = fadd fast float %2087, -1.000000e+00
  %2091 = call float @dx.op.unary.f32(i32 6, float %2088)  ; FAbs(value)
  %2092 = call float @dx.op.unary.f32(i32 6, float %2089)  ; FAbs(value)
  %2093 = call float @dx.op.unary.f32(i32 6, float %2090)  ; FAbs(value)
  %2094 = fmul fast float %2091, 2.000000e+00
  %2095 = fmul fast float %2092, 2.000000e+00
  %2096 = fmul fast float %2093, 2.000000e+00
  %2097 = fsub fast float 3.000000e+00, %2094
  %2098 = fsub fast float 3.000000e+00, %2095
  %2099 = fsub fast float 3.000000e+00, %2096
  %2100 = fmul fast float %2091, %2091
  %2101 = fmul fast float %2100, %2097
  %2102 = fmul fast float %2092, %2092
  %2103 = fmul fast float %2102, %2098
  %2104 = fmul fast float %2093, %2093
  %2105 = fmul fast float %2104, %2099
  %2106 = call float @dx.op.dot3.f32(i32 55, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float %2101, float %2103, float %2105)  ; Dot3(ax,ay,az,bx,by,bz)
  %2107 = fmul fast float %2063, 0x3F747AE140000000
  %2108 = fmul fast float %2064, 0x3F747AE140000000
  %2109 = fmul fast float %2065, 0x3F747AE140000000
  %2110 = fmul fast float %517, 0xC0C47AE140000000
  %2111 = fmul fast float %518, 0xC0C47AE140000000
  %2112 = fmul fast float %519, 0xC0C47AE140000000
  %2113 = call float @dx.op.unary.f32(i32 22, float %2110)  ; Frc(value)
  %2114 = call float @dx.op.unary.f32(i32 22, float %2111)  ; Frc(value)
  %2115 = call float @dx.op.unary.f32(i32 22, float %2112)  ; Frc(value)
  %2116 = fadd fast float %2107, 5.000000e-01
  %2117 = fadd fast float %2116, %2062
  %2118 = fadd fast float %2117, %2113
  %2119 = fadd fast float %2108, 5.000000e-01
  %2120 = fadd fast float %2119, %2062
  %2121 = fadd fast float %2120, %2114
  %2122 = fadd fast float %2109, 5.000000e-01
  %2123 = fadd fast float %2122, %2062
  %2124 = fadd fast float %2123, %2115
  %2125 = call float @dx.op.unary.f32(i32 22, float %2118)  ; Frc(value)
  %2126 = call float @dx.op.unary.f32(i32 22, float %2121)  ; Frc(value)
  %2127 = call float @dx.op.unary.f32(i32 22, float %2124)  ; Frc(value)
  %2128 = fmul fast float %2125, 2.000000e+00
  %2129 = fmul fast float %2126, 2.000000e+00
  %2130 = fmul fast float %2127, 2.000000e+00
  %2131 = fadd fast float %2128, -1.000000e+00
  %2132 = fadd fast float %2129, -1.000000e+00
  %2133 = fadd fast float %2130, -1.000000e+00
  %2134 = call float @dx.op.unary.f32(i32 6, float %2131)  ; FAbs(value)
  %2135 = call float @dx.op.unary.f32(i32 6, float %2132)  ; FAbs(value)
  %2136 = call float @dx.op.unary.f32(i32 6, float %2133)  ; FAbs(value)
  %2137 = fmul fast float %2134, 2.000000e+00
  %2138 = fmul fast float %2135, 2.000000e+00
  %2139 = fmul fast float %2136, 2.000000e+00
  %2140 = fsub fast float 3.000000e+00, %2137
  %2141 = fsub fast float 3.000000e+00, %2138
  %2142 = fsub fast float 3.000000e+00, %2139
  %2143 = fmul fast float %2134, %2134
  %2144 = fmul fast float %2143, %2140
  %2145 = fmul fast float %2135, %2135
  %2146 = fmul fast float %2145, %2141
  %2147 = fmul fast float %2136, %2136
  %2148 = fmul fast float %2147, %2142
  %2149 = fmul fast float %2144, %2144
  %2150 = fmul fast float %2146, %2146
  %2151 = fadd fast float %2150, %2149
  %2152 = fmul fast float %2148, %2148
  %2153 = fadd fast float %2151, %2152
  %2154 = call float @dx.op.unary.f32(i32 24, float %2153)  ; Sqrt(value)
  %2155 = fadd fast float %2154, %2106
  %2156 = fmul fast float %2155, 0x401921FB60000000
  %2157 = call float @dx.op.unary.f32(i32 13, float %2156)  ; Sin(value)
  %2158 = call float @dx.op.unary.f32(i32 12, float %2156)  ; Cos(value)
  %2159 = fmul fast float %2158, 1.000000e+01
  %2160 = fadd fast float %2159, -1.000000e+01
  %2161 = fmul fast float %2160, %2056
  %2162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2163 = extractvalue %dx.types.CBufRet.f32 %2162, 0
  %2164 = fmul fast float %2056, -1.000000e+01
  %2165 = fmul fast float %2164, %2157
  %2166 = fmul fast float %2165, %2163
  %2167 = fmul fast float %2161, %2163
  %2168 = fcmp fast ugt float %426, 0.000000e+00
  br i1 %2168, label %2169, label %2177

; <label>:2169                                    ; preds = %2055
  %2170 = fsub fast float -0.000000e+00, %426
  %2171 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2170)  ; FMax(a,b)
  %2172 = call float @dx.op.binary.f32(i32 35, float %2166, float %2170)  ; FMax(a,b)
  %2173 = call float @dx.op.binary.f32(i32 35, float %2167, float %2170)  ; FMax(a,b)
  %2174 = call float @dx.op.binary.f32(i32 36, float %2171, float %426)  ; FMin(a,b)
  %2175 = call float @dx.op.binary.f32(i32 36, float %2172, float %426)  ; FMin(a,b)
  %2176 = call float @dx.op.binary.f32(i32 36, float %2173, float %426)  ; FMin(a,b)
  br label %2177

; <label>:2177                                    ; preds = %2169, %2055, %2051
  %2178 = phi float [ 0.000000e+00, %2051 ], [ %2174, %2169 ], [ 0.000000e+00, %2055 ]
  %2179 = phi float [ 0.000000e+00, %2051 ], [ %2175, %2169 ], [ %2166, %2055 ]
  %2180 = phi float [ 0.000000e+00, %2051 ], [ %2176, %2169 ], [ %2167, %2055 ]
  br i1 %2028, label %2197, label %2181, !dx.controlflow.hints !50

; <label>:2181                                    ; preds = %2177
  %2182 = fadd fast float %2178, %1869
  %2183 = fadd fast float %2179, %1873
  %2184 = fadd fast float %2180, %1877
  %2185 = fmul fast float %2182, %491
  %2186 = call float @dx.op.tertiary.f32(i32 46, float %2183, float %495, float %2185)  ; FMad(a,b,c)
  %2187 = call float @dx.op.tertiary.f32(i32 46, float %2184, float %499, float %2186)  ; FMad(a,b,c)
  %2188 = fmul fast float %2182, %492
  %2189 = call float @dx.op.tertiary.f32(i32 46, float %2183, float %496, float %2188)  ; FMad(a,b,c)
  %2190 = call float @dx.op.tertiary.f32(i32 46, float %2184, float %500, float %2189)  ; FMad(a,b,c)
  %2191 = fmul fast float %2182, %493
  %2192 = call float @dx.op.tertiary.f32(i32 46, float %2183, float %497, float %2191)  ; FMad(a,b,c)
  %2193 = call float @dx.op.tertiary.f32(i32 46, float %2184, float %501, float %2192)  ; FMad(a,b,c)
  %2194 = fsub fast float %2187, %1869
  %2195 = fsub fast float %2190, %1873
  %2196 = fsub fast float %2193, %1877
  br label %2197

; <label>:2197                                    ; preds = %2181, %2177
  %2198 = phi float [ %2194, %2181 ], [ %2178, %2177 ]
  %2199 = phi float [ %2195, %2181 ], [ %2179, %2177 ]
  %2200 = phi float [ %2196, %2181 ], [ %2180, %2177 ]
  %2201 = fmul fast float %244, %2052
  %2202 = call float @dx.op.tertiary.f32(i32 46, float %2053, float %245, float %2201)  ; FMad(a,b,c)
  %2203 = call float @dx.op.tertiary.f32(i32 46, float %2054, float %246, float %2202)  ; FMad(a,b,c)
  %2204 = fmul fast float %248, %2052
  %2205 = call float @dx.op.tertiary.f32(i32 46, float %2053, float %249, float %2204)  ; FMad(a,b,c)
  %2206 = call float @dx.op.tertiary.f32(i32 46, float %2054, float %250, float %2205)  ; FMad(a,b,c)
  %2207 = fmul fast float %252, %2052
  %2208 = call float @dx.op.tertiary.f32(i32 46, float %2053, float %253, float %2207)  ; FMad(a,b,c)
  %2209 = call float @dx.op.tertiary.f32(i32 46, float %2054, float %254, float %2208)  ; FMad(a,b,c)
  %2210 = fmul fast float %596, %2198
  %2211 = call float @dx.op.tertiary.f32(i32 46, float %2199, float %597, float %2210)  ; FMad(a,b,c)
  %2212 = call float @dx.op.tertiary.f32(i32 46, float %2200, float %598, float %2211)  ; FMad(a,b,c)
  %2213 = fmul fast float %599, %2198
  %2214 = call float @dx.op.tertiary.f32(i32 46, float %2199, float %600, float %2213)  ; FMad(a,b,c)
  %2215 = call float @dx.op.tertiary.f32(i32 46, float %2200, float %601, float %2214)  ; FMad(a,b,c)
  %2216 = fmul fast float %602, %2198
  %2217 = call float @dx.op.tertiary.f32(i32 46, float %2199, float %603, float %2216)  ; FMad(a,b,c)
  %2218 = call float @dx.op.tertiary.f32(i32 46, float %2200, float %604, float %2217)  ; FMad(a,b,c)
  %2219 = fadd fast float %2203, %1528
  %2220 = fadd fast float %2206, %1529
  %2221 = fadd fast float %2209, %1530
  %2222 = fadd fast float %2212, %1528
  %2223 = fadd fast float %2215, %1529
  %2224 = fadd fast float %2218, %1530
  %2225 = fadd float %1856, %2052
  %2226 = fadd float %1860, %2053
  %2227 = fadd float %1864, %2054
  %2228 = fmul float %429, %2225
  %2229 = call float @dx.op.tertiary.f32(i32 46, float %2226, float %434, float %2228), !dx.precise !37  ; FMad(a,b,c)
  %2230 = call float @dx.op.tertiary.f32(i32 46, float %2227, float %439, float %2229), !dx.precise !37  ; FMad(a,b,c)
  %2231 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %444, float %2230), !dx.precise !37  ; FMad(a,b,c)
  %2232 = fmul float %430, %2225
  %2233 = call float @dx.op.tertiary.f32(i32 46, float %2226, float %435, float %2232), !dx.precise !37  ; FMad(a,b,c)
  %2234 = call float @dx.op.tertiary.f32(i32 46, float %2227, float %440, float %2233), !dx.precise !37  ; FMad(a,b,c)
  %2235 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %445, float %2234), !dx.precise !37  ; FMad(a,b,c)
  %2236 = fmul float %431, %2225
  %2237 = call float @dx.op.tertiary.f32(i32 46, float %2226, float %436, float %2236), !dx.precise !37  ; FMad(a,b,c)
  %2238 = call float @dx.op.tertiary.f32(i32 46, float %2227, float %441, float %2237), !dx.precise !37  ; FMad(a,b,c)
  %2239 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %446, float %2238), !dx.precise !37  ; FMad(a,b,c)
  %2240 = fmul float %432, %2225
  %2241 = call float @dx.op.tertiary.f32(i32 46, float %2226, float %437, float %2240), !dx.precise !37  ; FMad(a,b,c)
  %2242 = call float @dx.op.tertiary.f32(i32 46, float %2227, float %442, float %2241), !dx.precise !37  ; FMad(a,b,c)
  br label %2259

; <label>:2243                                    ; preds = %1824
  %2244 = fmul float %429, %1856
  %2245 = call float @dx.op.tertiary.f32(i32 46, float %1860, float %434, float %2244), !dx.precise !37  ; FMad(a,b,c)
  %2246 = call float @dx.op.tertiary.f32(i32 46, float %1864, float %439, float %2245), !dx.precise !37  ; FMad(a,b,c)
  %2247 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %444, float %2246), !dx.precise !37  ; FMad(a,b,c)
  %2248 = fmul float %430, %1856
  %2249 = call float @dx.op.tertiary.f32(i32 46, float %1860, float %435, float %2248), !dx.precise !37  ; FMad(a,b,c)
  %2250 = call float @dx.op.tertiary.f32(i32 46, float %1864, float %440, float %2249), !dx.precise !37  ; FMad(a,b,c)
  %2251 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %445, float %2250), !dx.precise !37  ; FMad(a,b,c)
  %2252 = fmul float %431, %1856
  %2253 = call float @dx.op.tertiary.f32(i32 46, float %1860, float %436, float %2252), !dx.precise !37  ; FMad(a,b,c)
  %2254 = call float @dx.op.tertiary.f32(i32 46, float %1864, float %441, float %2253), !dx.precise !37  ; FMad(a,b,c)
  %2255 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %446, float %2254), !dx.precise !37  ; FMad(a,b,c)
  %2256 = fmul float %432, %1856
  %2257 = call float @dx.op.tertiary.f32(i32 46, float %1860, float %437, float %2256), !dx.precise !37  ; FMad(a,b,c)
  %2258 = call float @dx.op.tertiary.f32(i32 46, float %1864, float %442, float %2257), !dx.precise !37  ; FMad(a,b,c)
  br label %2259

; <label>:2259                                    ; preds = %2243, %2197
  %2260 = phi float [ %2242, %2197 ], [ %2258, %2243 ]
  %2261 = phi float [ %2219, %2197 ], [ %1528, %2243 ]
  %2262 = phi float [ %2220, %2197 ], [ %1529, %2243 ]
  %2263 = phi float [ %2221, %2197 ], [ %1530, %2243 ]
  %2264 = phi float [ %2222, %2197 ], [ %1528, %2243 ]
  %2265 = phi float [ %2223, %2197 ], [ %1529, %2243 ]
  %2266 = phi float [ %2224, %2197 ], [ %1530, %2243 ]
  %2267 = phi float [ %2225, %2197 ], [ %1856, %2243 ]
  %2268 = phi float [ %2226, %2197 ], [ %1860, %2243 ]
  %2269 = phi float [ %2227, %2197 ], [ %1864, %2243 ]
  %2270 = phi float [ %2231, %2197 ], [ %2247, %2243 ]
  %2271 = phi float [ %2235, %2197 ], [ %2251, %2243 ]
  %2272 = phi float [ %2239, %2197 ], [ %2255, %2243 ]
  %2273 = call float @dx.op.tertiary.f32(i32 46, float 1.000000e+00, float %447, float %2260), !dx.precise !37  ; FMad(a,b,c)
  %2274 = fdiv float %2270, %2273
  %2275 = fdiv float %2271, %2273
  %2276 = fdiv float %2272, %2273
  %2277 = fdiv float 1.000000e+00, %2273
  %2278 = fmul float %676, %2274
  %2279 = fmul float %677, %2275
  %2280 = fadd float %680, %2278
  %2281 = fadd float %681, %2279
  %2282 = call float @dx.op.unary.f32(i32 27, float %2280), !dx.precise !37  ; Round_ni(value)
  %2283 = call float @dx.op.unary.f32(i32 27, float %2281), !dx.precise !37  ; Round_ni(value)
  br label %2284

; <label>:2284                                    ; preds = %2259, %1345
  %2285 = phi float [ %1622, %2259 ], [ %1384, %1345 ]
  %2286 = phi float [ %1623, %2259 ], [ %1385, %1345 ]
  %2287 = phi float [ %1624, %2259 ], [ %1386, %1345 ]
  %2288 = phi float [ %1694, %2259 ], [ %1387, %1345 ]
  %2289 = phi float [ %1695, %2259 ], [ %1388, %1345 ]
  %2290 = phi float [ %1696, %2259 ], [ %1389, %1345 ]
  %2291 = phi float [ %1697, %2259 ], [ %1390, %1345 ]
  %2292 = phi float [ %1825, %2259 ], [ %1391, %1345 ]
  %2293 = phi float [ %1826, %2259 ], [ %1392, %1345 ]
  %2294 = phi float [ %1694, %2259 ], [ %1393, %1345 ]
  %2295 = phi float [ %1695, %2259 ], [ %1394, %1345 ]
  %2296 = phi float [ %1696, %2259 ], [ %1395, %1345 ]
  %2297 = phi float [ %1697, %2259 ], [ %1396, %1345 ]
  %2298 = phi float [ %1622, %2259 ], [ %1397, %1345 ]
  %2299 = phi float [ %1623, %2259 ], [ %1398, %1345 ]
  %2300 = phi float [ %1624, %2259 ], [ %1399, %1345 ]
  %2301 = phi float [ %1746, %2259 ], [ %1400, %1345 ]
  %2302 = phi float [ %1747, %2259 ], [ %1401, %1345 ]
  %2303 = phi float [ %1748, %2259 ], [ %1402, %1345 ]
  %2304 = phi float [ %1749, %2259 ], [ %1403, %1345 ]
  %2305 = phi i32 [ %1457, %2259 ], [ %1410, %1345 ]
  %2306 = phi float [ %1528, %2259 ], [ %1411, %1345 ]
  %2307 = phi float [ %1529, %2259 ], [ %1412, %1345 ]
  %2308 = phi float [ %1530, %2259 ], [ %1413, %1345 ]
  %2309 = phi float [ %2261, %2259 ], [ %1414, %1345 ]
  %2310 = phi float [ %2262, %2259 ], [ %1415, %1345 ]
  %2311 = phi float [ %2263, %2259 ], [ %1416, %1345 ]
  %2312 = phi float [ %2264, %2259 ], [ %1417, %1345 ]
  %2313 = phi float [ %2265, %2259 ], [ %1418, %1345 ]
  %2314 = phi float [ %2266, %2259 ], [ %1419, %1345 ]
  %2315 = phi float [ %2267, %2259 ], [ %1420, %1345 ]
  %2316 = phi float [ %2268, %2259 ], [ %1421, %1345 ]
  %2317 = phi float [ %2269, %2259 ], [ %1422, %1345 ]
  %2318 = phi float [ %1856, %2259 ], [ %1423, %1345 ]
  %2319 = phi float [ %1860, %2259 ], [ %1424, %1345 ]
  %2320 = phi float [ %1864, %2259 ], [ %1425, %1345 ]
  %2321 = phi float [ %2270, %2259 ], [ %1426, %1345 ]
  %2322 = phi float [ %2271, %2259 ], [ %1427, %1345 ]
  %2323 = phi float [ %2272, %2259 ], [ %1428, %1345 ]
  %2324 = phi float [ %2273, %2259 ], [ %1429, %1345 ]
  %2325 = phi float [ %1838, %2259 ], [ %1430, %1345 ]
  %2326 = phi float [ %1841, %2259 ], [ %1431, %1345 ]
  %2327 = phi float [ %1844, %2259 ], [ %1432, %1345 ]
  %2328 = phi float [ %1847, %2259 ], [ %1433, %1345 ]
  %2329 = phi float [ %2282, %2259 ], [ %1434, %1345 ]
  %2330 = phi float [ %2283, %2259 ], [ %1435, %1345 ]
  %2331 = phi float [ %2276, %2259 ], [ %1436, %1345 ]
  %2332 = phi float [ %2277, %2259 ], [ %1437, %1345 ]
  %2333 = phi float [ %1826, %2259 ], [ %1454, %1345 ]
  %2334 = phi float [ %1825, %2259 ], [ %1455, %1345 ]
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %2335 = and i32 %1457, 63
  %2336 = mul i32 %2335, 4
  %2337 = add i32 0, %2336
  %2338 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %2337
  store float %2329, float addrspace(3)* %2338, align 4
  %2339 = mul i32 %2335, 4
  %2340 = add i32 1, %2339
  %2341 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %2340
  store float %2330, float addrspace(3)* %2341, align 4
  %2342 = mul i32 %2335, 4
  %2343 = add i32 2, %2342
  %2344 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %2343
  store float %2331, float addrspace(3)* %2344, align 4
  %2345 = mul i32 %2335, 4
  %2346 = add i32 3, %2345
  %2347 = getelementptr [256 x float], [256 x float] addrspace(3)* @"\01?VertexCache_PointSubpixelClip@@3PAV?$vector@M$03@@A.v.1dim", i32 0, i32 %2346
  store float %2332, float addrspace(3)* %2347, align 4
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %2348 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %2305, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2349 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2294, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2350 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2295, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2351 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2296, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2352 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2297, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2353 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2298, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2354 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2299, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2355 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2300, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2356 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2301, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2357 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2302, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2358 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2303, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2359 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2304, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2360 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2292, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2361 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2293, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2362 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2363 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2364 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2365 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2366 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2367 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2368 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2306, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2369 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2307, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2370 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2308, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2371 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2309, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2372 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2310, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2373 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2311, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2374 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2312, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2375 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2313, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2376 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2314, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2377 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2315, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2378 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2316, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2379 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2317, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2380 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2318, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2381 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2319, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2382 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2320, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2383 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2321, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2384 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2322, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2385 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2323, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2386 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2324, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2387 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2388 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2288, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2389 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2289, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2390 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2290, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2391 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2291, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2392 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2285, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2393 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2286, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2394 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2287, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2395 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2325, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2396 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2326, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2397 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2327, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2398 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2328, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2399 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2334, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2400 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2333, i32 %954)  ; WaveReadLaneAt(value,lane)
  %2401 = icmp ult i32 %953, %1456
  br i1 %2401, label %2407, label %2402

; <label>:2402                                    ; preds = %2284
  %2403 = load float, float addrspace(3)* %1081, align 4
  %2404 = load float, float addrspace(3)* %1077, align 4
  %2405 = load float, float addrspace(3)* %1073, align 4
  %2406 = load float, float addrspace(3)* %1069, align 4
  br label %2407

; <label>:2407                                    ; preds = %2402, %2284
  %2408 = phi float [ %1348, %2284 ], [ %2399, %2402 ]
  %2409 = phi float [ %1351, %2284 ], [ %2400, %2402 ]
  %2410 = phi float [ %1354, %2284 ], [ %2406, %2402 ]
  %2411 = phi float [ %1357, %2284 ], [ %2405, %2402 ]
  %2412 = phi float [ %1360, %2284 ], [ %2404, %2402 ]
  %2413 = phi float [ %1363, %2284 ], [ %2403, %2402 ]
  %2414 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %2305, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2415 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2294, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2416 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2295, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2417 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2296, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2418 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2297, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2419 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2298, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2420 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2299, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2421 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2300, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2422 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2301, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2423 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2302, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2424 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2303, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2425 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2304, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2426 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2292, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2427 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2293, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2428 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2429 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2430 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2431 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2432 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2433 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2434 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2306, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2435 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2307, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2436 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2308, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2437 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2309, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2438 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2310, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2439 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2311, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2440 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2312, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2441 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2313, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2442 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2314, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2443 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2315, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2444 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2316, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2445 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2317, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2446 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2318, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2447 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2319, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2448 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2320, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2449 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2321, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2450 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2322, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2451 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2323, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2452 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2324, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2453 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2454 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2288, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2455 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2289, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2456 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2290, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2457 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2291, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2458 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2285, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2459 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2286, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2460 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2287, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2461 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2325, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2462 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2326, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2463 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2327, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2464 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2328, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2465 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2334, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2466 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2333, i32 %1083)  ; WaveReadLaneAt(value,lane)
  %2467 = icmp ult i32 %952, %1456
  br i1 %2467, label %2473, label %2468

; <label>:2468                                    ; preds = %2407
  %2469 = load float, float addrspace(3)* %1210, align 4
  %2470 = load float, float addrspace(3)* %1206, align 4
  %2471 = load float, float addrspace(3)* %1202, align 4
  %2472 = load float, float addrspace(3)* %1198, align 4
  br label %2473

; <label>:2473                                    ; preds = %2468, %2407
  %2474 = phi float [ %1347, %2407 ], [ %2465, %2468 ]
  %2475 = phi float [ %1350, %2407 ], [ %2466, %2468 ]
  %2476 = phi float [ %1353, %2407 ], [ %2472, %2468 ]
  %2477 = phi float [ %1356, %2407 ], [ %2471, %2468 ]
  %2478 = phi float [ %1359, %2407 ], [ %2470, %2468 ]
  %2479 = phi float [ %1362, %2407 ], [ %2469, %2468 ]
  %2480 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %2305, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2481 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2294, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2482 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2295, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2483 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2296, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2484 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2297, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2485 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2298, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2486 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2299, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2487 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2300, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2488 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2301, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2489 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2302, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2490 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2303, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2491 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2304, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2492 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2292, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2493 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2293, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2494 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2495 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2496 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2497 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2498 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2499 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2500 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2306, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2501 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2307, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2502 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2308, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2503 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2309, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2504 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2310, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2505 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2311, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2506 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2312, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2507 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2313, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2508 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2314, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2509 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2315, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2510 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2316, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2511 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2317, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2512 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2318, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2513 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2319, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2514 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2320, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2515 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2321, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2516 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2322, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2517 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2323, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2518 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2324, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2519 = call float @dx.op.waveReadLaneAt.f32(i32 117, float 0.000000e+00, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2520 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2288, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2521 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2289, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2522 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2290, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2523 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2291, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2524 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2285, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2525 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2286, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2526 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2287, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2527 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2325, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2528 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2326, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2529 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2327, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2530 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2328, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2531 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2334, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2532 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %2333, i32 %1212)  ; WaveReadLaneAt(value,lane)
  %2533 = icmp ult i32 %951, %1456
  br i1 %2533, label %2539, label %2534

; <label>:2534                                    ; preds = %2473
  %2535 = load float, float addrspace(3)* %1339, align 4
  %2536 = load float, float addrspace(3)* %1335, align 4
  %2537 = load float, float addrspace(3)* %1331, align 4
  %2538 = load float, float addrspace(3)* %1327, align 4
  br label %2539

; <label>:2539                                    ; preds = %2534, %2473
  %2540 = phi float [ %1346, %2473 ], [ %2531, %2534 ]
  %2541 = phi float [ %1349, %2473 ], [ %2532, %2534 ]
  %2542 = phi float [ %1352, %2473 ], [ %2538, %2534 ]
  %2543 = phi float [ %1355, %2473 ], [ %2537, %2534 ]
  %2544 = phi float [ %1358, %2473 ], [ %2536, %2534 ]
  %2545 = phi float [ %1361, %2473 ], [ %2535, %2534 ]
  %2546 = add i32 %1456, 32
  %2547 = icmp uge i32 %1341, %2546
  %2548 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %2547)  ; WaveAnyTrue(cond)
  br i1 %2548, label %1345, label %2549

; <label>:2549                                    ; preds = %2539
  br label %2550

; <label>:2550                                    ; preds = %2549, %950
  %2551 = phi float [ %774, %950 ], [ %1455, %2549 ]
  %2552 = phi float [ %775, %950 ], [ %1454, %2549 ]
  %2553 = phi float [ %1323, %950 ], [ %2540, %2549 ]
  %2554 = phi float [ %1194, %950 ], [ %2474, %2549 ]
  %2555 = phi float [ %1065, %950 ], [ %2408, %2549 ]
  %2556 = phi float [ %1322, %950 ], [ %2541, %2549 ]
  %2557 = phi float [ %1193, %950 ], [ %2475, %2549 ]
  %2558 = phi float [ %1064, %950 ], [ %2409, %2549 ]
  %2559 = phi float [ %1328, %950 ], [ %2542, %2549 ]
  %2560 = phi float [ %1199, %950 ], [ %2476, %2549 ]
  %2561 = phi float [ %1070, %950 ], [ %2410, %2549 ]
  %2562 = phi float [ %1332, %950 ], [ %2543, %2549 ]
  %2563 = phi float [ %1203, %950 ], [ %2477, %2549 ]
  %2564 = phi float [ %1074, %950 ], [ %2411, %2549 ]
  %2565 = phi float [ %1336, %950 ], [ %2544, %2549 ]
  %2566 = phi float [ %1207, %950 ], [ %2478, %2549 ]
  %2567 = phi float [ %1078, %950 ], [ %2412, %2549 ]
  %2568 = phi float [ %1340, %950 ], [ %2545, %2549 ]
  %2569 = phi float [ %1211, %950 ], [ %2479, %2549 ]
  %2570 = phi float [ %1082, %950 ], [ %2413, %2549 ]
  %2571 = phi float [ %776, %950 ], [ %1391, %2549 ]
  %2572 = phi float [ %777, %950 ], [ %1392, %2549 ]
  %2573 = phi float [ %778, %950 ], [ %1364, %2549 ]
  %2574 = phi float [ %779, %950 ], [ %2327, %2549 ]
  %2575 = phi float [ %780, %950 ], [ %1365, %2549 ]
  %2576 = phi float [ %781, %950 ], [ %2326, %2549 ]
  %2577 = phi float [ %782, %950 ], [ %1366, %2549 ]
  %2578 = phi float [ %783, %950 ], [ %2325, %2549 ]
  %2579 = phi float [ %784, %950 ], [ %2328, %2549 ]
  %2580 = phi float [ %785, %950 ], [ %1367, %2549 ]
  %2581 = phi float [ %786, %950 ], [ %2321, %2549 ]
  %2582 = phi float [ %787, %950 ], [ %1368, %2549 ]
  %2583 = phi float [ %788, %950 ], [ %2322, %2549 ]
  %2584 = phi float [ %789, %950 ], [ %1369, %2549 ]
  %2585 = phi float [ %790, %950 ], [ %2323, %2549 ]
  %2586 = phi float [ %791, %950 ], [ %1370, %2549 ]
  %2587 = phi float [ %792, %950 ], [ %2324, %2549 ]
  %2588 = phi float [ %793, %950 ], [ %1371, %2549 ]
  %2589 = phi float [ %794, %950 ], [ %1372, %2549 ]
  %2590 = phi float [ %795, %950 ], [ %2288, %2549 ]
  %2591 = phi float [ %796, %950 ], [ %1373, %2549 ]
  %2592 = phi float [ %797, %950 ], [ %2289, %2549 ]
  %2593 = phi float [ %798, %950 ], [ %1374, %2549 ]
  %2594 = phi float [ %799, %950 ], [ %2290, %2549 ]
  %2595 = phi float [ %800, %950 ], [ %1375, %2549 ]
  %2596 = phi float [ %801, %950 ], [ %2291, %2549 ]
  %2597 = phi float [ %802, %950 ], [ %1376, %2549 ]
  %2598 = phi float [ %803, %950 ], [ %2294, %2549 ]
  %2599 = phi float [ %804, %950 ], [ %1377, %2549 ]
  %2600 = phi float [ %805, %950 ], [ %2295, %2549 ]
  %2601 = phi float [ %806, %950 ], [ %1378, %2549 ]
  %2602 = phi float [ %807, %950 ], [ %2296, %2549 ]
  %2603 = phi float [ %808, %950 ], [ %1379, %2549 ]
  %2604 = phi float [ %809, %950 ], [ %2297, %2549 ]
  %2605 = phi float [ %810, %950 ], [ %1380, %2549 ]
  %2606 = phi float [ %811, %950 ], [ %2301, %2549 ]
  %2607 = phi float [ %812, %950 ], [ %1381, %2549 ]
  %2608 = phi float [ %813, %950 ], [ %2302, %2549 ]
  %2609 = phi float [ %814, %950 ], [ %1382, %2549 ]
  %2610 = phi float [ %815, %950 ], [ %2303, %2549 ]
  %2611 = phi float [ %816, %950 ], [ %1383, %2549 ]
  %2612 = phi float [ %817, %950 ], [ %2304, %2549 ]
  %2613 = phi float [ %818, %950 ], [ %2285, %2549 ]
  %2614 = phi float [ %819, %950 ], [ %2286, %2549 ]
  %2615 = phi float [ %820, %950 ], [ %2287, %2549 ]
  %2616 = phi float [ %821, %950 ], [ %2288, %2549 ]
  %2617 = phi float [ %822, %950 ], [ %2289, %2549 ]
  %2618 = phi float [ %823, %950 ], [ %2290, %2549 ]
  %2619 = phi float [ %824, %950 ], [ %2291, %2549 ]
  %2620 = phi float [ %825, %950 ], [ %2292, %2549 ]
  %2621 = phi float [ %826, %950 ], [ %2293, %2549 ]
  %2622 = phi float [ %827, %950 ], [ %2294, %2549 ]
  %2623 = phi float [ %828, %950 ], [ %2295, %2549 ]
  %2624 = phi float [ %829, %950 ], [ %2296, %2549 ]
  %2625 = phi float [ %830, %950 ], [ %2297, %2549 ]
  %2626 = phi float [ %831, %950 ], [ %2298, %2549 ]
  %2627 = phi float [ %832, %950 ], [ %2299, %2549 ]
  %2628 = phi float [ %833, %950 ], [ %2300, %2549 ]
  %2629 = phi float [ %834, %950 ], [ %2301, %2549 ]
  %2630 = phi float [ %835, %950 ], [ %2302, %2549 ]
  %2631 = phi float [ %836, %950 ], [ %2303, %2549 ]
  %2632 = phi float [ %837, %950 ], [ %2304, %2549 ]
  %2633 = phi float [ %838, %950 ], [ %2300, %2549 ]
  %2634 = phi float [ %839, %950 ], [ %1404, %2549 ]
  %2635 = phi float [ %840, %950 ], [ %2299, %2549 ]
  %2636 = phi float [ %841, %950 ], [ %1405, %2549 ]
  %2637 = phi float [ %842, %950 ], [ %2298, %2549 ]
  %2638 = phi float [ %843, %950 ], [ %1406, %2549 ]
  %2639 = phi float [ %844, %950 ], [ %2287, %2549 ]
  %2640 = phi float [ %845, %950 ], [ %1407, %2549 ]
  %2641 = phi float [ %846, %950 ], [ %2286, %2549 ]
  %2642 = phi float [ %847, %950 ], [ %1408, %2549 ]
  %2643 = phi float [ %848, %950 ], [ %2285, %2549 ]
  %2644 = phi float [ %849, %950 ], [ %1409, %2549 ]
  %2645 = phi i32 [ %850, %950 ], [ %2305, %2549 ]
  %2646 = phi float [ %851, %950 ], [ %2306, %2549 ]
  %2647 = phi float [ %852, %950 ], [ %2307, %2549 ]
  %2648 = phi float [ %853, %950 ], [ %2308, %2549 ]
  %2649 = phi float [ %854, %950 ], [ %2309, %2549 ]
  %2650 = phi float [ %855, %950 ], [ %2310, %2549 ]
  %2651 = phi float [ %856, %950 ], [ %2311, %2549 ]
  %2652 = phi float [ %857, %950 ], [ %2312, %2549 ]
  %2653 = phi float [ %858, %950 ], [ %2313, %2549 ]
  %2654 = phi float [ %859, %950 ], [ %2314, %2549 ]
  %2655 = phi float [ %860, %950 ], [ %2315, %2549 ]
  %2656 = phi float [ %861, %950 ], [ %2316, %2549 ]
  %2657 = phi float [ %862, %950 ], [ %2317, %2549 ]
  %2658 = phi float [ %863, %950 ], [ %2318, %2549 ]
  %2659 = phi float [ %864, %950 ], [ %2319, %2549 ]
  %2660 = phi float [ %865, %950 ], [ %2320, %2549 ]
  %2661 = phi float [ %866, %950 ], [ %2321, %2549 ]
  %2662 = phi float [ %867, %950 ], [ %2322, %2549 ]
  %2663 = phi float [ %868, %950 ], [ %2323, %2549 ]
  %2664 = phi float [ %869, %950 ], [ %2324, %2549 ]
  %2665 = phi float [ %870, %950 ], [ %2325, %2549 ]
  %2666 = phi float [ %871, %950 ], [ %2326, %2549 ]
  %2667 = phi float [ %872, %950 ], [ %2327, %2549 ]
  %2668 = phi float [ %873, %950 ], [ %2328, %2549 ]
  %2669 = phi float [ %874, %950 ], [ %2329, %2549 ]
  %2670 = phi float [ %875, %950 ], [ %2330, %2549 ]
  %2671 = phi float [ %876, %950 ], [ %2331, %2549 ]
  %2672 = phi float [ %877, %950 ], [ %2332, %2549 ]
  %2673 = phi float [ %878, %950 ], [ %1438, %2549 ]
  %2674 = phi float [ %879, %950 ], [ %2320, %2549 ]
  %2675 = phi float [ %880, %950 ], [ %1439, %2549 ]
  %2676 = phi float [ %881, %950 ], [ %2319, %2549 ]
  %2677 = phi float [ %882, %950 ], [ %1440, %2549 ]
  %2678 = phi float [ %883, %950 ], [ %2318, %2549 ]
  %2679 = phi float [ %884, %950 ], [ %1441, %2549 ]
  %2680 = phi float [ %885, %950 ], [ %2308, %2549 ]
  %2681 = phi float [ %886, %950 ], [ %1442, %2549 ]
  %2682 = phi float [ %887, %950 ], [ %2307, %2549 ]
  %2683 = phi float [ %888, %950 ], [ %1443, %2549 ]
  %2684 = phi float [ %889, %950 ], [ %2306, %2549 ]
  %2685 = phi float [ %890, %950 ], [ %1444, %2549 ]
  %2686 = phi float [ %891, %950 ], [ %2314, %2549 ]
  %2687 = phi float [ %892, %950 ], [ %1445, %2549 ]
  %2688 = phi float [ %893, %950 ], [ %2313, %2549 ]
  %2689 = phi float [ %894, %950 ], [ %1446, %2549 ]
  %2690 = phi float [ %895, %950 ], [ %2312, %2549 ]
  %2691 = phi float [ %896, %950 ], [ %1447, %2549 ]
  %2692 = phi float [ %897, %950 ], [ %2317, %2549 ]
  %2693 = phi float [ %898, %950 ], [ %1448, %2549 ]
  %2694 = phi float [ %899, %950 ], [ %2316, %2549 ]
  %2695 = phi float [ %900, %950 ], [ %1449, %2549 ]
  %2696 = phi float [ %901, %950 ], [ %2315, %2549 ]
  %2697 = phi float [ %902, %950 ], [ %1450, %2549 ]
  %2698 = phi float [ %903, %950 ], [ %2311, %2549 ]
  %2699 = phi float [ %904, %950 ], [ %1451, %2549 ]
  %2700 = phi float [ %905, %950 ], [ %2310, %2549 ]
  %2701 = phi float [ %906, %950 ], [ %1452, %2549 ]
  %2702 = phi float [ %907, %950 ], [ %2309, %2549 ]
  %2703 = phi i32 [ %908, %950 ], [ %1453, %2549 ]
  %2704 = phi i32 [ %909, %950 ], [ %2305, %2549 ]
  %2705 = phi float [ %910, %950 ], [ %2333, %2549 ]
  %2706 = phi float [ %911, %950 ], [ %2334, %2549 ]
  %2707 = phi i32 [ %912, %950 ], [ %2546, %2549 ]
  %2708 = fsub float %2561, %2560
  %2709 = fsub float %2564, %2563
  %2710 = fsub float %2560, %2559
  %2711 = fsub float %2563, %2562
  %2712 = fsub float %2559, %2561
  %2713 = fsub float %2562, %2564
  %2714 = fmul float %2712, %2709
  %2715 = fmul float %2708, %2713
  %2716 = fsub float %2714, %2715
  %2717 = fcmp ult float %2716, 0.000000e+00
  br i1 %2717, label %2725, label %2718, !dx.controlflow.hints !51

; <label>:2718                                    ; preds = %2550
  %2719 = fsub float -0.000000e+00, %2708
  %2720 = fsub float -0.000000e+00, %2709
  %2721 = fsub float -0.000000e+00, %2710
  %2722 = fsub float -0.000000e+00, %2711
  %2723 = fsub float -0.000000e+00, %2712
  %2724 = fsub float -0.000000e+00, %2713
  br label %2725

; <label>:2725                                    ; preds = %2718, %2550
  %2726 = phi float [ %2719, %2718 ], [ %2708, %2550 ]
  %2727 = phi float [ %2720, %2718 ], [ %2709, %2550 ]
  %2728 = phi float [ %2721, %2718 ], [ %2710, %2550 ]
  %2729 = phi float [ %2722, %2718 ], [ %2711, %2550 ]
  %2730 = phi float [ %2723, %2718 ], [ %2712, %2550 ]
  %2731 = phi float [ %2724, %2718 ], [ %2713, %2550 ]
  %2732 = call float @dx.op.binary.f32(i32 36, float %2560, float %2559), !dx.precise !37  ; FMin(a,b)
  %2733 = call float @dx.op.binary.f32(i32 36, float %2561, float %2732), !dx.precise !37  ; FMin(a,b)
  %2734 = call float @dx.op.binary.f32(i32 36, float %2563, float %2562), !dx.precise !37  ; FMin(a,b)
  %2735 = call float @dx.op.binary.f32(i32 36, float %2564, float %2734), !dx.precise !37  ; FMin(a,b)
  %2736 = call float @dx.op.binary.f32(i32 35, float %2560, float %2559), !dx.precise !37  ; FMax(a,b)
  %2737 = call float @dx.op.binary.f32(i32 35, float %2561, float %2736), !dx.precise !37  ; FMax(a,b)
  %2738 = call float @dx.op.binary.f32(i32 35, float %2563, float %2562), !dx.precise !37  ; FMax(a,b)
  %2739 = call float @dx.op.binary.f32(i32 35, float %2564, float %2738), !dx.precise !37  ; FMax(a,b)
  %2740 = fadd float %2733, 1.280000e+02
  %2741 = fadd float %2735, 1.280000e+02
  %2742 = fadd float %2740, -1.000000e+00
  %2743 = fadd float %2741, -1.000000e+00
  %2744 = fmul float %2742, 3.906250e-03
  %2745 = fmul float %2743, 3.906250e-03
  %2746 = call float @dx.op.unary.f32(i32 27, float %2744), !dx.precise !37  ; Round_ni(value)
  %2747 = call float @dx.op.unary.f32(i32 27, float %2745), !dx.precise !37  ; Round_ni(value)
  %2748 = fptosi float %2746 to i32
  %2749 = fptosi float %2747 to i32
  %2750 = fadd float %2737, -1.280000e+02
  %2751 = fadd float %2739, -1.280000e+02
  %2752 = fadd float %2750, -1.000000e+00
  %2753 = fadd float %2751, -1.000000e+00
  %2754 = fmul float %2752, 3.906250e-03
  %2755 = fmul float %2753, 3.906250e-03
  %2756 = call float @dx.op.unary.f32(i32 27, float %2754), !dx.precise !37  ; Round_ni(value)
  %2757 = call float @dx.op.unary.f32(i32 27, float %2755), !dx.precise !37  ; Round_ni(value)
  %2758 = fptosi float %2756 to i32
  %2759 = fptosi float %2757 to i32
  %2760 = call i32 @dx.op.binary.i32(i32 37, i32 %2748, i32 %664)  ; IMax(a,b)
  %2761 = call i32 @dx.op.binary.i32(i32 37, i32 %2749, i32 %665)  ; IMax(a,b)
  %2762 = or i32 %662, 127
  %2763 = or i32 %663, 127
  %2764 = call i32 @dx.op.binary.i32(i32 38, i32 %2758, i32 %2762)  ; IMin(a,b)
  %2765 = call i32 @dx.op.binary.i32(i32 38, i32 %2759, i32 %2763)  ; IMin(a,b)
  %2766 = add i32 %2760, 63
  %2767 = add i32 %2761, 63
  %2768 = call i32 @dx.op.binary.i32(i32 38, i32 %2764, i32 %2766)  ; IMin(a,b)
  %2769 = call i32 @dx.op.binary.i32(i32 38, i32 %2765, i32 %2767)  ; IMin(a,b)
  %2770 = sitofp i32 %2760 to float
  %2771 = sitofp i32 %2761 to float
  %2772 = fmul float %2770, 2.560000e+02
  %2773 = fmul float %2771, 2.560000e+02
  %2774 = fadd float %2772, 1.280000e+02
  %2775 = fadd float %2773, 1.280000e+02
  %2776 = fsub float %2561, %2774
  %2777 = fsub float %2564, %2775
  %2778 = fsub float %2560, %2774
  %2779 = fsub float %2563, %2775
  %2780 = fsub float %2559, %2774
  %2781 = fsub float %2562, %2775
  %2782 = fmul float %2729, %2778
  %2783 = fmul float %2728, %2779
  %2784 = fsub float %2782, %2783
  %2785 = fmul float %2731, %2780
  %2786 = fmul float %2730, %2781
  %2787 = fsub float %2785, %2786
  %2788 = fmul float %2727, %2776
  %2789 = fmul float %2726, %2777
  %2790 = fsub float %2788, %2789
  %2791 = fadd float %2784, %2787
  %2792 = fadd float %2790, %2791
  %2793 = fdiv float 2.560000e+02, %2792
  %2794 = fsub float 1.000000e+00, %2728
  %2795 = call float @dx.op.unary.f32(i32 7, float %2794), !dx.precise !37  ; Saturate(value)
  %2796 = fadd float %2729, %2795
  %2797 = call float @dx.op.unary.f32(i32 7, float %2796), !dx.precise !37  ; Saturate(value)
  %2798 = fsub float %2784, %2797
  %2799 = fsub float 1.000000e+00, %2730
  %2800 = call float @dx.op.unary.f32(i32 7, float %2799), !dx.precise !37  ; Saturate(value)
  %2801 = fadd float %2731, %2800
  %2802 = call float @dx.op.unary.f32(i32 7, float %2801), !dx.precise !37  ; Saturate(value)
  %2803 = fsub float %2787, %2802
  %2804 = fsub float 1.000000e+00, %2726
  %2805 = call float @dx.op.unary.f32(i32 7, float %2804), !dx.precise !37  ; Saturate(value)
  %2806 = fadd float %2727, %2805
  %2807 = call float @dx.op.unary.f32(i32 7, float %2806), !dx.precise !37  ; Saturate(value)
  %2808 = fsub float %2790, %2807
  %2809 = fmul float %2798, 3.906250e-03
  %2810 = fmul float %2803, 3.906250e-03
  %2811 = fmul float %2808, 3.906250e-03
  %2812 = fmul fast float %2729, %2793
  %2813 = fsub fast float -0.000000e+00, %2812
  %2814 = fmul fast float %2731, %2793
  %2815 = fsub fast float -0.000000e+00, %2814
  %2816 = fmul fast float %2727, %2793
  %2817 = fsub fast float -0.000000e+00, %2816
  %2818 = fmul fast float %2793, %2728
  %2819 = fmul fast float %2793, %2730
  %2820 = fmul fast float %2793, %2726
  %2821 = fsub float %2566, %2567
  %2822 = fsub float %2565, %2567
  %2823 = fmul float %2821, %2793
  %2824 = fmul float %2822, %2793
  %2825 = icmp sge i32 %2768, %2760
  %2826 = icmp sle i32 %2761, %2769
  %2827 = and i1 %2825, %2826
  %2828 = and i1 %915, %2827
  br i1 %2828, label %2829, label %3121

; <label>:2829                                    ; preds = %2725
  %2830 = fcmp olt float %2729, 0.000000e+00
  %2831 = fcmp olt float %2731, 0.000000e+00
  %2832 = fcmp olt float %2727, 0.000000e+00
  %2833 = fdiv float 1.000000e+00, %2729
  %2834 = fdiv float 1.000000e+00, %2731
  %2835 = fdiv float 1.000000e+00, %2727
  %2836 = fcmp oeq float %2729, 0.000000e+00
  %2837 = fcmp oeq float %2731, 0.000000e+00
  %2838 = fcmp oeq float %2727, 0.000000e+00
  %2839 = select i1 %2836, float 1.000000e+08, float %2833
  %2840 = select i1 %2837, float 1.000000e+08, float %2834
  %2841 = select i1 %2838, float 1.000000e+08, float %2835
  br i1 %613, label %2843, label %2842

; <label>:2842                                    ; preds = %2829
  br label %2844

; <label>:2843                                    ; preds = %2829
  br label %2992

; <label>:2844                                    ; preds = %2987, %2842
  %2845 = phi float [ %2988, %2987 ], [ %2809, %2842 ]
  %2846 = phi float [ %2989, %2987 ], [ %2810, %2842 ]
  %2847 = phi float [ %2990, %2987 ], [ %2811, %2842 ]
  %2848 = phi i32 [ %2991, %2987 ], [ %2761, %2842 ]
  %2849 = fmul float %2839, %2845
  %2850 = fmul float %2840, %2846
  %2851 = fmul float %2841, %2847
  %2852 = select i1 %2830, float %2849, float 0.000000e+00
  %2853 = select i1 %2831, float %2850, float 0.000000e+00
  %2854 = select i1 %2832, float %2851, float 0.000000e+00
  %2855 = fptosi float %2849 to i32
  %2856 = fptosi float %2850 to i32
  %2857 = fptosi float %2851 to i32
  %2858 = sub nsw i32 %2768, %2760
  %2859 = select i1 %2830, i32 %2858, i32 %2855
  %2860 = select i1 %2831, i32 %2858, i32 %2856
  %2861 = select i1 %2832, i32 %2858, i32 %2857
  %2862 = sitofp i32 %2859 to float
  %2863 = sitofp i32 %2860 to float
  %2864 = sitofp i32 %2861 to float
  %2865 = call float @dx.op.binary.f32(i32 35, float %2853, float %2854), !dx.precise !37  ; FMax(a,b)
  %2866 = call float @dx.op.binary.f32(i32 35, float %2852, float %2865), !dx.precise !37  ; FMax(a,b)
  %2867 = call float @dx.op.unary.f32(i32 28, float %2866), !dx.precise !37  ; Round_pi(value)
  %2868 = call float @dx.op.binary.f32(i32 36, float %2863, float %2864), !dx.precise !37  ; FMin(a,b)
  %2869 = call float @dx.op.binary.f32(i32 36, float %2862, float %2868), !dx.precise !37  ; FMin(a,b)
  %2870 = fadd float %2770, %2867
  %2871 = fadd float %2770, %2869
  %2872 = fcmp ugt float %2870, %2871
  br i1 %2872, label %2985, label %2873

; <label>:2873                                    ; preds = %2844
  %2874 = fmul float %2727, %2867
  %2875 = fsub float %2847, %2874
  %2876 = fmul float %2731, %2867
  %2877 = fsub float %2846, %2876
  %2878 = fmul float %2729, %2867
  %2879 = fsub float %2845, %2878
  br label %2880

; <label>:2880                                    ; preds = %2978, %2873
  %2881 = phi float [ %2979, %2978 ], [ %2879, %2873 ]
  %2882 = phi float [ %2980, %2978 ], [ %2877, %2873 ]
  %2883 = phi float [ %2981, %2978 ], [ %2875, %2873 ]
  %2884 = phi float [ %2982, %2978 ], [ %2870, %2873 ]
  %2885 = call float @dx.op.binary.f32(i32 36, float %2882, float %2883), !dx.precise !37  ; FMin(a,b)
  %2886 = call float @dx.op.binary.f32(i32 36, float %2881, float %2885), !dx.precise !37  ; FMin(a,b)
  %2887 = fcmp ult float %2886, 0.000000e+00
  br i1 %2887, label %2978, label %2888

; <label>:2888                                    ; preds = %2880
  %2889 = fptoui float %2884 to i32
  %2890 = fmul float %2823, %2882
  %2891 = fadd float %2567, %2890
  %2892 = fmul float %2824, %2883
  %2893 = fadd float %2891, %2892
  %2894 = lshr i32 %2889, 7
  %2895 = lshr i32 %2848, 7
  %2896 = shl nuw nsw i32 %2895, 3
  %2897 = add nuw nsw i32 %2894, %2896
  %2898 = getelementptr [64 x i32], [64 x i32] addrspace(3)* @"\01?GroupVsmPageTableCache@@3PAIA", i32 0, i32 %2897
  %2899 = load i32, i32 addrspace(3)* %2898, align 4, !tbaa !39, !noalias !52
  %2900 = and i32 %2899, 65535
  %2901 = icmp eq i32 %2900, 65535
  br i1 %2901, label %2910, label %2902

; <label>:2902                                    ; preds = %2888
  %2903 = lshr i32 %2899, 16
  %2904 = shl nuw nsw i32 %2900, 7
  %2905 = shl nuw nsw i32 %2903, 7
  %2906 = and i32 %2889, 127
  %2907 = and i32 %2848, 127
  %2908 = or i32 %2904, %2906
  %2909 = or i32 %2905, %2907
  br label %2910

; <label>:2910                                    ; preds = %2902, %2888
  %2911 = phi i32 [ %2908, %2902 ], [ %2889, %2888 ]
  %2912 = phi i32 [ %2909, %2902 ], [ %2848, %2888 ]
  %2913 = phi i1 [ true, %2902 ], [ false, %2888 ]
  br i1 %2913, label %2914, label %2978

; <label>:2914                                    ; preds = %2910
  %2915 = call float @dx.op.unary.f32(i32 7, float %2893), !dx.precise !37  ; Saturate(value)
  %2916 = bitcast float %2915 to i32
  %2917 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4103, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2DArray<U32>
  %2918 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2917, i32 undef, i32 %2911, i32 %2912, i32 %654, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2919 = extractvalue %dx.types.ResRet.i32 %2918, 0
  %2920 = icmp ult i32 %2919, %2916
  br i1 %2920, label %2921, label %2978, !dx.controlflow.hints !55

; <label>:2921                                    ; preds = %2914
  %2922 = fmul fast float %2881, %2570
  %2923 = fmul fast float %2882, %2569
  %2924 = fmul fast float %2883, %2568
  %2925 = fadd fast float %2923, %2922
  %2926 = fadd fast float %2925, %2924
  %2927 = fdiv fast float 1.000000e+00, %2926
  %2928 = fmul fast float %2927, %2922
  %2929 = fmul fast float %2927, %2923
  %2930 = fmul fast float %2927, %2924
  %2931 = fmul fast float %2928, %2555
  %2932 = fmul fast float %2928, %2558
  %2933 = fmul fast float %2929, %2554
  %2934 = fmul fast float %2929, %2557
  %2935 = fadd fast float %2931, %2933
  %2936 = fadd fast float %2932, %2934
  %2937 = fmul fast float %2930, %2553
  %2938 = fmul fast float %2930, %2556
  %2939 = fadd fast float %2935, %2937
  %2940 = fadd fast float %2936, %2938
  %2941 = fmul fast float %2555, %2813
  %2942 = fmul fast float %2558, %2813
  %2943 = fmul fast float %2554, %2815
  %2944 = fmul fast float %2557, %2815
  %2945 = fadd fast float %2941, %2943
  %2946 = fadd fast float %2942, %2944
  %2947 = fmul fast float %2553, %2817
  %2948 = fmul fast float %2556, %2817
  %2949 = fadd fast float %2945, %2947
  %2950 = fadd fast float %2946, %2948
  %2951 = fmul fast float %2818, %2555
  %2952 = fmul fast float %2818, %2558
  %2953 = fmul fast float %2819, %2554
  %2954 = fmul fast float %2819, %2557
  %2955 = fadd fast float %2951, %2953
  %2956 = fadd fast float %2952, %2954
  %2957 = fmul fast float %2820, %2553
  %2958 = fmul fast float %2820, %2556
  %2959 = fadd fast float %2955, %2957
  %2960 = fadd fast float %2956, %2958
  %2961 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 163)  ; CBufferLoadLegacy(handle,regIndex)
  %2962 = extractvalue %dx.types.CBufRet.f32 %2961, 1
  %2963 = call float @dx.op.unary.f32(i32 21, float %2962)  ; Exp(value)
  %2964 = fmul fast float %2963, %2959
  %2965 = fmul fast float %2963, %2960
  %2966 = fmul fast float %2963, %2949
  %2967 = fmul fast float %2963, %2950
  %2968 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2969 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2970 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2968, %dx.types.Handle %2969, float %2939, float %2940, float undef, float undef, i32 0, i32 0, i32 undef, float %2966, float %2967, float undef, float %2964, float %2965, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2971 = extractvalue %dx.types.ResRet.f32 %2970, 0
  %2972 = fadd fast float %2971, 0xBFD554C980000000
  %2973 = fcmp fast ult float %2972, 0.000000e+00
  br i1 %2973, label %2978, label %2974, !dx.controlflow.hints !56

; <label>:2974                                    ; preds = %2921
  %2975 = call float @dx.op.unary.f32(i32 7, float %2915)  ; Saturate(value)
  %2976 = bitcast float %2975 to i32
  %2977 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2917, i32 7, i32 %2911, i32 %2912, i32 %654, i32 %2976)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %2978

; <label>:2978                                    ; preds = %2974, %2921, %2914, %2910, %2880
  %2979 = fsub float %2881, %2729
  %2980 = fsub float %2882, %2731
  %2981 = fsub float %2883, %2727
  %2982 = fadd float %2884, 1.000000e+00
  %2983 = fcmp ugt float %2982, %2871
  br i1 %2983, label %2984, label %2880

; <label>:2984                                    ; preds = %2978
  br label %2985

; <label>:2985                                    ; preds = %2984, %2844
  %2986 = icmp slt i32 %2848, %2769
  br i1 %2986, label %2987, label %3120

; <label>:2987                                    ; preds = %2985
  %2988 = fadd float %2728, %2845
  %2989 = fadd float %2730, %2846
  %2990 = fadd float %2726, %2847
  %2991 = add nsw i32 %2848, 1
  br label %2844

; <label>:2992                                    ; preds = %3114, %2843
  %2993 = phi float [ %3115, %3114 ], [ %2809, %2843 ]
  %2994 = phi float [ %3116, %3114 ], [ %2810, %2843 ]
  %2995 = phi float [ %3117, %3114 ], [ %2811, %2843 ]
  %2996 = phi i32 [ %3118, %3114 ], [ %2761, %2843 ]
  %2997 = fmul float %2839, %2993
  %2998 = fmul float %2840, %2994
  %2999 = fmul float %2841, %2995
  %3000 = select i1 %2830, float %2997, float 0.000000e+00
  %3001 = select i1 %2831, float %2998, float 0.000000e+00
  %3002 = select i1 %2832, float %2999, float 0.000000e+00
  %3003 = fptosi float %2997 to i32
  %3004 = fptosi float %2998 to i32
  %3005 = fptosi float %2999 to i32
  %3006 = sub nsw i32 %2768, %2760
  %3007 = select i1 %2830, i32 %3006, i32 %3003
  %3008 = select i1 %2831, i32 %3006, i32 %3004
  %3009 = select i1 %2832, i32 %3006, i32 %3005
  %3010 = sitofp i32 %3007 to float
  %3011 = sitofp i32 %3008 to float
  %3012 = sitofp i32 %3009 to float
  %3013 = call float @dx.op.binary.f32(i32 35, float %3001, float %3002), !dx.precise !37  ; FMax(a,b)
  %3014 = call float @dx.op.binary.f32(i32 35, float %3000, float %3013), !dx.precise !37  ; FMax(a,b)
  %3015 = call float @dx.op.unary.f32(i32 28, float %3014), !dx.precise !37  ; Round_pi(value)
  %3016 = call float @dx.op.binary.f32(i32 36, float %3011, float %3012), !dx.precise !37  ; FMin(a,b)
  %3017 = call float @dx.op.binary.f32(i32 36, float %3010, float %3016), !dx.precise !37  ; FMin(a,b)
  %3018 = fadd float %2770, %3015
  %3019 = fadd float %2770, %3017
  %3020 = fcmp ugt float %3018, %3019
  br i1 %3020, label %3112, label %3021

; <label>:3021                                    ; preds = %2992
  %3022 = fmul float %2727, %3015
  %3023 = fsub float %2995, %3022
  %3024 = fmul float %2731, %3015
  %3025 = fsub float %2994, %3024
  %3026 = fmul float %2729, %3015
  %3027 = fsub float %2993, %3026
  br label %3028

; <label>:3028                                    ; preds = %3105, %3021
  %3029 = phi float [ %3106, %3105 ], [ %3027, %3021 ]
  %3030 = phi float [ %3107, %3105 ], [ %3025, %3021 ]
  %3031 = phi float [ %3108, %3105 ], [ %3023, %3021 ]
  %3032 = phi float [ %3109, %3105 ], [ %3018, %3021 ]
  %3033 = call float @dx.op.binary.f32(i32 36, float %3030, float %3031), !dx.precise !37  ; FMin(a,b)
  %3034 = call float @dx.op.binary.f32(i32 36, float %3029, float %3033), !dx.precise !37  ; FMin(a,b)
  %3035 = fcmp ult float %3034, 0.000000e+00
  br i1 %3035, label %3105, label %3036

; <label>:3036                                    ; preds = %3028
  %3037 = fptoui float %3032 to i32
  %3038 = fmul float %2823, %3030
  %3039 = fadd float %2567, %3038
  %3040 = fmul float %2824, %3031
  %3041 = fadd float %3039, %3040
  %3042 = call float @dx.op.unary.f32(i32 7, float %3041), !dx.precise !37  ; Saturate(value)
  %3043 = bitcast float %3042 to i32
  %3044 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4103, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2DArray<U32>
  %3045 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %3044, i32 undef, i32 %3037, i32 %2996, i32 %654, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3046 = extractvalue %dx.types.ResRet.i32 %3045, 0
  %3047 = icmp ult i32 %3046, %3043
  br i1 %3047, label %3048, label %3105, !dx.controlflow.hints !57

; <label>:3048                                    ; preds = %3036
  %3049 = fmul fast float %3029, %2570
  %3050 = fmul fast float %3030, %2569
  %3051 = fmul fast float %3031, %2568
  %3052 = fadd fast float %3050, %3049
  %3053 = fadd fast float %3052, %3051
  %3054 = fdiv fast float 1.000000e+00, %3053
  %3055 = fmul fast float %3054, %3049
  %3056 = fmul fast float %3054, %3050
  %3057 = fmul fast float %3054, %3051
  %3058 = fmul fast float %3055, %2555
  %3059 = fmul fast float %3055, %2558
  %3060 = fmul fast float %3056, %2554
  %3061 = fmul fast float %3056, %2557
  %3062 = fadd fast float %3058, %3060
  %3063 = fadd fast float %3059, %3061
  %3064 = fmul fast float %3057, %2553
  %3065 = fmul fast float %3057, %2556
  %3066 = fadd fast float %3062, %3064
  %3067 = fadd fast float %3063, %3065
  %3068 = fmul fast float %2555, %2813
  %3069 = fmul fast float %2558, %2813
  %3070 = fmul fast float %2554, %2815
  %3071 = fmul fast float %2557, %2815
  %3072 = fadd fast float %3068, %3070
  %3073 = fadd fast float %3069, %3071
  %3074 = fmul fast float %2553, %2817
  %3075 = fmul fast float %2556, %2817
  %3076 = fadd fast float %3072, %3074
  %3077 = fadd fast float %3073, %3075
  %3078 = fmul fast float %2818, %2555
  %3079 = fmul fast float %2818, %2558
  %3080 = fmul fast float %2819, %2554
  %3081 = fmul fast float %2819, %2557
  %3082 = fadd fast float %3078, %3080
  %3083 = fadd fast float %3079, %3081
  %3084 = fmul fast float %2820, %2553
  %3085 = fmul fast float %2820, %2556
  %3086 = fadd fast float %3082, %3084
  %3087 = fadd fast float %3083, %3085
  %3088 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 163)  ; CBufferLoadLegacy(handle,regIndex)
  %3089 = extractvalue %dx.types.CBufRet.f32 %3088, 1
  %3090 = call float @dx.op.unary.f32(i32 21, float %3089)  ; Exp(value)
  %3091 = fmul fast float %3090, %3086
  %3092 = fmul fast float %3090, %3087
  %3093 = fmul fast float %3090, %3076
  %3094 = fmul fast float %3090, %3077
  %3095 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3096 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3097 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %3095, %dx.types.Handle %3096, float %3066, float %3067, float undef, float undef, i32 0, i32 0, i32 undef, float %3093, float %3094, float undef, float %3091, float %3092, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %3098 = extractvalue %dx.types.ResRet.f32 %3097, 0
  %3099 = fadd fast float %3098, 0xBFD554C980000000
  %3100 = fcmp fast ult float %3099, 0.000000e+00
  br i1 %3100, label %3105, label %3101, !dx.controlflow.hints !58

; <label>:3101                                    ; preds = %3048
  %3102 = call float @dx.op.unary.f32(i32 7, float %3042)  ; Saturate(value)
  %3103 = bitcast float %3102 to i32
  %3104 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %3044, i32 7, i32 %3037, i32 %2996, i32 %654, i32 %3103)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %3105

; <label>:3105                                    ; preds = %3101, %3048, %3036, %3028
  %3106 = fsub float %3029, %2729
  %3107 = fsub float %3030, %2731
  %3108 = fsub float %3031, %2727
  %3109 = fadd float %3032, 1.000000e+00
  %3110 = fcmp ugt float %3109, %3019
  br i1 %3110, label %3111, label %3028

; <label>:3111                                    ; preds = %3105
  br label %3112

; <label>:3112                                    ; preds = %3111, %2992
  %3113 = icmp slt i32 %2996, %2769
  br i1 %3113, label %3114, label %3119

; <label>:3114                                    ; preds = %3112
  %3115 = fadd float %2728, %2993
  %3116 = fadd float %2730, %2994
  %3117 = fadd float %2726, %2995
  %3118 = add nsw i32 %2996, 1
  br label %2992

; <label>:3119                                    ; preds = %3112
  br label %3121

; <label>:3120                                    ; preds = %2985
  br label %3121

; <label>:3121                                    ; preds = %3120, %3119, %2725
  %3122 = add i32 %913, 32
  %3123 = icmp ult i32 %3122, %595
  br i1 %3123, label %773, label %3124

; <label>:3124                                    ; preds = %3121
  br label %3125

; <label>:3125                                    ; preds = %3124, %770
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare i1 @dx.op.waveAnyTrue(i32, i1) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #3

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #3

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind
declare i32 @dx.op.waveReadLaneAt.i32(i32, i32, i32) #2

; Function Attrs: nounwind
declare float @dx.op.waveReadLaneAt.f32(i32, float, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #3

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate nounwind }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!33}

!0 = !{!"dxc(private) 1.8.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 8}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !21, !24, !31}
!5 = !{!6, !8, !9, !10, !12, !14, !15, !16, !18, !20}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !7}
!10 = !{i32 3, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !11}
!11 = !{i32 1, i32 4}
!12 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !13}
!13 = !{i32 0, i32 9}
!14 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!15 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!16 = !{i32 7, %"hostlayout.class.StructuredBuffer<FPackedNaniteView>"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 896}
!18 = !{i32 8, %"class.StructuredBuffer<FNaniteRasterBinMeta>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !19}
!19 = !{i32 1, i32 32}
!20 = !{i32 9, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 9, i32 1, i32 12, i32 0, !2}
!21 = !{!22}
!22 = !{i32 0, %"class.RWTexture2DArray<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 7, i1 false, i1 false, i1 false, !23}
!23 = !{i32 0, i32 5}
!24 = !{!25, !26, !27, !28, !29, !30}
!25 = !{i32 0, %hostlayout.View* undef, !"", i32 0, i32 0, i32 1, i32 6012, null}
!26 = !{i32 1, %Scene* undef, !"", i32 0, i32 1, i32 1, i32 188, null}
!27 = !{i32 2, %NaniteRaster* undef, !"", i32 0, i32 2, i32 1, i32 48, null}
!28 = !{i32 3, %VirtualShadowMap* undef, !"", i32 0, i32 3, i32 1, i32 244, null}
!29 = !{i32 4, %Material* undef, !"", i32 0, i32 4, i32 1, i32 92, null}
!30 = !{i32 5, %UERootConstants* undef, !"", i32 3, i32 0, i32 1, i32 16, null}
!31 = !{!32}
!32 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!33 = !{void ()* @MicropolyRasterize, !"MicropolyRasterize", null, !4, !34}
!34 = !{i32 0, i64 524304, i32 4, !35, i32 5, !36}
!35 = !{i32 32, i32 1, i32 1}
!36 = !{i32 0}
!37 = !{i32 1}
!38 = distinct !{!38, !"dx.controlflow.hints", i32 1}
!39 = !{!40, !40, i64 0}
!40 = !{!"int", !41, i64 0}
!41 = !{!"omnipotent char", !42, i64 0}
!42 = !{!"Simple C/C++ TBAA"}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 1}
!51 = distinct !{!51, !"dx.controlflow.hints", i32 1}
!52 = !{!53}
!53 = distinct !{!53, !54, !"\01??RFCachedPageTable@@QAA_NUFVisBufferPixel@@@Z: %Pixel"}
!54 = distinct !{!54, !"\01??RFCachedPageTable@@QAA_NUFVisBufferPixel@@@Z"}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 1}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
!58 = distinct !{!58, !"dx.controlflow.hints", i32 1}
